{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"apps/intro/","title":"Welcome!","text":"<p>You are now one step closer from making privacy a core feature in your application. We are very happy that you decided to make this a priority. We are here to help you build trust with your users.</p>"},{"location":"apps/intro/#the-usercentrics-apps-sdk","title":"The Usercentrics Apps SDK","text":"<p>The Usercentrics Apps SDK is a native Consent Management Platform solution for mobile apps, mobile games &amp; TV applications, that enables the collection, documentation, and management of your user's privacy choices, in order to ensure legal compliance for legal regulations around the world.</p> <p></p> <p>Our SDK consists of 2 main components:</p> UsercentricsCore Contains all core functionality to collect, document and manage consent, as well as usability features like language detection and geolocation. You may use this component by itself, if you are planing to build your own UI. UsercentricsUI UI Component that hooks to our UsercentricsCore to provide a ready to use consent banner solution. This component is design to own all the complexity of compliance, while also providing several levels of customization."},{"location":"apps/intro/#get-started","title":"Get started","text":"<p>Please create a Usercentrics account or starting a free trial in order to test the Usercentrics SDK.</p>"},{"location":"apps/intro/#supported-legal-frameworks","title":"Supported Legal Frameworks","text":"<ul> <li>\ud83c\uddea\ud83c\uddfa GDPR - European Union's General Data Protection Regulation</li> <li>\ud83c\udf0e TCF 2.2 - IAB's Transparency &amp; Consent Framework 2.2</li> <li>\ud83c\uddfa\ud83c\uddf8 CCPA/CPRA and other US Frameworks - Regulations in US States</li> <li>\ud83c\udde7\ud83c\uddf7 LGPD - Brazil\u2019s Lei Geral de Prote\u00e7\u00e3o de Dados</li> <li>and many more...</li> </ul>"},{"location":"apps/intro/#features","title":"Features","text":"<ul> <li>Easy installation via a package manager</li> <li>Methods to collect &amp; update consent</li> <li>Up-to-date legal information on more than 1,000 technology vendors</li> <li>UsercentricsUI is a plug &amp; play CMP solution with endless customization options</li> <li>Build your own CMP with our UsercentricsCore module, an API that provides all necessary data and action delegates</li> <li>Device language detection</li> <li>tvOS and Android TV support only when building your own CMP</li> <li>Share the same settingsID between multiple apps and web applications</li> <li>Cross-Device consent sharing</li> <li>Consent continuity between the app and embedded WebViews. (Browser SDK is required)</li> <li>Offline Handling</li> <li>Support for Landscape Mode</li> <li>Reporting of service Opt-In rates</li> <li>Reporting of User Interactions</li> </ul>"},{"location":"apps/releases/","title":"Releases","text":""},{"location":"apps/releases/#release-history","title":"Release History","text":"<p>The following table lists the details of the latest Usercentrics App SDK releases:</p> Version Release Date Release Notes 2.13.2 March 13, 2024 <ul><li>[Feature] Clear User Session - Introducing a new API designed to simplify the process of clearing user sessions. Explore it further here</li></ul><ul><li>[Improvement] Google Consent Mode Granular Choices - Enhances integration with Google SDKs by updating to the latest changes. Explore the details here</li><li>[Improvement] Adjust Granular Consent - By Using Consent Mediation, we have fully integrated with Adjust SDK updates associated with the DMA</li></ul><ul><li> iOS Bug Fixes:<ul><li>[Fix] Adjusts in landscape mode where labels were not fully aligned with other elements of the screen</li><li>[tvOS Fix] Numerous layout modifications have been made to address the arrangement of titles and the rendering of other elements in languages that result in larger text sizes</li></ul></li></ul><ul><li>Other Fixes:<ul><li>[Fix] Removes deprecated field TCFVendor::deviceStorage</li><li>[Fix] In certain scenarios, the 'Save Settings' button color was not customizable</li></ul></li></ul> 2.13.0 February 29, 2024 <ul><li>[Feature] New Usercentrics Ready API - The API's new properties introduce a feature that, through Rulesets, allows identification of scenarios where the banner may be    bypassed in specific locations, check it out</li></ul><ul><li>[Improvement] Removes TCF 2.0 warnings - Since TCF 2.0 has been deprecated, we've removed all warnings regarding the usage of version 2.0 of this framework</li><li>[Improvement] New TCF 2.2 Stacks - Added support for Stacks 44 and 45</li></ul><ul><li>Android Bug Fixes:    <ul> <li>[Warning] \u26a0\ufe0fSupport for versions lower than Android 5.0 (API Level 20) is planned to be removed in releases starting from end of March/24</li> </ul> <ul> <li>[Fix] Fully removes support for TLS 1.2 in Android versions lower than 5.0 (API Level 20)</li> </ul></li></ul><ul><li>iOS Bug Fixes:    <ul> <li>[Fix] Banner was not correctly rendered given some specific programmatic customization scenarios</li> <li>[Fix] Fixes layout constraints when changing the language for CCPA banners</li> </ul></li></ul><ul><li>Other Fixes:    <ul> <li>[Fix] General improvement on resurfacing logic for any Legal Basis change on TCF Purposes</li> </ul></li></ul> 2.12.0 February 15, 2024 <ul><li>[Feature] Consent choice persistence - Prevents repeated banner displays across geographies for users moving across different legal frameworks (i.e. in case of frequent travellers)</li></ul><ul><li>[Improvement] - Displaying the count of third-party vendors by category title</li></ul><ul><li>Android Bug Fixes:<ul><li>[Fix] Improved UX on language selector popup</li></ul></li></ul><ul><li> iOS Bug Fixes:<ul><li>[Fix] Enhancing the UI of First-layer Popups and Sheets for Optimal Display on iPads</li></ul><ul><li>Other Fixes:<ul><li>[Fix] Aligned purposes descriptions/illustrations and vendor data with GVL translation</li><li>[Fix] Edge case when certain services, hidden by their respective categories, were visible\"</li><li>[Fix] Minor issues on session restoration when using TCF</li></ul></li></ul> 2.11.3 January 25, 2024 <ul><li>[Improvement] Adds AC String into Updated Consent Event API</li></ul><ul><li>Other Fixes:<ul><li>[Fix] Ensures accurate and proper display of large links on the Banner First and Second layer</li><li>[Fix] Deprecates deviceStorage field on TCF Vendor class</li></ul></li></ul> 2.11.1 January 10, 2024 <ul><li>[Improvement] Rework of session restore checks to prevent empty/bogus Controller ID</li></ul><ul><li>Android Bug Fixes - Experience a smoother Android experience with the resolution of minor bugs:<ul><li>[Fix] Controller ID card replaced at the bottom when using Google Additional Consent</li><li>[Fix] Language selection menu will respect programmatic customization parameters</li><li>[Fix] Warning for Chartboost SDK when R8 is enabled</li><li>[Fix] Minor UI glitch where tab names were truncated when displaying the second layer in landscape mode</li></ul></li></ul><ul><li> iOS Bug Fixes:<ul><li>[Fix] Prevent fatal exceptions for a known iOS issue, more details here</li></ul><ul><li>Other Fixes:<ul><li>[Fix] Solved for Webview continuity previously not restoring consents to Google Additional Technology Providers</li><li>[Fix] Solves the problem where the option 'Show non-IAB purposes only for EU users' incorrectly impacts users from specific regions</li><li>[Fix] Application of consents when configuring the CMP to 'Do Not Display' with Geolocation Rules</li></ul></li></ul> 2.11.0 December 22, 2023 <ul><li>[Feature] Google Consent Mode V2 Support - Seamlessly integrate with the latest Google Consent Mode, ensuring enhanced privacy compliance and meeting Google requirements.</li></ul><ul><li>[Feature] Google Additional Consent Mode V2 - Integrate with the latest Google Additional Consent, allowing you to collect and signal additional consent for ad tech providers not covered by the IAB TCF V2.2.<ul><li>[Feature] Display number of vendors for each purpose on TCF - Easily view the number of vendors associated with each purpose in the Transparency and Consent Framework.</li></ul><ul><li>[Feature] Chartboost SDK in Consent Mediation - Optimize revenue by effortlessly managing the Chartboost SDK within Usercentrics Consent Mediation.</li></ul><ul><li>[Improvement] TCFUserDecisions API update - All properties have been changed from variables to constants. The adTechProviders field has been added which represent consents for Google Additional Consent Mode. On iOS this is a required argument, so if this is irrelevant for your configuration, just set an empty list, when needed.</li></ul><ul><li>[Improvement] Location is only cached by the SDK for offline mode.</li></ul><ul><li>Android Bug Fixes - Experience a smoother Android experience with the resolution of minor bugs: <ul><li>[Fix] Avoid fetching any image resource after the banner has been closed.</li></ul> </li></ul><ul><li> iOS Bug Fixes: <ul><li>[Fix] Prevent Long Privacy Legal Links from Being Truncated;</li> <li>[Fix] Enable Scaled Fonts resources when using Custom UI. <ul><li>Other Fixes: <ul><li>[Fix] Third-Party Vendors Count misalignment in some configurations; </li> <li> [Fix] Fix the bug causing the banner to reappear for users outside the European Union, despite configurations being specifically set to enforce GDPR compliance exclusively for EU users;  <ul><li> [Fix] Update Link to Report Issues on Zendesk. </li></ul> 2.10.0 November 16, 2023 <ul><li>[Improvement] Accessibility: Various issues have been addressed to enhance accessibility.<ul><li>Resolved banner compatibility issues with iOS VoiceOver.</li><li>Resolved banner compatibility issues with Android TalkBack.</li><li>Adjusted font sizes to comply with Accessibility requirements on both iOS and Android.</li></ul></li></ul><ul><li>[Improvement] Added Ukrainian support language for TCF.<ul><li>[Resolved Issues]<ul><li>Fixed the issue of not disclosing the setting \"showCloseButton\" has been addressed, preventing errors on Android.</li><li>Fixed the crash on Android when passing an invalid controller id to restore the user session.</li><li>Fixed The issue of the remote variant configuration not being used in first layer on Unity.</li></ul> 2.9.0 October 4, 2023 <ul><li>[TCF 2.2 Support] As the industry shifts to TCF 2.2 (deadline: November 20, 2024), we are pleased to announce that SDK Version 2.9.0 now offers comprehensive support for this new industry standard. \u26a0\ufe0fImportant Note: Please be aware that this version is incompatible with TCF 2.0. Before upgrading to V 2.9.0, ensure a smooth transition to TCF 2.2 following the guidelines on How to migrate from TCF v2.0 to TCF v2.2 </li><li>[Updated Global Vendor List] We've transitioned to Global Vendor List v3 to align with industry standards.</li><li>[Legitimate Interest] To enhance transparency and privacy, purposes 3 to 6 have been removed, and purpose 11 has been introduced.</li><li>[Improved User Interface] We've made enhancements to the banner's second layer for a better user experience.</li><li>[Vendor Count Display] Users can now easily see the total count of IAB and non-IAB vendors.</li><li>[New Resurface Requirements] We've implemented new resurfacing requirements to keep your CMP compliant with the latest standards.</li></ul> 2.8.2 July 12, 2023 <ul><li>[Unity] New <code>getCMPData</code> API, to unlock <code>activeVariant</code> and <code>publsihedApps</code> properties.</li><li>[Flutter &amp; React Native] Intraction Analytics tracking API is now available.</li><li>[Improvement] \"Default\" label value is now supported for consent history entries.</li><li>[Improvement] Enable support for Hidden Data Processing Services.</li></ul> 2.8.1 May 26, 2023 <ul><li>[Fix] <code>onConsentUpdated</code> event was not triggered after initialization.</li><li>[Fix] Solved issue with Boolean values being sent via consent mediation to Adjust </li><li>[Fix] Solved Apple TV labels being cut off</li><li>[Fix] Solved Android TV issue when showing TCF on 2<sup>nd</sup> layer.</li></ul> 2.8.0 May 08, 2023 <ul><li>[Feature] Add support to US Legal Frameworks.</li><li>[Deprecate] Remove deprecated method <code>showFirstLayer(layout: Layout)</code></li></ul> 2.7.16 April 17, 2023 <ul><li>[Feature] Supporting Limited Fields in Service Descriptions.</li><li>[Improvement] Accessibility in First and Second Layer.</li><li>[Improvement] Custom UI objects are getting the latest values.</li><li>[Fix] General issues.</li></ul> 2.7.15 March 23, 2023 <ul><li>[Fix] General issues.</li><li>[Fix] Switches were showing the wrong value on iOS when pressing too many times repeatedly.</li></ul> 2.7.14 March 03, 2023 <ul><li>[Fix] Issue when toggles were showing on second layer even though they were disabled.</li><li>[Fix] Issue where the first time the app was initialized using the method getTCString, the TCString comes out empty.</li><li>[Fix] Issue where DPSs accepted by default did not appear as accepted when opening second layer.</li></ul> 2.7.13 February 22, 2023 <ul><li>[Feature] Expose PUR enabling properties</li><li>[Improvement] Extend handling of edge case exceptions. </li><li>[Improvement] UI updates to CCPA banner variant. </li><li>[Fix] Issue with third party SDKs being included in POM file.</li></ul> 2.7.12 February 07, 2023 <ul><li>[Consent Mediation] Add support for Adjust and Crashlytics.</li><li>[Consent Mediation] Add support for Custom DPSs.</li><li>Stability improvements and bug fixes.</li></ul> 2.7.10 January 16, 2023 <ul><li>[Improvement] TCF 2.2 Performance upgrades when storing TCString.</li><li>Stability improvements and bug fixes.</li></ul> 2.7.9 December 21, 2022 <ul><li>[Accessibility] Our Second Layer Banner now meets accessibility standards. </li><li>[Feature] Android's disable system back button property is exposed on <code>GeneralStyleSettings</code>.</li><li>[Feature] Adding support for \"More Information link\" option from our Configuration Dashboard.</li><li>[Improvements] Upgrades to TCF String encoding. </li><li>Stability improvements and bug fixes. </li></ul> 2.7.8 December 07, 2022 <ul><li>[Accessibility] First Layer Banner now meets accessibility standards.</li><li>Stability improvements and bug fixes. </li></ul> 2.7.7 December 02, 2022 <ul><li>[Feature] Enable banner layout options from the Configuration Dashboard. This feature is only for \"App Advanced\" Configurations. Please contact your CSM if you would like to get access to this feature.</li><li>[Improvement] Kotlin version has been upgraded to 1.8.0-Beta</li><li>[Improvement] Upgrade app cycle triggers to support latest updates from Operating Systems.</li><li>[Fix] Issues with CCPA toggle initial value.</li><li>Stability improvements and bug fixes. </li></ul> 2.7.6 November 18, 2022 <ul><li>[Feature] Support for TCF Resurface options.</li><li>Stability improvements and bug fixes. </li></ul> 2.7.5 October 26, 2022 <ul><li>[Unity] You can now build your own IAB TCF 2.2 Banner with our Data Source &amp; Action Delegate API.</li><li>[Improvements] Major upgrades to main thread use.</li><li>[Improvements] Enable support for Swift UI.</li><li>[Fix] NPE crash happening in edge cases on Android.</li></ul> 2.7.4 October 10, 2022 <ul><li>[A/B Testing] With this release, you will now be able to create your own A/B Testing when showing the banner to your users. Check our exclusive page on how to achieve this.</li><li>[Improvement] Support dynamic colors on iOS.</li><li>Stability improvements and bug fixes. </li></ul> 2.7.3 September 20, 2022 <ul><li>[Improvement] Major performance upgrades on loading times.</li></ul> 2.7.2 August 31, 2022 <ul><li>[Feature] Enable option to show \"Continue without accepting\" button on First Layer.</li><li>[Feature] It is now possible to customize Legal Links via our Programmatic API.</li><li>[Improvement] Upgrade Error logs to help you debug the SDK's behaviour better.</li><li>[Fix] Issue where shouldCollectConsent property was always true for TCF 2.2 variant.</li></ul> 2.7.1 August 19, 2022 <ul><li>[Restore User Session] With this release, you will now be able to restore user sessions when using a TCF configuration. This feature however, needs to be enabled and approved. Please contact your Customer Success Manager for more information.</li><li>[Improvement] API upgrades to increase performance and storage space usage.</li><li>[Improvement] Updates to TCF 2.2 logic, for custom use cases.</li><li>[Improvement] Handle \"NullPointerException\" and unknown origin crashes.</li><li>[Fix] Issue where SDK was overwriting theme to always be \"light\" for Dark Mode implementation on iOS.</li></ul> 2.7.0 August 01, 2022 <ul><li>[Dark Mode] Enable Dark Mode and advance banner customizations with our updated Customization API.</li><li>[Consent Mediation] Automatically apply consent to 3<sup>rd</sup> party SDKs with our Consent Mediation feature.</li><li>[Fix] UI threading issue on React Native.</li></ul> 2.6.1 June 28, 2022 <ul><li>[Unity] Enable EU Proxy.</li><li>[Unity] Expose USPData for CCPA compliance.</li><li>[Feature] Added additional customization options for TCF 2.2 banner.</li><li>[Improvement] UI upgrades to history section.</li><li>[Fix] Thread freeze issue for edge case initialization flow.</li><li>Stability improvements and bug fixes. </li></ul> 2.6.0 June 09, 2022 <ul><li>[Geolocation Rules] You can now initialize the SDK with a RuleSetID to automatically address different regulations based on user location.</li><li>[Custom UI] Since we display some fields using HTML, we are now exposing them using Spanned (Android) and NSMutableAttributedString.</li><li>[Analytics] When building your own UI, you can now integate with our Interaction Analytics API to get all your consent insights.</li><li>Stability improvements and bug fixes. </li></ul> 2.5.3 May 20, 2022 <ul><li>[Fix] Issues when parsing TCF String</li><li>Stability improvements and bug fixes. </li></ul> 2.5.2 May 16, 2022 <ul><li>[Fix] TCF String issue when signalling legitimate interests</li></ul> 2.5.1 May 12, 2022 <ul><li>[Fix] TCF String issue with encoding to shorten the length of the string</li></ul> 2.5.0 May 04, 2022 <ul><li>[Analytics] If you are using Custom UI, now you can track events using our Track API</li><li>[Custom UI] Since we display some fields using HTML, we are now exposing them using Spanned (Android) and NSMutableAttributedString.</li><li>[Improvement] Controller ID section was redesigned to have a better UX.</li><li>Stability improvements and bug fixes. </li></ul> 2.4.0 April 19, 2022 <ul><li>[Customization] You now have full control over the appearance of the First &amp; Second Layer via our Admin Interface Style options and our Programmatic API. We have updated and extended our Programmatic API to simplify banner customization. </li><li>[UI] Legal links are now added to our the First Layer, and can be hidden or shown as desired via programmatic API.</li><li>[Feature] Consent button can now be customized via the Configuration Dashboard for the CCPA variant.</li><li>[Improvement] Initialization flow for stability and avoid edge case crashes.</li><li>Stability improvements and bug fixes. </li></ul> 2.3.2 April 07, 2022 <ul><li>[TV CMP] Our consent banner is now optimized for tvOS and AndroidTV. See more TV</li><li>[Feature] You may now customize your call to actions: Accept, Deny, Save Buttons independently for First &amp; Second Layer.</li><li>[Fix] Issue with Deny button not being hidden is now fixed.</li></ul> 2.3.1 March 25, 2022 <ul><li>[API] <code>getTCString</code> has been deprecated in favor of <code>getTCFData</code>. This method returns all necessarily data to be consumed related to TCF 2.2 framework.</li><li>[API] <code>getTCFData</code> is now async to provide accurate results when actions are still pending to be reflected.</li><li>[Improvement] Required updates for TCF 2.0 framework.</li><li>[Fix] Issue when showing TCF without any vendors.</li><li>UI improvements and bug fixes. </li></ul> 2.3.0 February 21, 2022 <ul><li>[API] <code>shouldShowCMP</code> has been deprecated in favor of <code>shouldCollectConsent</code>. See Initializing the SDK</li><li>[Banner API] Banner API v1 is now discontinued and removed from the SDK. \u26a0\ufe0f If you don't wish to upgrade, please stick to v2.1.0 to avoid unexpected behaviour. See the alert in the \"Banner API V1\" tab</li><li>[Banner API] <code>showCloseButton</code> is now a required field for <code>showSecondLayer()</code>. See Presenting the Second Layer</li><li>[Banner API] BannerSettings now requires a BannerFont object to pass a Bold and Regular font separately to apply for both layers. See Banner Settings</li><li>[Banner API] UINavigationController has been deprecated in favor of UIViewController as HostView on iOS. See Presenting the Banner</li><li>[Cross-Platform] React Native and Flutter SDKs are now updated to also support Banner API v2.</li><li>[Demo App] You can now find a demo app in our documentation to test out your configuration before writing a single line of code. See Sample Apps.</li><li>[Improvement] Updates to TCF 2.0 framework.</li><li>[Fix] Issue with position of logo on Second Layer.</li><li>Stability improvements and bug fixes. </li></ul> 2.2.1 February 08, 2022 <ul><li>[Landscape Mode] We are now supporting Landscape Mode.</li><li>[React Native] Add min React and React Native version to README.</li><li>[Feature] You can now add a \"More Information\" link to your banner message to forward users to the 2<sup>nd</sup> Layer. Appearance &gt; Settings &gt; More Information Link in Banner Message. Then you will be able to add this link in the banner message text editor.</li><li>[Improvement] Adding support to actively inform users when vendors are sharing data outside a region on TCF 2.0 variant.</li><li>[Improvement] Upgrade API to facilitate compliance with new Banner API for CCPA variant.</li><li>[Improvement] Updated Sample Apps to new Banner API. See Sample Apps.</li><li>[Fix] Issue with local and remote images losing quality on iOS.</li><li>Stability improvements and bug fixes. </li></ul> 2.2.0 January 28, 2022 <ul><li>[Banner API] A complete revamp of our banner API will enable you to have high customisation and versatility to build a end-user friendly consent banner. We can't wait for you to give it a try. For more details, see: Presenting the Banner.  If you don't wish to upgrade, please stick to v2.1.0 to avoid unexpected behaviour. See the alert in the \"Banner API V1\" tab <ul><li> Now supporting all legal frameworks we support: GDPR, LGPD, CCPA, TCF 2.0 and many others. <li> Add a Header Image to your banner. <li> Have full control over the layour of your action buttons with Column, Row or Grid configurations. <li> Launch the second layer directly.<li>[Usability] Collect consent only at a category level. Option available in your Admin Interface: Configure &gt; Legal Specifications &gt; Settings &gt; Category Consent. </li><li>[Feature] \"Continue wthout Accepting\" feature is now supported for CNIL (French regulation)</li><li>[Fonts] Configuration Dashboard fonts are now deprecated for App. To enable custom fonts, please inject the font via banner API.</li><li>[API] Expose user's consent history.</li><li>[Improvement] Upgrade to API 31 on Android. </li><li>[Improvement] Upgrade to Kotlin 1.6.10 on Android. </li><li>[Fix] Issues with v2.0.3 not working with Swift Package Manager on iOS.</li><li>[Fix] Issue with edge case with RestoreUserSession failing.</li><li>[Fix] Crashes happening in Beta release of our new Banner API.</li><li>UI/UX improvements and bug fixes. </li> 2.1.0 December 14, 2021 <ul><li>[Beta] New Banner API to enable high customisation and end-user friendly consent banners. See: Presenting the Banner.</li><li>[Improvement] API section is now available in our documentation to give you more transparency on our SDK.</li><li>[Improvement] Expose additional properties to build your own you.</li><li>[Fix] Legitimate interest issue with Purpose Restrictions on TCF 2.0.</li><li>[Fix] Crashes happening in specific cases with very poor network connections on Android.</li></ul> 2.0.3 November 09, 2021 <ul><li>[Fix] Minor issues on UI related to consent toggles.</li><li>[Fix] Failing to render corner radius on iOS. </li></ul> 2.0.2 November 02, 2021 <ul><li>[Improvement] Small upgrades to Usercentrics UI user experience.</li><li>Stability improvements and bug fixes. </li></ul> 2.0.1 October 06, 2021 <ul><li>[Feature] You may now add Accept or Deny action links to the banner description and short description of your Banner.</li><li>[Improvement] We have now provided a unique method, that can store consent for IAB Vendors and non-IAB vendors at once on our TCF 2.0 variant.</li><li>[Improvement] As required by the IAB, we have included the latest updates to the TCF 2.0 framework.</li><li>[Fix] Crash happening when toggles are hidden and changes are done to TCF 2.0 Second Layer</li><li>UI/UX improvements and bug fixes. </li></ul> 2.0.0 September 21, 2021 <ul><li>[API] We have listened to your feedback, and revamped our SDK API to make it easier to integrate and maintain.</li><li>[Analytics] We are now offering a new level of Analytics, which give you insight of your user interactions with our CMP. This feature is only enabled for Beta Testers. Please contact your Customer Success Manager to request access.</li><li>[Apple Silicon] With our latest dependency updates, we can now support M1 MacBooks for development.</li><li>[Improvement] We have optimised the use of resources and added offline capabilities to provide a lightning fast API.</li><li>[Improvement] We have upgraded the level of debug logs, to  provide more transparency and clear error descriptions.</li><li>[Improvement] As required by the IAB, we have included the latest updates to the TCF 2.0 framework.</li><li>[Improvement] We have upgraded our language picker to provide a more native experience.</li><li>[Improvement] Our Android SDK is now available on Maven Central. </li></ul>"},{"location":"apps/releases/#released-betas","title":"Released Betas","text":"<p>The following table lists the Beta features that are currently available:</p> <p>Beta Disclaimer</p> <p>These features are currently considered experimental. Please make sure you validate the functionality before pushing to production.</p> Feature Minimum Version Description A/B Testing 2.7.4 Test different versions of your Banner simultaneously to optimize user interaction and opt-in rates. This feature works both with a Usercentrics provided solution or with any third party A/B Testing tool. Consent Mediation 2.7.0 To simplify the process of applying consent, we are adding a mediation feature, that is aware of the Consent API of selected SDKs, and will automatically apply/update consent as soon as it is captured."},{"location":"apps/samples/","title":"Sample Projects","text":"<p>We have prepares a sample project for each of our SDKs, so you can evaluate the integration in advanced:</p> <ul> <li>iOS Sample App</li> <li>Android Sample App</li> <li>Flutter Sample App</li> <li>React Native Sample App</li> </ul> <p>These examples provide an overview of setup, UsercentricsUI implementation and the API needed to build your own CMP.</p>"},{"location":"apps/specifications/","title":"Technical Specifications","text":"<p>Please note that Package Size is just an estimate of the packages without any runtime storage.</p>"},{"location":"apps/specifications/#supported-operating-systems","title":"Supported Operating Systems","text":"Operating System Package Size Version  iOS \u223c3MB 11 and higher  Android \u223c2MB 4.1 (API 16) and higher <p>Android minimum SDK Version</p> <p>Support for versions lower than Android 5.0 (API Level 20) is planned to be removed in releases starting from end of March/24</p>"},{"location":"apps/specifications/#supported-cross-platform-frameworks","title":"Supported Cross-Platform Frameworks","text":"Frameworks Package Size Version  Flutter \u223c1.2MB 1.20 and higher  React Native \u223c0.36MB 0.65 and higher"},{"location":"apps/api/core-api/","title":"UsercentricsCore API","text":""},{"location":"apps/api/core-api/#initialization","title":"Initialization","text":""},{"location":"apps/api/core-api/#init","title":"Init","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.configure(options: &lt;UsercentricsOptions&gt;)\n</code></pre> <pre><code>Usercentrics.initialize(appContext, &lt;UsercentricsOptions&gt;)\n</code></pre> <pre><code>Usercentrics.initialize(&lt;UsercentricsOptions&gt;);\n</code></pre> <pre><code>Usercentrics.configure(&lt;UsercentricsOptions&gt;);\n</code></pre> Inputs Type Notes options* UsercentricsOptions Defines the configuration of the SDK."},{"location":"apps/api/core-api/#isready","title":"isReady","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.isReady { &lt;UsercentricsReadyStatus&gt; in\n    // Handle status\n} onFailure: { &lt;Error&gt; in\n    // Handle error\n}\n</code></pre> <pre><code>Usercentrics.isReady({\n// Handle status\n}, {\n// Handle error\n})\n</code></pre> <pre><code>final usercentricsReadyStatus = await Usercentrics.status;\n</code></pre> <pre><code>const usercentricsReadyStatus = await Usercentrics.status;\n</code></pre> Completion Blocks Type Notes status UsercentricsReadyStatus Provides information needed to know what action to take next. Show CMP banner to collect consent or apply already collected consent. error Error Error object with non-localized description."},{"location":"apps/api/core-api/#reset","title":"Reset","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.reset()\n</code></pre> <pre><code>Usercentrics.reset()\n</code></pre> <pre><code>Usercentrics.reset();\n</code></pre> <pre><code>Usercentrics.reset();\n</code></pre> Resetting the SDK <p>Use <code>reset()</code> to clean all local storage and release the initialized instance. You will need to initialize the SDK again after a reset. Make sure you validate the expected behaviour, before using reset in production.</p>"},{"location":"apps/api/core-api/#features","title":"Features","text":""},{"location":"apps/api/core-api/#restoreusersession","title":"restoreUserSession","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.restoreUserSession(controllerId: &lt;String&gt;, onSuccess: &lt;(UsercentricsReadyStatus) -&gt; Void&gt;, onFailure: &lt;(Error) -&gt; Void&gt;)\n</code></pre> <pre><code>Usercentrics.instance.restoreUserSession(controllerId = &lt;String&gt;, onSuccess = &lt;(UsercentricsReadyStatus) -&gt; Unit&gt;, onFailure = &lt;(Throwable) -&gt; Unit&gt;)\n</code></pre> <pre><code>final status = await Usercentrics.restoreUserSession(controllerId: &lt;String&gt;);\n</code></pre> <pre><code>const status = await Usercentrics.restoreUserSession(controllerId: &lt;String&gt;);\n</code></pre> Input Type Notes controllerID String A Usercentrics generated ID, used to identify a specific user. onSuccess Callback&lt;UsercentricsReadyStatus&gt; SDK has restored the user's consent attached to the controllerID provided. See Restore User Session onFailure Callback Handle non-localized error."},{"location":"apps/api/core-api/#flutter-and-react-native","title":"Flutter and React Native","text":"Outputs Type Notes status UsercentricsReadyStatus Data needed to know if consents should be collected. See Restore User Session"},{"location":"apps/api/core-api/#clearusersession","title":"clearUserSession","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.clearUserSession(onSuccess: &lt;(UsercentricsReadyStatus) -&gt; Void&gt;, onError: &lt;(Error) -&gt; Void&gt;)\n</code></pre> <pre><code>Usercentrics.instance.clearUserSession(onSuccess = &lt;(UsercentricsReadyStatus) -&gt; Unit&gt;, onError = &lt;(Throwable) -&gt; Unit&gt;)\n</code></pre> <pre><code>final status = await Usercentrics.clearUserSession();\n</code></pre> <pre><code>const status = await Usercentrics.clearUserSession();\n</code></pre> Input Type Notes onSuccess Callback&lt;UsercentricsReadyStatus&gt; SDK has cleared the user's consent attached to the current session. See Clear User Session onError Callback Handle non-localized error."},{"location":"apps/api/core-api/#flutter-and-react-native_1","title":"Flutter and React Native","text":"Outputs Type Notes status UsercentricsReadyStatus Data needed to know if consents should be collected. See Clear User Session"},{"location":"apps/api/core-api/#getusersessiondata","title":"getUserSessionData","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let userSessionData = UsercentricsCore.shared.getUserSessionData()\n</code></pre> <pre><code>val userSessionData = Usercentrics.instance.getUserSessionData()\n</code></pre> <pre><code>final userSessionData = await Usercentrics.userSessionData;\n</code></pre> <pre><code>const userSessionData = await Usercentrics.getUserSessionData();\n</code></pre> Outputs Type Notes userSessionData String String used to pass consent to a WebView. See WebView Consent Continuity"},{"location":"apps/api/core-api/#changelanguage","title":"changeLanguage","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.changeLanguage(language: &lt;String&gt;, onSuccess: &lt;() -&gt; Void&gt;, onFailure: &lt;(Error) -&gt; Void&gt;)\n</code></pre> <pre><code>Usercentrics.instance.changeLanguage(language = &lt;String&gt;, onSuccess = &lt;() -&gt; Unit&gt;, onFailure = &lt;(Throwable) -&gt; Unit&gt;)\n</code></pre> <pre><code>await Usercentrics.changeLanguage(language: &lt;String&gt;);\n</code></pre> <pre><code>await Usercentrics.changeLanguage(language: &lt;String&gt;);\n</code></pre> Input Type Notes language String Language for content to be loaded on.  e.g. \"en\", \"de\", \"fr\". onSuccess Callback Re-render your UI, as usual with the CMP data. Content now will be on the new language. onFailure Callback Handle non-localized error <p>Always change language before rendering your UI</p> <p>If you call this method after the UsercentricsUI has already been created, the new language will not be applied.</p>"},{"location":"apps/api/core-api/#getabtestingvariant","title":"getABTestingVariant","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let testingVariant = UsercentricsCore.shared.getABTestingVariant()\n</code></pre> <pre><code>val testingVariant = Usercentrics.instance.getABTestingVariant()\n</code></pre> <pre><code>final testingVariant = await Usercentrics.aBTestingVariant;\n</code></pre> <pre><code>const testingVariant = await Usercentrics.getABTestingVariant();\n</code></pre> Outputs Type Notes testingVariant String? Get the A/B testing active string variant of the CMP"},{"location":"apps/api/core-api/#setabtestingvariant","title":"setABTestingVariant","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.setABTestingVariant(variant: &lt;String&gt;)\n</code></pre> <pre><code>Usercentrics.instance.setABTestingVariant(variant: &lt;String&gt;)\n</code></pre> <pre><code>Usercentrics.setABTestingVariant(variant: &lt;String&gt;);\n</code></pre> <pre><code>await Usercentrics.setABTestingVariant(variant: &lt;String&gt;);\n</code></pre> Input Type Notes variant String Set the A/B testing active variant of the CMP."},{"location":"apps/api/core-api/#build-your-own-ui","title":"Build your own UI","text":""},{"location":"apps/api/core-api/#getcmpdata","title":"getCMPData","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let cmpData = UsercentricsCore.shared.getCMPData()\n</code></pre> <pre><code>val cmpData = Usercentrics.instance.getCMPData()\n</code></pre> <pre><code>final cmpData = await Usercentrics.cmpData;\n</code></pre> <pre><code>const cmpData = await Usercentrics.getCMPData();\n</code></pre> Outputs Type Notes CMPData UsercentricsCMPData Data needed to building your own UI."},{"location":"apps/api/core-api/#acceptall","title":"acceptAll","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.acceptAll(consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.acceptAll(consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = await Usercentrics.acceptAll(consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = await Usercentrics.acceptAll(consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> Input Type Notes consentType Enum <li>Explicit: Consent was collected from a explicit action from the user. e.g. Button action.</li> <li>Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case.</li> Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#denyall","title":"denyAll","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.denyAll(consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.denyAll(consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = await Usercentrics.denyAll(consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = await Usercentrics.denyAll(consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> Input Type Notes consentType Enum <li>Explicit: Consent was collected from a explicit action from the user. e.g. Button action.</li> <li>Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case.</li> Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#savedecisions","title":"saveDecisions","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.saveDecisions(decisions: &lt;[UserDecision]&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.saveDecisions(decisions = &lt;[UserDecision]&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = await Usercentrics.saveDecisions(decisions: &lt;[UserDecision]&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = await Usercentrics.saveDecisions(decisions: &lt;[UserDecision]&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> Input Type Notes decisions [UserDecision] List of every service's templateID and the consent as a Bool. consentType Enum <li>Explicit: Consent was collected from a explicit action from the user. e.g. Button action.</li> <li>Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case.</li> Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#interaction-analytics","title":"Interaction Analytics","text":""},{"location":"apps/api/core-api/#track","title":"Track","text":"<p>Track user events if you are building your own UI, and want to see these events in the Usercentrics Analytics Dashboard.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.track(event: &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>Usercentrics.instance.track(event = &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>await Usercentrics.track(event: &lt;UsercentricsAnalyticsEventType&gt;);\n</code></pre> <pre><code>await Usercentrics.track(event: &lt;UsercentricsAnalyticsEventType&gt;);\n</code></pre> Input Type Notes event UsercentricsAnalyticsEventType Track analytics events when building a Custom UI or you wish to track events with a third party tool. <p>Events</p> EventAndroid EventiOS, Flutter and React Native Notes .CMP_SHOWN .cmpShown The banner was displayed to the user. It doesn't matter which layer. .ACCEPT_ALL_FIRST_LAYER .acceptAllFirstLayer The Accept All button was pressed from the first layer. .DENY_ALL_FIRST_LAYER .denyAllFirstLayer The Deny All button was pressed from the first layer. .SAVE_FIRST_LAYER .saveFirstLayer The Save button was pressed from the first layer. Save is mainly used for granular decisions. .ACCEPT_ALL_SECOND_LAYER .acceptAllSecondLayer The Accept All button was pressed from the second layer. .DENY_ALL_SECOND_LAYER .denyAllSecondLayer The Deny All button was pressed from the second layer. .SAVE_SECOND_LAYER .saveSecondLayer The Save button was pressed from the second layer. Save is mainly used for granular decisions. .IMPRINT_LINK .imprintLink The Imprint link/button was pressed. .MORE_INFORMATION_LINK .moreInformationLink The More Information link/button was pressed. This button is usually used to navigate from first layer to second layer. .PRIVACY_POLICY_LINK .privacyPolicyLink The Privacy policy link/button was pressed. .CCPA_TOGGLES_ON .ccpaTogglesOn The CCPA toggle was set to on. .CCPA_TOGGLES_OFF .ccpaTogglesOff The CCPA toggle was set to off."},{"location":"apps/api/core-api/#tcf-22-specific-methods","title":"TCF 2.2 Specific Methods","text":""},{"location":"apps/api/core-api/#gettcfdata","title":"getTCFData","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.getTCFData() { tcfData in\n    // handle data\n}\n</code></pre> <pre><code>Usercentrics.instance.getTCFData { tcfData -&gt;\n// handle data\n}\n</code></pre> <pre><code>final tcfData = await Usercentrics.tcfData;\n</code></pre> <pre><code>const tcfData = await Usercentrics.getTCFData();\n</code></pre> Outputs Type Notes TCFData TCFData IAB's Transparency &amp; Consent CMP Content. See IAB Data Source"},{"location":"apps/api/core-api/#gettcstring","title":"getTCString","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.getTCFData() { tcfData in\n    let tcString = tcfData.tcString\n}\n</code></pre> <pre><code>Usercentrics.instance.getTCFData { tcfData -&gt;\nval tcString = tcfData.tcString\n}\n</code></pre> <pre><code>final tcfData = await Usercentrics.tcfData;\nfinal tcString = tcfData.tcString;\n</code></pre> <pre><code>const tcfData = await Usercentrics.getTCFData();\nconst tcString = tcfData.tcString;\n</code></pre> Inputs Type Notes TCString String IAB's Transparency &amp; Consent String"},{"location":"apps/api/core-api/#getadditionalconsentmodedata","title":"getAdditionalConsentModeData","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let additionalConsentData = UsercentricsCore.shared.getAdditionalConsentModeData()\n</code></pre> <pre><code>val additionalConsentData = Usercentrics.instance.getAdditionalConsentModeData()\n</code></pre> <pre><code>final additionalConsentModeData = await Usercentrics.additionalConsentModeData;\n</code></pre> <pre><code>const additionalConsentModeData =  await Usercentrics.getAdditionalConsentModeData();\n</code></pre> Outputs Type Notes additionalConsentData AdditionalConsentModeData Retrieves the Google's Additional Consent String and the List of consented and not consented Ad Tech Providers."},{"location":"apps/api/core-api/#setcmpid","title":"setCMPId","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.setCMPId(id: &lt;String&gt;)\n</code></pre> <pre><code>Usercentrics.instance.setCMPId(id = &lt;String&gt;)\n</code></pre> <pre><code>await Usercentrics.setCmpIdForTCF(id: &lt;String&gt;);\n</code></pre> <pre><code>await Usercentrics.setCMPId(id: &lt;String&gt;);\n</code></pre> Inputs Type Notes CMPId Int When building your own UI for TCF 2.2. You need to pass the CMPID given to you by the IAB, in order for your solution to be compliant."},{"location":"apps/api/core-api/#acceptallfortcf","title":"acceptAllForTCF","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.acceptAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.acceptAllForTCF(fromLayer = &lt;TCFDecisionUILayer&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = await Usercentrics.acceptAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = await Usercentrics.acceptAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> Input Type Notes fromLayer Enum Layer in which consent was collected: firstLayer: First banner layer. secondLayer: Second banner layer. consentType Enum <li>Explicit: Consent was collected from a explicit action from the user. e.g. Button action.</li> <li>Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case.</li> Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#denyallfortcf","title":"denyAllForTCF","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code> let consents = UsercentricsCore.shared.denyAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code> val consents = Usercentrics.instance.denyAllForTCF(fromLayer = &lt;TCFDecisionUILayer&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = await Usercentrics.denyAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = await Usercentrics.denyAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> Input Type Notes fromLayer Enum Layer in which consent was collected: firstLayer: First banner layer. secondLayer: Second banner layer. consentType Enum <li>Explicit: Consent was collected from a explicit action from the user. e.g. Button action.</li> <li> Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case.</li> Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#savedecisionsfortcf","title":"saveDecisionsForTCF","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.saveDecisionsForTCF(tcfDecisions: &lt;TCFUserDecisions&gt;, fromLayer: &lt;TCFDecisionUILayer&gt;, serviceDecisions: &lt;[UserDecision]&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.saveDecisionsForTCF(tcfDecisions = &lt;TCFUserDecisions&gt;, fromLayer = &lt;TCFDecisionUILayer&gt;, serviceDecisions = &lt;[UserDecision]&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = await Usercentrics.saveDecisionsForTCF(tcfDecisions: &lt;TCFUserDecisions&gt;, fromLayer: &lt;TCFDecisionUILayer&gt;, serviceDecisions: &lt;[UserDecision]&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = await Usercentrics.saveDecisionsForTCF(tcfDecisions: &lt;TCFUserDecisions&gt;, fromLayer: &lt;TCFDecisionUILayer&gt;, serviceDecisions: &lt;[UserDecision]&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> Input Type Notes tcfDecisions [TCFUserDecision] List of every purpose and specialFeature with values for consent and legitimate interest as Bool and respective Vendors. fromLayer Enum Layer in which consent was collected: firstLayer: First banner layer. secondLayer: Second banner layer. decisions [UserDecision] List of every service's templateID and the consent as a Bool. consentType Enum <li>Explicit: Consent was collected from a explicit action from the user. e.g. Button action.</li> <li> Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case.</li> Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#ccpa-specific-methods","title":"CCPA Specific Methods","text":""},{"location":"apps/api/core-api/#getuspdata","title":"getUSPData","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let uspData = UsercentricsCore.shared.getUSPData()\n</code></pre> <pre><code>val uspData = Usercentrics.instance.getUSPData()\n</code></pre> <pre><code>final ccpaData = await Usercentrics.ccpaData;\n</code></pre> <pre><code>const ccpaData =  await Usercentrics.getCCPAData();\n</code></pre> Outputs Type Notes USPData CCPAData US Privacy String information"},{"location":"apps/api/core-api/#savedecisions_1","title":"saveDecisions","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let ccpaConsents = UsercentricsCore.shared.saveOptOutForCCPA(isOptedOut: &lt;Bool&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val ccpaConsents = Usercentrics.instance.saveOptOutForCCPA(isOptedOut = &lt;Bool&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final ccpaConsents = await Usercentrics.saveOptOutForCCPA(isOptedOut: &lt;Bool&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const ccpaConsents =  await Usercentrics.saveOptOutForCCPA(isOptedOut: &lt;Bool&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> Input Type Notes isOptedOut Bool Pass the user's response to the statement: \"Do Not Sell My Personal Information\". True: Do not track or sell user's information. False: You are allowed to track and sell user's information. consentType Enum Explicit: Consent was collected from a explicit action from the user. e.g. Button action. Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case. Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#helpers","title":"Helpers","text":""},{"location":"apps/api/core-api/#shouldcollectconsent","title":"shouldCollectConsent","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.shared.shouldCollectConsent()\n</code></pre> <pre><code>Usercentrics.instance.shouldCollectConsent()\n</code></pre> Outputs Type Notes shouldCollectConsent Bool True, if consent has never been collected or some service has changed thus requiring a consent update. False, if consent has been collected and no update is required."},{"location":"apps/api/core-api/#getconsents","title":"getConsents","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.getConsents()\n</code></pre> <pre><code>Usercentrics.instance.getConsents()\n</code></pre> <pre><code>await Usercentrics.consents;\n</code></pre> <pre><code>await Usercentrics.getConsents();\n</code></pre> Outputs Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#getcontrollerid","title":"getControllerId","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.getControllerId()\n</code></pre> <pre><code>Usercentrics.instance.getControllerId()\n</code></pre> <pre><code>await Usercentrics.controllerId;\n</code></pre> <pre><code>await Usercentrics.getControllerId();\n</code></pre> Outputs Type Notes controllerID String A Usercentrics generated ID, used to identify a specific user. See Restore User Session"},{"location":"apps/api/core-api/#objects","title":"Objects","text":""},{"location":"apps/api/core-api/#usercentricsoptions","title":"UsercentricsOptions","text":"Property Type Notes settingsID String A Usercentrics generated ID, used to identify a unique CMP configuration. defaultLanguage String Selected based on our language selection hierarchy. This property defines the language used to render the banner.  e.g. \"en\", \"de\", \"fr\". version String To freeze the configuration version shown to your users, you may pass a specific version here. You may find an overview of all versions in the Admin Interface under Configuration &gt; History &gt; Settings History &gt; Version (Column) or Implementation &gt; Script Tag &gt; Version History. e.g. \"3.0.4\". Passing \"latest\" (default) will fetch the latest version of your CMP configuration. Passing \"preview\" will fetch the latest draft of your CMP configuration. timeoutMillis Int Timeout for network requests in milliseconds. We do NOT recommend overwriting this field unless absolutely necessary or for debugging reasons, as well as using any values under 5,000 ms. Default is 10,000 ms (10s). loggerLevel Enum Provides a set of logs for operations being executed in the SDK. debug: includes every other level, warning: non-problematic operations, error: relevant logs to any blocking problems and none (default). rulesetId String A Usercentircs generated ID, used to identify a bundle of CMP configurations to be used depending on the user's location. consentMediation Bool Enable Consent Mediation, an automated way to pass consent to 3<sup>rd</sup> party frameworks."},{"location":"apps/api/core-api/#usercentricsreadystatus","title":"UsercentricsReadyStatus","text":"Property Type Notes shouldCollectConsent Bool True, if consent has never been collected or some service has changed thus requiring a consent update. False, if consent has been collected and no update is required. consents [UsercentricsServiceConsent] List of Services with consent choices. geolocationRuleset [GeolocationRuleset] Object containing information about Geolocation Rulesets, when enabled in the account. location [UsercentricsLocation] Current location of User."},{"location":"apps/api/core-api/#usercentricsserviceconsent","title":"UsercentricsServiceConsent","text":"Property Type Notes templateId String ID used to match a service with frameworks running on your app. See Applying Service Consent. status Bool Consent status given to this specific service. dataProcessor String Name of entity processing the data that was collected via this service. version String Legal template version. See Service Settings."},{"location":"apps/api/core-api/#geolocationruleset","title":"GeolocationRuleset","text":"Property Type Notes activeSettingsId String Given a Ruleset can contain multiple Settings IDs, this property will have the value of the active one, chosen given User's location. bannerRequiredAtLocation Bool Rulesets can be configured to not show the CMP in some locations, this propery will indicate wether the banner is required to be displayed or not."},{"location":"apps/api/core-api/#usercentricslocation","title":"UsercentricsLocation","text":"Property Type Notes countryCode String The country associated with the User's IP address. This is a Unicode CLDR region code, such as US or FR. (For most countries, these codes correspond directly to ISO-3166-2 codes. regionCode String Region, e.g. a province or state, of the country associated with the User's IP address. This is a Unicode CLDR subdivision ID, such as USCA or CAON. (These Unicode codes are derived from the subdivisions defined by the ISO-3166-2 standard."},{"location":"apps/api/core-api/#usercentricscmpdata","title":"UsercentricsCMPData","text":"Property Type Notes settings UsercentricsSettings CMP settings and content properties needed to render your own UI. See Building your own UI. services [UsercentricsService] List of services. categories [UsercentricsCategory] List of categories. userLocation UsercentricsLocation Object exposing user's general location: regionCode, countryCode and countryName. legalBasis LegalBasisLocalization Object containing Legal Basis localization data. activeVariant Enum Provides active Legal Framework: default solution for GDPR, LGPD, etc., ccpa solution for ccpa (California/US), tcf solution for IAB's Transparency &amp; Consent Framework 2.0."},{"location":"apps/api/core-api/#additionalconsentmodedata","title":"AdditionalConsentModeData","text":"Property Type Notes acString String A String that represents the consented and disclosed Google Ad Technology Providers (ATPs), as defined by Google. adTechProviders List&lt;AdTechProvider&gt; Represents the List of the defined ATPs."},{"location":"apps/api/core-api/#adtechprovider","title":"AdTechProvider","text":"Property Type Notes id Int ATP Identifier. name String ATP Name. privacyPolicyUrl String ATP Privacy Policy URL. consent Boolean Consent given to the ATP."},{"location":"apps/api/event-api/","title":"UsercentricsEvent API","text":"This API is created for Usercentrics Partners <p>If you are considering to consume those APIs, make sure that your use case really need this and in case of any doubt, don't hesitate on talking to our support team.</p>"},{"location":"apps/api/event-api/#consent-listener","title":"Consent Listener","text":""},{"location":"apps/api/event-api/#onconsentupdated","title":"onConsentUpdated","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsEvent.shared.onConsentUpdated(callback: &lt;(UpdatedConsentPayload) -&gt; Void&gt;): UsercentricsDisposableEvent&lt;UpdatedConsentPayload&gt;\n</code></pre> <pre><code>UsercentricsEvent.onConsentUpdated(callback: &lt;(UpdatedConsentPayload) -&gt; Unit&gt;): UsercentricsDisposableEvent&lt;UpdatedConsentPayload&gt;\n</code></pre> Inputs Type Notes callback &lt;(UpdatedConsentPayload) -&gt; Unit&gt; Callback with relevant information regarding consents Output Type Notes Disposable Event UsercentricsDisposableEvent Object with a function to dispose the callback created"},{"location":"apps/api/event-api/#dispose","title":"dispose","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>let disposableEvent = UsercentricsEvent.shared.onConsentUpdated(callback: ...)\ndisposableEvent.dispose()\n</code></pre> <pre><code>val disposableEvent = UsercentricsEvent.onConsentUpdated(callback = ...)\ndisposableEvent.dispose()\n</code></pre>"},{"location":"apps/api/event-api/#objects","title":"Objects","text":""},{"location":"apps/api/event-api/#updatedconsentpayload","title":"UpdatedConsentPayload","text":"Property Type Notes consents UsercentricsServiceConsent List of Services with consent choices. controllerId String A Usercentrics generated ID, used to identify a specific user. See Restore User Session tcString String IAB's Transparency &amp; Consent String uspString String IAB's US Privacy String acString String A String that represents the consented and disclosed Google Ad Technology Providers (ATPs), as defined by Google."},{"location":"apps/api/event-api/#usercentricsserviceconsent","title":"UsercentricsServiceConsent","text":"Property Type Notes templateId String ID used to match a service with frameworks running on your app. See Applying Consent. status Bool Consent status given to this specific service. dataProcessor String Name of entity processing the data that was collected via this service. version String Legal template version. See Service Settings."},{"location":"apps/api/event-api/#mediation-listener","title":"Mediation Listener","text":""},{"location":"apps/api/event-api/#onconsentmediation","title":"onConsentMediation","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsEvent.shared.onConsentMediation(callback: &lt;(MediationResultPayload) -&gt; Void&gt;): UsercentricsDisposableEvent&lt;MediationResultPayload&gt;\n</code></pre> <pre><code>UsercentricsEvent.onConsentMediation(callback:&lt;(MediationResultPayload) -&gt; Unit&gt;): UsercentricsDisposableEvent&lt;MediationResultPayload&gt;\n</code></pre> Inputs Type Notes callback (MediationResultPayload) -&gt; Void Callback with relevant information regarding mediation Output Type Notes Disposable Event UsercentricsDisposableEvent Object with a function to dispose the callback created"},{"location":"apps/api/event-api/#dispose_1","title":"dispose","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>let disposableEvent = UsercentricsEvent.onConsentMediation(callback: ...)\ndisposableEvent.dispose()\n</code></pre> <pre><code>val disposableEvent = UsercentricsEvent.onConsentMediation(callback: ...)\ndisposableEvent.dispose()\n</code></pre>"},{"location":"apps/api/event-api/#objects_1","title":"Objects","text":""},{"location":"apps/api/event-api/#mediationresultpayload","title":"MediationResultPayload","text":"Property Type Notes applied ConsentApplied List of Consent Applied payload."},{"location":"apps/api/event-api/#consentapplied","title":"ConsentApplied","text":"Property Type Notes name String Name of the SDK mediated. templateId String Template ID that represents the SDK. consent Bool Consent status given to this specific service. mediated Bool Mediation success status."},{"location":"apps/features/build_own_ui/","title":"Building your own UI","text":"<p>The Usercentrics Core module provides all the information and functionality needed to build a consent banner of your own.</p> <p>Regulation Dependent</p> <p>Be aware that there are implementation differences between each legal framework, due to divergent legal requirements.</p> GDPRTCF 2.2CCPA/CPRALGPD <p>Continue to Apply Consent</p> <p>Now, it is fundamental that the user's privacy choices are applied to the 3<sup>rd</sup> party SDKs on you App.  Please continue to Apply Consent.</p>"},{"location":"apps/features/build_own_ui/#general-data-protection-regulation-gdpr","title":"General Data Protection Regulation (GDPR)","text":"<p>The European Union's General Data Protection Regulation applies to any business in the EU as well as organizations outside the EU that collect, process and store information on EU citizens, as well as non-citizens residing in the EU. </p> <p>To get you started, we have provided a compliance checklist to help you understand the requirements of GDPR.</p>"},{"location":"apps/features/build_own_ui/#data-source","title":"Data Source","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.isReady { _ in\n\n    let data = UsercentricsCore.shared.getCMPData()\n    let settings = data.settings\n    let services = data.services\n    let categories = data.categories\n\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({\n\nval data = Usercentrics.instance.getCMPData()\nval settings = data.settings\nval services = data.services\nval categories = data.categories\n\n}, { error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>try {\nfinal data = await Usercentrics.cmpData;\nfinal settings = data.settings;\nfinal services = data.services;\nfinal categories = data.categories;\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>try {\nconst data = await Usercentrics.getCMPData();\nconst settings = data.settings;\nconst services = data.services;\nconst categories = data.categories;\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <p>Matching Categories and Services</p> <p>You may match services to categories with <code>category.slug</code> == <code>service.categorySlug</code>.</p>"},{"location":"apps/features/build_own_ui/#content-mapping","title":"Content Mapping","text":"<p>To help you navigate our Data Source, please see the following content mapping tables:</p> First Layer SDK Property 1. Title settings.labels.firstLayerTitle 2. Description settings.firstLayerDescriptionHtml (raw input) or settings.firstLayerDescription 3. Short Description settings.firstLayerMobileDescriptionHtml (raw input) or settings.firstLayerMobileDescription 4. Read More settings.labels.btnBannerReadMore 5. Accept Button Title settings.labels.btnAcceptAll 6. Deny Button Title settings.labels.btnDeny 7. More Button Title settings.labels.btnMore Second Layer SDK Property 8. Title settings.labels.secondLayerTitle 9. Description settings.labels.secondLayerDescriptionHtml (raw input) or settings.labels.secondLayerDescription 10. Accept Button Title settings.secondLayer.acceptButtonText 11. Deny Button Title settings.secondLayer.denyButtonText Banner Elements SDK Property 12. Privacy Policy Text settings.labels.privacyPolicyLinkText 13. Privacy Policy URL settings.privacyPolicyUrl 14. Imprint Text settings.labels.imprintLinkText 15. Imprint URL settings.imprintUrl 16. Language Selected settings.language 17. Languages Available settings.languagesAvailable 18. Categories Tab settings.secondLayer.tabsCategoriesLabel 19. Services Tab settings.secondLayer.tabsServicesLabel 20. Save Button Title settings.labels.btnSave Category Component SDK Property 21. Category Name category.label 22. Category Description category.description Services Component SDK Property 23. Service Name service.dataProcessor 24. Service Description Title settings.labels.descriptionOfService 25. Service Description service.descriptionOfService 26. Processing Company Title settings.labels.processingCompanyTitle 27. Processing Company service.nameOfProcessingCompany + service.addressOfProcessingCompany 28. Data Purposes Title settings.labels.dataPurposes 29. Data Purposes Description settings.labels.dataPurposesInfo 30. Data Purposes service.dataPurposesList 31. Technologies Used Title settings.labels.technologiesUsed 32. Technologies Used Description settings.labels.technologiesUsedInfo 33. Technologies Used service.technologyUsed 34. Data Collected Title settings.labels.dataCollectedList 35. Data Collected Description settings.labels.dataCollectedListInfo 36. Data Collected service.dataCollectedList 37. Legal Bases Title settings.labels.legalBasisList 38. Legal Bases Description settings.labels.legalBasisInfo 39. Legal Bases service.legalBasisList 40. Processing Location Title settings.labels.locationOfProcessing 41. Processing Location service.locationOfProcessing 42. Retention Period Title settings.labels.retentionPeriod 43. Retention Period service.retentionPeriodDescription 44. Third Country Distribution Title settings.labels.transferToThirdCountries 45. Third Country Distribution service.thirdCountryTransfer 46. Is Essential service.isEssential 47. Data Recipients Title settings.labels.dataRecipientsList 48. Data Recipients service.dataRecipientsList 49. Privacy Policy Title settings.labels.policyOf 50. Privacy Policy service.privacyPolicyURL 51. Cookie Policy Title settings.labels.cookiePolicyInfo 52. Cookie Policy service.cookiePolicyURL 53. Opt Out Link Title settings.labels.optOut 54. Opt Out Link service.optOutUrl 55. History Title settings.labels.history 56. History service.consent.history 57. History Consent Given settings.labels.yes 58. History Consent Not Given settings.labels.no 59. History Explicit Consent settings.labels.explicit 60. History Implicit Consent settings.labels.implicit"},{"location":"apps/features/build_own_ui/#action-delegates","title":"Action Delegates","text":"<p>In order to collect consent, we have provided the following 3 functions:</p> <p>Accept All</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.acceptAll(consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.acceptAll(consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.acceptAll(consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = Usercentrics.acceptAll(&lt;UsercentricsConsentType&gt;);\n</code></pre> <p>Deny All</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.denyAll(consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.denyAll(consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.denyAll(consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = Usercentrics.denyAll(&lt;UsercentricsConsentType&gt;);\n</code></pre> <p>Save</p> <p>For granular selection, you may pass specific sets of consent with an array of decisions:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.saveDecisions(decisions: &lt;[UserDecision]&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.saveDecisions(decisions = &lt;[UserDecision]&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.saveDecisions(decisions: List&lt;UserDecision&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = Usercentrics.saveDecisions([&lt;UserDecision], &lt;UsercentricsConsentType&gt;);\n</code></pre> <p>Consent Type</p> <p>The consent type should be based on if a customer made an explicit action to provide consent, or not. Implicit can be used if the user ignores or skips the CMP. We highly recommend you only use implicit together with the <code>denyAll()</code> method, which will accept only essential services.</p>"},{"location":"apps/features/build_own_ui/#interaction-analytics","title":"Interaction Analytics","text":"<p>To gather events in the Usercentrics analytics dashboard the following API is provided to track the available events:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.track(event: &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>Usercentrics.instance.track(event = &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>Usercentrics.track(event: &lt;UsercentricsAnalyticsEventType&gt;);\n</code></pre> <pre><code>Usercentrics.track(&lt;UsercentricsAnalyticsEventType&gt;);\n</code></pre> <p>Events</p> [iOS] Event [Android] Event Notes .cmpShown .CMP_SHOWN The banner was displayed to the user. It doesn't matter which layer. .acceptAllFirstLayer .ACCEPT_ALL_FIRST_LAYER The Accept All button was pressed from the first layer. .denyAllFirstLayer .DENY_ALL_FIRST_LAYER The Deny All button was pressed from the first layer. .saveFirstLayer .SAVE_FIRST_LAYER The Save button was pressed from the first layer. Save is mainly used for granular decisions. .acceptAllSecondLayer .ACCEPT_ALL_SECOND_LAYER The Accept All button was pressed from the second layer. .denyAllSecondLayer .DENY_ALL_SECOND_LAYER The Deny All button was pressed from the second layer. .saveSecondLayer .SAVE_SECOND_LAYER The Save button was pressed from the second layer. Save is mainly used for granular decisions. .imprintLink .IMPRINT_LINK The Imprint link/button was pressed. .moreInformationLink .MORE_INFORMATION_LINK The More Information link/button was pressed. This button is usually used to navigate from first layer to second layer. .privacyPolicyLink .PRIVACY_POLICY_LINK The Privacy policy link/button was pressed."},{"location":"apps/features/build_own_ui/#transparency-consent-framework-tcf-22","title":"Transparency &amp; Consent Framework (TCF 2.2)","text":"<p>The Interactive Advertising Bureau, (IAB Europe) has created the GDPR Transparency and Consent Framework (TCF 2.2) to support publishers, technology vendors and advertisers in being compliant with EU\u2019s GDPR and ePrivacy Directive.</p> <p>Be aware that a validation process with the IAB is required, in order to become a licensed TCF 2.2 CMP provider.</p>"},{"location":"apps/features/build_own_ui/#iab-data-source","title":"IAB Data Source","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.isReady { status in\n\n    // CMP Data\n    let data = UsercentricsCore.shared.getCMPData()\n    let settings = data.settings\n    let tcfSettings = settings.tcf2\n\n    // TCF Data\n    UsercentricsCore.shared.getTCFData() { tcfData in\n        let purposes = tcfData.purposes\n        let specialPurposes = tcfData.specialPurposes\n        let features = tcfData.features\n        let specialFeatures = tcfData.specialFeatures\n        let stacks = tcfData.stacks\n        let vendors = tcfData.vendors\n\n        // TCString\n        let tcString = tcfData.tcString\n    }\n\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({\n\n// CMP Data\nval data = Usercentrics.instance.getCMPData()\nval settings = data.settings\nval tcfSettings = settings.tcf2\n\n// TCF Data\nUsercentrics.instance.getTCFData() { tcfData -&gt;\nval purposes = tcfData.purposes\nval specialPurposes = tcfData.specialPurposes\nval features = tcfData.features\nval specialFeatures = tcfData.specialFeatures\nval stacks = tcfData.stacks\nval vendors = tcfData.vendors\n\n// TCString\nval tcString = tcfData.tcString\n}\n\n}, { error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>try {\nfinal data = await Usercentrics.cmpData;\nfinal settings = data.settings;\nfinal tcfSettings = settings.tcf2;\n\n// TCF Data\nfinal tcfData = await Usercentrics.tcfData;\nfinal tcString = tcfData.tcString;\nfinal purposes = tcfData.purposes;\nfinal specialPurposes = tcfData.specialPurposes;\nfinal features = tcfData.features;\nfinal specialFeatures = tcfData.specialFeatures;\nfinal stacks = tcfData.stacks;\nfinal vendors = tcfData.vendors;\n\n// TODO - Add TCString property\n\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>try {\nconst data = await Usercentrics.getCMPData();\nconst settings = data.settings;\nconst tcfSettings = settings.tcf2;\n\n// TCF Data\nconst tcfData = await Usercentrics.getTCFData();\nconst purposes = tcfData.purposes;\nconst specialPurposes = tcfData.specialPurposes;\nconst features = tcfData.features;\nconst specialFeatures = tcfData.specialFeatures;\nconst stacks = tcfData.stacks;\nconst vendors = tcfData.vendors;\n\n// TCString\nconst tcString = tcfData.tcString;\n\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre>"},{"location":"apps/features/build_own_ui/#non-iab-data-source","title":"Non-IAB Data Source","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.isReady { status in\n\n    let data = UsercentricsCore.shared.getCMPData()\n    let settings = data.settings\n    let services = data.services\n    let categories = data.categories\n\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({\n\nval data = Usercentrics.instance.getCMPData()\nval settings = data.settings\nval services = data.services\nval categories = data.categories\n\n}, { error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>try {\nfinal data = await Usercentrics.cmpData;\nfinal settings = data.settings;\nfinal services = data.services;\nfinal categories = data.categories;\n\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>try {\nconst data = await Usercentrics.getCMPData();\nconst settings = data.settings;\nconst services = data.services;\nconst categories = data.categories;\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <p>Matching Categories and Services</p> <p>You may match services to categories with <code>category.slug</code> == <code>service.categorySlug</code>.</p>"},{"location":"apps/features/build_own_ui/#content-mapping_1","title":"Content Mapping","text":"First Layer SDK Property 1. First layer title tcf2.firstLayerTitle 2. First layer description tcf2.firstLayerDescription 3. First layer additional Info tcf2.firstLayerAdditionalInfo 4. First layer resurface note tcf2.firstLayerNoteResurface 5. Vendorlist link title tcf2.linksVendorListLinkLabel 6. Manage settings link title tcf2.linksManageSettingsLabel 7. Label purposes tcf2.labelsPurposes 8. Label features tcf2.labelsFeatures Second Layer SDK Property 1. Second layer title tcf2.secondLayerTitle 2. Second layer description tcf2.secondLayerDescription 3. Purposes tab tcf2.tabsPurposeLabel 4. Vendors tab tcf2.tabsVendorsLabel 5. Vendors who are part of TCF tcf2.labelsIabVendors 6. Vendors who are NOT part of TCF tcf2.labelsNonIabVendors 7. Non IAB purposes tcf2.labelsNonIabPurposes Buttons SDK Property 1. Accept all button title tcf2.buttonsAcceptAllLabel 2. Deny all button title tcf2.buttonsDenyAllLabel 3. Save button title tcf2.buttonsSaveLabel General SDK Property 1. Language Selected settings.language 2. Languages Available settings.languagesAvailable 3. Privacy Policy Text settings.labels.privacyPolicyLinkText 4. Privacy Policy URL settings.privacyPolicyUrl 5. Imprint Text settings.labels.imprintLinkText 6. Imprint URL settings.imprintUrl Toggles SDK Property 1. Toggle consent label tcf2.togglesConsentToggleLabel 2. Toggle legitimate interest label tcf2.togglesLegIntToggleLabel Vendors SDK Property 1. Label title vendor.name 2. Purpose label tcf2.vendorPurpose 3. Purpose Name vendor.purposes[n].[findByPurposeId].name 4. Legitimate interest purpose label tcf2.vendorLegitimateInterestPurposes 5. Legitimate Interest Purpose name vendor.legitimateInterestPurposes[n].[findByPurposeId].name 6. Special purpose label tcf2.vendorSpecialPurposes 7. Special purpose name vendor.specialPurposes[n].[findByPurposeId].name 8. Feature label tcf2.vendorFeatures 9. Feature name vendor.features[n].[findByPurposeId].name 10. Special Feature label tcf2.vendorSpecialFeatures 11. Special Feature name vendor.specialFeatures[n].[findByPurposeId].name 12. Cookie refresh value vendor.cookieRefresh 13. Cookie Age value vendor.cookieMaxAgeSeconds 14. Cookie storage value vendor.usesCookie 15. Non-cookie storage value vendor.usesNonCookieAccess Purposes SDK Property 1. Label title purpose.name 2. Legitimate interest consent purpose.legitimateInterestConsent 3. Legal Description purpose.descriptionLegal 4. Purpose Description purpose.purposeDescription 5. Consent purpose.consent Special Purposes SDK Property 1. Label title specialPurpose.name 2. Legal Description specialPurpose.descriptionLegal 3. Purpose Description purpose.purposeDescription Features SDK Property 1. Label title feature.name 2. Legitimate interest consent feature.legitimateInterestConsent 3. Legal Description feature.descriptionLegal Special Features SDK Property 1. Label title specialFeature.name 2. Consent specialFeature.consent 3. Description specialFeature.purposeDescription 4. Legal Description specialFeature.descriptionLegal Stacks SDK Property 1. Label title stack.name 3. Description stack.description 3. Purposes stack.purposeIds 4. Special Features stack.specialFeatureIds"},{"location":"apps/features/build_own_ui/#set-cmp-id","title":"Set CMP ID","text":"<p>When building your own TCF 2.2 CMP, it is required to have your CMP UI design certified by the IAB. Once certified, you will need to provide your CMP ID as follows:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.setCMPId(id: &lt;ID&gt;)\n</code></pre> <pre><code>Usercentrics.instance.setCMPId(&lt;ID&gt;)\n</code></pre> <pre><code>Usercentrics.setCmpIdForTCF(id: &lt;ID&gt;)\n</code></pre> <pre><code>Usercentrics.setCMPId(&lt;ID&gt;)\n</code></pre>"},{"location":"apps/features/build_own_ui/#action-delegates_1","title":"Action Delegates","text":"<p>In order to collect consent, we have provided the following 3 functions:</p> <p>Accept All</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.acceptAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.acceptAllForTCF(fromLayer = &lt;TCFDecisionUILayer&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.acceptAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>const consents = Usercentrics.acceptAllForTCF(&lt;TCFDecisionUILayer&gt;, &lt;UsercentricsConsentType&gt;)\n</code></pre> <p>Deny All</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.denyAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.denyAllForTCF(fromLayer = &lt;TCFDecisionUILayer&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.denyAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>const consents = Usercentrics.denyAllForTCF(&lt;TCFDecisionUILayer&gt;, &lt;UsercentricsConsentType&gt;)\n</code></pre> <p>Save </p> <p>For granular selection, you may pass specific sets of consent with an array of <code>TCFUserDecisions</code>.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.saveDecisionsForTCF(tcfDecisions: &lt;[TCFUserDecisions]&gt;, \n                                                           fromLayer: &lt;TCFDecisionUILayer&gt;,\n                                                           serviceDecisions: &lt;[UserDecision]&gt;,\n                                                           consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.saveDecisionsForTCF(\ntcfDecisions = &lt;[TCFUserDecisions]&gt;, fromLayer = TCFDecisionUILayer.FIRST_LAYER,\nserviceDecisions = &lt;[UserDecision]&gt;, consentType = &lt;UsercentricsConsentType&gt;\n)\n</code></pre> <pre><code>final consents = await Usercentrics.saveDecisionsForTCF(\ntcfDecisions: List&lt;TCFDecisions&gt;,\nfromLayer: &lt;TCFDecisionUILayer&gt;,\nserviceDecisions: List&lt;UserDecision&gt;,\nconsentType: &lt;UsercentricsConsentType&gt;\n);\n</code></pre> <pre><code>const consents = await Usercentrics.saveDecisionsForTCF(\n[&lt;TCFDecisions&gt;],\n&lt;UsercentricsConsentType&gt;,\n[UserDecision],\n&lt;UsercentricsConsentType&gt;\n);\n</code></pre> <p>TCF 2.2 Decision Layer</p> <p>Depending on your design, you might have 1 or 2 layers for collecting consent. It is required by the IAB, that you specify in which layer the consent was collected. For this, you may pass the corresponding enum value from <code>TCF_DECISION_UI_LAYER</code>.</p> <p>Consent Type</p> <p>The consent type should be based on if a customer made an explicit action to provide consent, or not. Implicit can be used if the user ignores or skips the CMP. We highly recommend you only use implicit together with the <code>denyAllForTCF()</code> method, which will accept only essential services.</p>"},{"location":"apps/features/build_own_ui/#interaction-analytics_1","title":"Interaction Analytics","text":"<p>To gather events in the Usercentrics analytics dashboard the following API is provided to track the available events:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.track(event: &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>Usercentrics.instance.track(event = &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>Usercentrics.track(event: &lt;UsercentricsAnalyticsEventType&gt;);\n</code></pre> <pre><code>Usercentrics.track(&lt;UsercentricsAnalyticsEventType&gt;);\n</code></pre> <p>Events</p> [iOS] Event [Android] Event Notes .cmpShown .CMP_SHOWN The banner was displayed to the user. It doesn't matter which layer. .acceptAllFirstLayer .ACCEPT_ALL_FIRST_LAYER The Accept All button was pressed from the first layer. .denyAllFirstLayer .DENY_ALL_FIRST_LAYER The Deny All button was pressed from the first layer. .saveFirstLayer .SAVE_FIRST_LAYER The Save button was pressed from the first layer. Save is mainly used for granular decisions. .acceptAllSecondLayer .ACCEPT_ALL_SECOND_LAYER The Accept All button was pressed from the second layer. .denyAllSecondLayer .DENY_ALL_SECOND_LAYER The Deny All button was pressed from the second layer. .saveSecondLayer .SAVE_SECOND_LAYER The Save button was pressed from the second layer. Save is mainly used for granular decisions. .imprintLink .IMPRINT_LINK The Imprint link/button was pressed. .moreInformationLink .MORE_INFORMATION_LINK The More Information link/button was pressed. This button is usually used to navigate from first layer to second layer. .privacyPolicyLink .PRIVACY_POLICY_LINK The Privacy policy link/button was pressed."},{"location":"apps/features/build_own_ui/#california-consumer-privacy-act-ccpa","title":"California Consumer Privacy Act (CCPA)","text":"<p>The California Consumer Privacy Act of 2018 (CCPA) gives consumers more control over the personal information that businesses collect about them and provide guidance on how to implement the law. This landmark law secures new privacy rights for California consumers, including:</p> <ul> <li>The right to know about the personal information a business collects about them and how it is used and shared;</li> <li>The right to delete personal information collected from them (with some exceptions);</li> <li>The right to opt-out of the sale of their personal information; and</li> <li>The right to non-discrimination for exercising their CCPA rights.</li> </ul> <p>Businesses are required to give consumers certain notices explaining their privacy practices. The CCPA applies to many businesses, including data brokers.</p>"},{"location":"apps/features/build_own_ui/#data-source_1","title":"Data Source","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.isReady { status in\n\n    let data = UsercentricsCore.shared.getCMPData()\n    let settings = data.settings\n    let services = data.services\n    let categories = data.categories\n\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({\n\nval data = Usercentrics.instance.getCMPData()\nval settings = data.settings\nval services = data.services\nval categories = data.categories\n\n}, { error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>try {\nfinal data = await Usercentrics.cmpData;\nfinal settings = data.settings;\nfinal services = data.services;\nfinal categories = data.categories;\n\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>try {\nconst data = await Usercentrics.getCMPData();\nconst settings = data.settings;\nconst services = data.services;\nconst categories = data.categories;\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <p>Matching Categories and Services</p> <p>You may match services to categories with <code>category.slug</code> == <code>service.categorySlug</code>.</p>"},{"location":"apps/features/build_own_ui/#content-mapping_2","title":"Content Mapping","text":"First Layer SDK Property 1. Title ccpa.firstLayerTitle 2. Description ccpa.appFirstLayerDescription 3. Short Description ccpa.firstLayerMobileDescription 4. Read More settings.labels.btnBannerReadMore 5. Do not sell my info label ccpa.optOutNoticeLabel 6. Save Button Title ccpa.btnSave Banner Elements SDK Property 7. Privacy Policy Text settings.labels.privacyPolicyLinkText 8. Privacy Policy URL settings.privacyPolicyUrl 9. Imprint Text settings.labels.imprintLinkText 10. Imprint URL settings.imprintUrl 11. Language Selected settings.language 12. Languages Available settings.languagesAvailable 13. Categories Tab settings.secondLayer.tabsCategoriesLabel 14. Services Tab settings.secondLayer.tabsServicesLabel Category Component SDK Property 16. Category Name category.label 17. Category Description category.description Services Component SDK Property 18. Service Name service.dataProcessor 19. Service Description Title settings.labels.descriptionOfService 20. Service Description service.descriptionOfService 21. Processing Company Title settings.labels.processingCompanyTitle 22. Processing Company service.nameOfProcessingCompany + service.addressOfProcessingCompany 23. Data Purposes Title settings.labels.dataPurposes 24. Data Purposes Description settings.labels.dataPurposesInfo 25. Data Purposes service.dataPurposesList 26. Technologies Used Title settings.labels.technologiesUsed 27. Technologies Used Description settings.labels.technologiesUsedInfo 28. Technologies Used service.technologyUsed 29. Data Collected Title settings.labels.dataCollectedList 30. Data Collected Description settings.labels.dataCollectedListInfo 31. Data Collected service.dataCollectedList 32. Legal Bases Title settings.labels.legalBasisList 33. Legal Bases Description settings.labels.legalBasisInfo 34. Legal Bases service.legalBasisList 35. Processing Location Title settings.labels.locationOfProcessing 36. Processing Location service.locationOfProcessing 37. Retention Period Title settings.labels.retentionPeriod 38. Retention Period service.retentionPeriodDescription 39. Third Country Distribution Title settings.labels.transferToThirdCountries 40. Third Country Distribution service.thirdCountryTransfer 41. Is Essential service.isEssential 42. Data Recipients Title settings.labels.dataRecipientsList 43. Data Recipients service.dataRecipientsList 44. Privacy Policy Title settings.labels.policyOf 45. Privacy Policy service.privacyPolicyURL 46. Cookie Policy Title settings.labels.cookiePolicyInfo 47. Cookie Policy service.cookiePolicyURL 48. Opt Out Link Title settings.labels.optOut 49. Opt Out Link service.optOutUrl 50. History Title settings.labels.history 51. History service.consent.history 52. History Consent Given settings.labels.yes 53. History Consent Not Given settings.labels.no 54. History Explicit Consent settings.labels.explicit 55. History Implicit Consent settings.labels.implicit"},{"location":"apps/features/build_own_ui/#action-delegates_2","title":"Action Delegates","text":"<p>CCPA is a global opted out framework. This means:</p> <ul> <li>Consent is a boolean, no granular consent of services.</li> <li>The consent is given by default and the user has to explicitly opt-out.</li> </ul> <p>To collect consent for CCPA, we offer one simplified method:</p> <p>Save</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let ccpaConsents = UsercentricsCore.shared.saveOptOutForCCPA(isOptedOut: &lt;Bool&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val ccpaConsents = Usercentrics.instance.saveOptOutForCCPA(isOptedOut = &lt;Bool&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val ccpaConsents = Usercentrics.saveOptOutForCCPA(isOptedOut: &lt;Bool&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val ccpaConsents = Usercentrics.saveOptOutForCCPA(&lt;boolean&gt;, &lt;UsercentricsConsentType&gt;)\n</code></pre> <p>Consent Type</p> <p>The consent type should be based on if a customer made an explicit action to provide consent, or not. Implicit can be used if the user ignores or skips the CMP.</p>"},{"location":"apps/features/build_own_ui/#interaction-analytics_2","title":"Interaction Analytics","text":"<p>To gather events in the Usercentrics analytics dashboard the following API is provided to track the available events:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.track(event: &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>Usercentrics.instance.track(event = &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>Usercentrics.track(event: &lt;UsercentricsAnalyticsEventType&gt;);\n</code></pre> <pre><code>Usercentrics.track(&lt;UsercentricsAnalyticsEventType&gt;);\n</code></pre> <p>Events</p> [iOS] Event [Android] Event Notes .cmpShown .CMP_SHOWN The banner was displayed to the user. It doesn't matter which layer. .acceptAllFirstLayer .ACCEPT_ALL_FIRST_LAYER The Accept All button was pressed from the first layer. .denyAllFirstLayer .DENY_ALL_FIRST_LAYER The Deny All button was pressed from the first layer. .saveFirstLayer .SAVE_FIRST_LAYER The Save button was pressed from the first layer. Save is mainly used for granular decisions. .acceptAllSecondLayer .ACCEPT_ALL_SECOND_LAYER The Accept All button was pressed from the second layer. .denyAllSecondLayer .DENY_ALL_SECOND_LAYER The Deny All button was pressed from the second layer. .saveSecondLayer .SAVE_SECOND_LAYER The Save button was pressed from the second layer. Save is mainly used for granular decisions. .imprintLink .IMPRINT_LINK The Imprint link/button was pressed. .moreInformationLink .MORE_INFORMATION_LINK The More Information link/button was pressed. This button is usually used to navigate from first layer to second layer. .privacyPolicyLink .PRIVACY_POLICY_LINK The Privacy policy link/button was pressed. .ccpaTogglesOn .CCPA_TOGGLES_ON The CCPA toggle has been set to ON. .ccpaTogglesOff .CCPA_TOGGLES_OFF The CCPA toggle has been set to OFF."},{"location":"apps/features/build_own_ui/#brazils-lei-geral-de-protecao-de-dados-lgpd","title":"Brazil\u2019s Lei Geral de Prote\u00e7\u00e3o de Dados (LGPD)","text":"<p>LGPD applies to any business or organization that processes the personal data of people in Brazil, regardless of where that business or organization itself might be located. So, if your company has any customers or clients in Brazil, you should begin preparing for LGPD compliance. </p> <p>If you are already GDPR compliant, then you have already done the bulk of the work necessary to comply with LGPD. It is only necessary that you set the appropaite Legal Basis for all your services.</p>"},{"location":"apps/features/build_own_ui/#data-source_2","title":"Data Source","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.isReady { status in\n\n    let data = UsercentricsCore.shared.getCMPData()\n    let settings = data.settings\n    let services = data.services\n    let categories = data.categories\n\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({\n\nval data = Usercentrics.instance.getCMPData()\nval settings = data.settings\nval services = data.services\nval categories = data.categories\n\n}, { error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>try {\nfinal data = await Usercentrics.cmpData;\nfinal settings = data.settings;\nfinal services = data.services;\nfinal categories = data.categories;\n\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>try {\nconst data = await Usercentrics.getCMPData();\nconst settings = data.settings;\nconst services = data.services;\nconst categories = data.categories;\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <p>Matching Categories and Services</p> <p>You may match services to categories with <code>category.slug</code> == <code>service.categorySlug</code>.</p>"},{"location":"apps/features/build_own_ui/#content-mapping_3","title":"Content Mapping","text":"First Layer SDK Property 1. Title settings.labels.firstLayerTitle 2. Description settings.firstLayerDescriptionHtml (raw input) or settings.firstLayerDescription 3. Short Description settings.firstLayerMobileDescriptionHtml (raw input) or settings.firstLayerMobileDescription 4. Read More settings.labels.btnBannerReadMore 5. Accept Button Title settings.labels.btnAcceptAll 6. Deny Button Title settings.labels.btnDeny 7. More Button Title settings.labels.btnMore Second Layer SDK Property 8. Title settings.labels.secondLayerTitle 9. Description settings.labels.secondLayerDescriptionHtml (raw input) or settings.labels.secondLayerDescription 10. Accept Button Title settings.secondLayer.acceptButtonText 11. Deny Button Title settings.secondLayer.denyButtonText Banner Elements SDK Property 12. Privacy Policy Text settings.labels.privacyPolicyLinkText 13. Privacy Policy URL settings.privacyPolicyUrl 14. Imprint Text settings.labels.imprintLinkText 15. Imprint URL settings.imprintUrl 16. Language Selected settings.language 17. Languages Available settings.languagesAvailable 18. Categories Tab settings.secondLayer.tabsCategoriesLabel 19. Services Tab settings.secondLayer.tabsServicesLabel 20. Save Button Title settings.labels.btnSave Category Component SDK Property 21. Category Name category.label 22. Category Description category.description Services Component SDK Property 23. Service Name service.dataProcessor 24. Service Description Title settings.labels.descriptionOfService 25. Service Description service.descriptionOfService 26. Processing Company Title settings.labels.processingCompanyTitle 27. Processing Company service.nameOfProcessingCompany + service.addressOfProcessingCompany 28. Data Purposes Title settings.labels.dataPurposes 29. Data Purposes Description settings.labels.dataPurposesInfo 30. Data Purposes service.dataPurposesList 31. Technologies Used Title settings.labels.technologiesUsed 32. Technologies Used Description settings.labels.technologiesUsedInfo 33. Technologies Used service.technologyUsed 34. Data Collected Title settings.labels.dataCollectedList 35. Data Collected Description settings.labels.dataCollectedListInfo 36. Data Collected service.dataCollectedList 37. Legal Bases Title settings.labels.legalBasisList 38. Legal Bases Description settings.labels.legalBasisInfo 39. Legal Bases service.legalBasisList 40. Processing Location Title settings.labels.locationOfProcessing 41. Processing Location service.locationOfProcessing 42. Retention Period Title settings.labels.retentionPeriod 43. Retention Period service.retentionPeriodDescription 44. Third Country Distribution Title settings.labels.transferToThirdCountries 45. Third Country Distribution service.thirdCountryTransfer 46. Is Essential service.isEssential 47. Data Recipients Title settings.labels.dataRecipientsList 48. Data Recipients service.dataRecipientsList 49. Privacy Policy Title settings.labels.policyOf 50. Privacy Policy service.privacyPolicyURL 51. Cookie Policy Title settings.labels.cookiePolicyInfo 52. Cookie Policy service.cookiePolicyURL 53. Opt Out Link Title settings.labels.optOut 54. Opt Out Link service.optOutUrl 55. History Title settings.labels.history 56. History service.consent.history 57. History Consent Given settings.labels.yes 58. History Consent Not Given settings.labels.no 59. History Explicit Consent settings.labels.explicit 60. History Implicit Consent settings.labels.implicit"},{"location":"apps/features/build_own_ui/#action-delegates_3","title":"Action Delegates","text":"<p>In order to collect consent, we have provided the following 3 functions: </p> <p>Accept All</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.acceptAll(consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.acceptAll(consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.acceptAll(consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = Usercentrics.acceptAll(&lt;UsercentricsConsentType&gt;);\n</code></pre> <p>Deny All</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.denyAll(consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.denyAll(consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.denyAll(consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = Usercentrics.denyAll(&lt;UsercentricsConsentType&gt;);\n</code></pre> <p>Save</p> <p>For granular selection, you may pass specific sets of consent with an array of decisions:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.saveDecisions(decisions: &lt;[UserDecision]&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.saveDecisions(decisions = &lt;[UserDecision]&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.saveDecisions(decisions: List&lt;UserDecision&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = Usercentrics.saveDecisions([&lt;UserDecision], &lt;UsercentricsConsentType&gt;);\n</code></pre> <p>Consent Type</p> <p>The consent type should be based on if a customer made an explicit action to provide consent, or not. Implicit can be used if the user ignores or skips the CMP. We highly recommend you only use implicit together with the <code>denyAll()</code> method, which will accept only essential services.</p>"},{"location":"apps/features/build_own_ui/#interaction-analytics_3","title":"Interaction Analytics","text":"<p>To gather events in the Usercentrics analytics dashboard the following API is provided to track the available events:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.track(event: &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>Usercentrics.instance.track(event = &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>Usercentrics.track(event: &lt;UsercentricsAnalyticsEventType&gt;);\n</code></pre> <pre><code>Usercentrics.track(&lt;UsercentricsAnalyticsEventType&gt;);\n</code></pre> <p>Events</p> [iOS] Event [Android] Event Notes .cmpShown .CMP_SHOWN The banner was displayed to the user. It doesn't matter which layer. .acceptAllFirstLayer .ACCEPT_ALL_FIRST_LAYER The Accept All button was pressed from the first layer. .denyAllFirstLayer .DENY_ALL_FIRST_LAYER The Deny All button was pressed from the first layer. .saveFirstLayer .SAVE_FIRST_LAYER The Save button was pressed from the first layer. Save is mainly used for granular decisions. .acceptAllSecondLayer .ACCEPT_ALL_SECOND_LAYER The Accept All button was pressed from the second layer. .denyAllSecondLayer .DENY_ALL_SECOND_LAYER The Deny All button was pressed from the second layer. .saveSecondLayer .SAVE_SECOND_LAYER The Save button was pressed from the second layer. Save is mainly used for granular decisions. .imprintLink .IMPRINT_LINK The Imprint link/button was pressed. .moreInformationLink .MORE_INFORMATION_LINK The More Information link/button was pressed. This button is usually used to navigate from first layer to second layer. .privacyPolicyLink .PRIVACY_POLICY_LINK The Privacy policy link/button was pressed."},{"location":"apps/features/clear-user-session/","title":"Clearing User Session","text":""},{"location":"apps/features/clear-user-session/#overview","title":"Overview","text":"<p>This feature enables the clearing of previously granted user consents, which proves beneficial in scenarios involving applications or games that offer sign-out functionality, allowing users to terminate their session. </p> <p>By removing the consents granted by the previous user, this feature ensures a smooth transition for the next user, eliminating the necessity to reset and reinitialize the SDK.</p> <p>Remote consents will not be deleted</p> <p>This feature solely clears the session stored on the local device; all user consents, which can be retrieved using their controllerId, will remain stored on our servers.</p>"},{"location":"apps/features/clear-user-session/#examples-of-use-cases","title":"Examples of Use Cases","text":"<ul> <li> <p>Sign-Out and Sign-In Flow: If a login occurs and the current user is not associated in your system with a controllerId (which would indicate that their consents can be restored),   the Clear User Session function should be called</p> </li> <li> <p>Delete user data: If your app or game includes a feature to delete local user data, this method offers an optimized approach to clear user data while keeping the SDK prepared to collect new consents</p> </li> </ul>"},{"location":"apps/features/clear-user-session/#implementation-guide","title":"Implementation Guide","text":"<p>Loaded Settings will be kept</p> <p>Since this feature will not reinitialize the SDK, all the Settings loaded by the settingsId or rulesetId previously used will be kept. </p>"},{"location":"apps/features/clear-user-session/#steps-for-implementation","title":"Steps for Implementation","text":"<ol> <li>API Invocation: Call the <code>clearUserSession</code> API.</li> <li>Session Cleanup Callback: After invoking the API, ensure to verify the successful cleaning of the session. If the cleaning process fails, prompt the user to provide their consents again.</li> </ol>"},{"location":"apps/features/clear-user-session/#implementation","title":"Implementation","text":"<p>You can clear a user session in all Usercentrics supported platforms.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub>C#<sub>Unity</sub> <pre><code>UsercentricsCore.shared.clearUserSession(onSuccess: { status in\n    // This callback is equivalent to isReady API\n}, onError: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.instance.clearUserSession({ status -&gt;\n// This callback is equivalent to isReady API\n}, { error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>try {\nfinal status = await Usercentrics.clearUserSession();\n// This callback is equivalent to isReady API\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\ntry {\nconst status = await Usercentrics.clearUserSession();\n// This callback is equivalent to isReady API\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.Instance.ClearUserSession((status) =&gt; {\n// This callback is equivalent to isReady API\n}, (errorString) =&gt; {\n// Handle non-localized error\n});\n</code></pre>"},{"location":"apps/features/clear-user-session/#best-practices","title":"Best Practices","text":""},{"location":"apps/features/clear-user-session/#avoid-routine-invocation","title":"Avoid Routine Invocation","text":"<ul> <li>Ensure this API is called only when necessary, as invoking it excessively could burden your end-users' experience</li> <li>Within the context of signing in and out, you can eliminate the need to call this API by restoring a user session directly. Check out this page for more detailed instructions</li> </ul>"},{"location":"apps/features/consent-choice-persistence/","title":"Consent Choice Persistence","text":"<p>Feature introduced in version 2.13.0</p> <p>The Consent Choice Persistence feature is designed to streamline the user experience across different geographies by ensuring that consent preferences provided in one location are seamlessly preserved and applied when the user moves to another region where they have previously given consent.</p> <p>This means that once users consent to data collection in one city or country, they won't be prompted to provide consent again if they travel to another area covered by their initial consent.</p> <p>This feature not only enhances user convenience by eliminating repetitive consent requests, but also ensures that users' preferences are consistently  respected, regardless their location.</p>"},{"location":"apps/features/consent-choice-persistence/#implementation-guide","title":"Implementation Guide","text":"<p>Activating the Consent Choice Persistence feature is achieved by using Rulesets, requiring no additional setup through the Admin Interface or SDK adjustments.</p> <p>This seamless integration ensures that once Rulesets are in place, the feature operates effortlessly, guided by Usercentrics' robust platform.</p> <p>Usercentrics offers a versatile toolkit for tailoring consent frameworks based on user location, customizing consent banner appearances, and adjusting settings to fit your needs. This hands-off approach maximizes efficiency while maintaining precise control over consent management across different regions.</p> <p>That's it! \ud83d\ude80 we will now store consent automatically for users!</p> <p>Please, make sure you are following the guidelines on how to collect consent.</p>"},{"location":"apps/features/consent-mediation/","title":"Consent Mediation","text":"<p>This feature was introduced in its beta version with the release of 2.7.0. Starting from version 2.11.0, it has transitioned to a stable version, offering enhanced functionality.</p> <p>IMPORTANT</p> <p>Please make sure to follow all the steps outlined below and that consent is being passed correctly before pushing this feature to production.</p> <p>To simplify the process of signalling consent to third-party SDKs, we added a mediation feature, that works with APIs of SDKs listed below. This feature will update the consent when necessary within your application. Moreover, this functionality allows you to effortlessly activate Google Consent Mode and connect to advertising and mediation tools that, for instance, may not be part of TCF.</p> <p>Once correctly implemented, this feature simplifies the transmission of the consent signal and privacy choices to selected third-party SDKs.</p> <p>However, it is always advisable to review and assess the documentation, privacy policy, and privacy section of third-party vendor SDKs before deciding to work with them or integrating any.</p> <p>Please note that Usercentrics cannot fully guarantee the compliance of collection mechanisms of third-party vendors and SDKs.</p>"},{"location":"apps/features/consent-mediation/#enable-mediation","title":"Enable Mediation","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>let options = UsercentricsOptions(settingsId: &lt;SettingsID&gt;, consentMediation: true)\n</code></pre> <pre><code>val options = UsercentricsOptions(settingsId = &lt;SettingsID&gt;, consentMediation = true)\n</code></pre> <p>That's it! \ud83d\ude80 we will now apply consent automatically to all supported SDKs.</p> <p>Make sure you apply consent to not supported SDKs as well.</p> <p>change /games version as well \u2192</p>"},{"location":"apps/features/consent-mediation/#supported-sdks","title":"Supported SDKs","text":"SDK Supported version Template ID Added in Source Google Analytics for Firebase 21.5.0 (Android) 10.17.0 (iOS) diWdt4yLB 2.7.0 Analytics data collection and usage Unity Ads 3.7.5 (Android) 4.2.1 (iOS) hpb62D82I 2.7.0 Privacy consent and data APIs AppLovin 11.4.4 (Android) 11.4.3 (iOS) fHczTMzX8 2.7.0 Privacy-Consent and Data API for iOS and Android ironSource 7.1.10 (Android) 7.3.0 (iOS) 9dchbL797 2.7.0 Regulation Advanced Settings for iOS and Android Crashlytics 18.3.3 (Android) 10.4.0 (iOS) cE0B0wy4Z 2.7.12 Privacy-Consent and Data API for iOS and Android Adjust 4.33.0 (Android) 4.33.3 (iOS) Jy6PlrM3 2.7.12 Privacy-Consent and Data API for iOS and Android Chartboost 9.5.0 (Android) 9.5.1 (iOS) IEbRp3saT 2.11.0 Privacy API for iOS and Android <p>It is essential to thoroughly review the documentation of each SDK to identify the specific APIs necessary for accurately signaling user consent. Please refer to our detailed implementation guidelines for each SDK mentioned above.</p> <p>Be aware that some SDKs, such as Crashlytics, may automatically collect data by default. Therefore, it is essential to thoroughly verify whether they offer an API that allows you to disable this data collection prior to initialization.</p> <p>Although most SDKs maintain consistent contracts for Privacy APIs in their updates, any changes must be noted, and the appropriate API should be used accordingly. Remember, rigorous testing is vital for success. While our feature addresses a majority of scenarios, it is imperative that you personally verify the expected behavior in your specific use case.</p> <p>Warning</p> <p>Ensure that the version of the SDK in your application matches the one we currently support. In case of any doubt, double check our SDKs Integration section in the bottom of this page.</p>"},{"location":"apps/features/consent-mediation/#supported-mediation-sdks","title":"Supported Mediation SDKs","text":"<p>These SDKs mediate consent for selected SDKs themselves. Make sure you setup the correct TemplateIDs to automatically pass consent to mediated SDKs.</p>"},{"location":"apps/features/consent-mediation/#adjust","title":"Adjust","text":"<p>Check out the documentation page to get an insight on the Partners API. Note that we only support the ones listed below.</p> SDK Template ID Apple Ads weoN4Lb_MjWLuu Facebook ocv9HNX_g Google Ads S1_9Vsuj-Q Google Marketing Platform t-TPeXsRi Snapchat QcD9GVNXZ Tencent tMLzMavbHZoxW0 TikTokSan 6-qobRfu Twitter Skj79NodobQ Yahoo Gemini HJSPc4ids-Q Yahoo Japan Search gUbemZYaQwqxss"},{"location":"apps/features/consent-mediation/#custom-dps","title":"Custom DPS","text":"<p>When creating a Custom DPS, it's Template ID will be new and unique. For this reason, if you want to use Consent Mediation, you need to modify the default Template ID we provide in the tables above. you will need to provide this information to our SDK for Consent Mediation to know how to match your Custom DPS with the SDK you are passing consent.</p> <p>Warning</p> <p>The setup below should always happen before Usercentrics is initialized</p> <p>To do this, we have provided the  object UsercentricsMediation. e.g. If you want to switch the TemplateID for Unity Ads:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsMediation.shared.unityAdsTemplateId = \"CustomTemplateId\"\n</code></pre> <pre><code>UsercentricsMediation.unityAdsTemplateId = \"CustomTemplateId\"\n</code></pre> <p>You can customize the Template ID for SDKs that are mediated by supported SDKs. e.g SDKs that are mediated by Adjust:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsMediation.Adjust.shared.snapchatTemplateId = \"CustomTemplateId\"\n</code></pre> <pre><code>UsercentricsMediation.Adjust.snapchatTemplateId = \"CustomTemplateId\"\n</code></pre>"},{"location":"apps/features/consent-mediation/#debugging","title":"Debugging","text":"<p>Debug Mode</p> <p>To see debug messages, please set the SDK's loggerLevel to DEBUG.</p> <p>When running your application with Consent Mediation enabled, you should expect the following events:</p> <p>Enable Confirmation</p> <p>Immediately after initialization, you will get a confirmation that Consent Mediation is Enabled: <pre><code>[USERCENTRICS] Consent Mediation is Enabled\n</code></pre></p> <p>Scan</p> <p>After your configuration has been loaded, the SDK will provide an overview of the supported services: <pre><code>[USERCENTRICS][Mediation] 2/6 Services are supported: Unity Ads | Google Analytics for Firebase\n</code></pre></p> <p>Mediation</p> <p>Whenever a user provides consent or the SDK has been initialized, the SDK will apply the latest user choices to each supported SDK:</p> <pre><code>[USERCENTRICS][Mediation] \u2705 Google Analytics for Firebase: TRUE\n[USERCENTRICS][Mediation] \u2705 Unity Ads: FALSE\n</code></pre> <p>Default Consent</p> <p>On first launch, you will see consent is applied immediately after initialization, even when a user still has not given consent. This happens because the default consent provided in your configuration is being applied.</p> <p>Warning</p> <p>If your workflow necessitates the simultaneous initialization of certain SDKs alongside Usercentrics, be aware of potential racing conditions.</p> <p>These can arise when the Mediation routine is executed while an SDK is still in the process of initialization. To mitigate such issues, we strongly advise initializing SDKs only after obtaining user consent. For more detailed guidance on this approach, please refer to our further recommendations here.</p>"},{"location":"apps/features/consent-mediation/#our-integration-with-sdks","title":"Our Integration With SDKS","text":"<p>In this section, we provide a detailed overview of our methods for mediating consents. This initiative is part of our commitment to transparency, offering you clear insights into how we integrate with third-party SDKs to effectively signal user consent.</p>"},{"location":"apps/features/consent-mediation/#google-analytics-for-firebase","title":"Google Analytics for Firebase","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>import FirebaseAnalytics\n\nlet consent = .granted || .denied\n\nAnalytics.setAnalyticsCollectionEnabled(true || false)\nAnalytics.setConsent([\n  .analyticsStorage: consent\n])\n</code></pre> <pre><code>import com.google.firebase.ktx.Firebase\nimport com.google.firebase.analytics.ktx.analytics\nimport com.google.firebase.analytics.FirebaseAnalytics.ConsentStatus\n\nval consent = ConsentStatus.GRANTED || ConsentStatus.DENIED\n\nFirebase.analytics.apply {\nsetAnalyticsCollectionEnabled(true || false)\nsetConsent {\nanalyticsStorage(consent)\n}\n}\n</code></pre>"},{"location":"apps/features/consent-mediation/#unity-ads","title":"Unity Ads","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>import UnityAds\n\nlet key = \"gdpr.consent\" || \"privacy.consent\"\nlet consent = true || false\n\nlet metaData = UADSMetaData()\nmetaData.setRaw(key, value: consent)\nmetaData.commit()\n</code></pre> <pre><code>import com.unity3d.ads.metadata.MetaData\n\nval key = \"gdpr.consent\" || \"privacy.consent\"\nval consent = true || false\n\nval metaData = MetaData(context)\nmetaData.set(key, consent)\nmetaData.commit()\n</code></pre>"},{"location":"apps/features/consent-mediation/#applovin","title":"AppLovin","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>import AppLovinSDK\n\nALPrivacySettings.setHasUserConsent(true || false)\n// or\nALPrivacySettings.setDoNotSell(true || false)\n</code></pre> <pre><code>import com.applovin.sdk.AppLovinPrivacySettings\n\nAppLovinPrivacySettings.setHasUserConsent(true || false, context)\n// or\nAppLovinPrivacySettings.setDoNotSell(true || false, context)\n</code></pre>"},{"location":"apps/features/consent-mediation/#ironsource","title":"ironSource","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>import IronSource\n\nIronSource.setConsent(true || false)\n// or\nIronSource.setMetaDataWithKey(\"do_not_sell\", value: \"NO\" || \"YES\")\n</code></pre> <pre><code>import com.ironsource.mediationsdk.IronSource\n\nIronSource.setConsent(true || false)\n// or\nIronSource.setMetaData(\"do_not_sell\", \"false\" || \"true\")\n</code></pre>"},{"location":"apps/features/consent-mediation/#crashlytics","title":"Crashlytics","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>import FirebaseCrashlytics\n\nCrashlytics.crashlytics().setCrashlyticsCollectionEnabled(true || false)\n</code></pre> <pre><code>import com.google.firebase.crashlytics.ktx.crashlytics\nimport com.google.firebase.ktx.Firebase\n\nFirebase.crashlytics.setCrashlyticsCollectionEnabled(true || false)\n</code></pre>"},{"location":"apps/features/consent-mediation/#adjust_1","title":"Adjust","text":"<p>General consent</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>import Adjust\n\nAdjust.trackMeasurementConsent(true || false)\n</code></pre> <pre><code>import com.adjust.sdk.Adjust\n\nAdjust.trackMeasurementConsent(true || false)\n</code></pre> <p>Third-party SDKs</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>import Adjust\n\nlet sdkName = \"SDKName\"\nlet consent = true || false\n\nlet thirdPartySharing = ADJThirdPartySharing.init(isEnabledNumberBool: nil)\n\nthirdPartySharing.addPartnerSharingSetting(sdkName, key: \"installs\", value: consent)\nthirdPartySharing.addPartnerSharingSetting(sdkName, key: \"events\", value: consent)\nthirdPartySharing.addPartnerSharingSetting(sdkName, key: \"sessions\", value: consent)\n\nAdjust.trackThirdPartySharing(thirdPartySharing)\n</code></pre> <pre><code>import com.adjust.sdk.AdjustThirdPartySharing\n\nval sdkName = \"SDKName\"\nval consent = true || false\n\nval thirdPartySharing = AdjustThirdPartySharing(null)\n\nthirdPartySharing.addPartnerSharingSetting(sdkName, \"install\", consent)\nthirdPartySharing.addPartnerSharingSetting(sdkName, \"events\", consent)\nthirdPartySharing.addPartnerSharingSetting(sdkName, \"sessions\", consent)\n\nAdjust.trackThirdPartySharing(thirdPartySharing)\n</code></pre>"},{"location":"apps/features/consent-mediation/#chartboost","title":"Chartboost","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>import ChartboostSDK\n\nlet consent = true || false\n\nlet gdprConsent = consent ? CHBDataUseConsent.GDPR.Consent.behavioral : CHBDataUseConsent.GDPR.Consent.nonBehavioral\nChartboost.addDataUseConsent(CHBDataUseConsent.GDPR(gdprConsent))\n\nChartboost.addDataUseConsent(CHBDataUseConsent.LGPD(allowBehavioralTargeting: consent))\n\n// or\n\nlet ccpaConsent = consent ? CHBDataUseConsent.CCPA.Consent.optInSale : CHBDataUseConsent.CCPA.Consent.optOutSale\nChartboost.addDataUseConsent(CHBDataUseConsent.CCPA(ccpaConsent))\n</code></pre> <pre><code>import com.chartboost.sdk.Chartboost\nimport com.chartboost.sdk.privacy.model.CCPA\nimport com.chartboost.sdk.privacy.model.GDPR\nimport com.chartboost.sdk.privacy.model.LGPD\n\nval consent = true || false\n\nval gpdrConsent = GDPR(if (consent) GDPR.GDPR_CONSENT.BEHAVIORAL else GDPR.GDPR_CONSENT.NON_BEHAVIORAL)\nChartboost.addDataUseConsent(context, gpdrConsent)\n\nChartboost.addDataUseConsent(context, LGPD(consent))\n\n// or\n\nval ccpaConsent = if (consent) CCPA.CCPA_CONSENT.OPT_IN_SALE else CCPA.CCPA_CONSENT.OPT_OUT_SALE\nChartboost.addDataUseConsent(context, CCPA(ccpaConsent))\n</code></pre>"},{"location":"apps/features/custom-hyperlinks/","title":"Custom Hyperlinks","text":"<p>By default, when a user taps on any hyperlink available in the UsercentricsUI banner, the given URL will be opened in a browser.</p> <p></p> <p>If you wish to customize this behaviour, and capture these hyperlinks, you may leverage the already existing deeplink mechanism from iOS and Android, to capture hyperlinks.</p>"},{"location":"apps/features/custom-hyperlinks/#define-deeplinks","title":"Define Deeplinks","text":"<p>Define a deeplink scheme for the links you will be catching, and provide the URL/s in our Configuration Dashboard.</p> Banner Message LinksLegal Links <p></p> <p></p>"},{"location":"apps/features/custom-hyperlinks/#capture-deeplinks","title":"Capture Deeplinks","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <p>Configure Info.plist to listen a specific URL scheme</p> <p>In order to capture Deep Links being clicked on your app, the first step is to configure <code>Info.plist</code>.</p> <p></p> <p>Catch deeplink and provide custom implementation</p> <p>Add a listener to <code>AppDelegate.swift</code>, and add the necessary logic for your custom implementation.</p> <pre><code>// On AppDelegate\nfunc application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -&gt; Bool {\n    return handleUrl(url)\n}\n\nfunc handleUrl(_ url: URL) -&gt; Bool {\n    if (url.scheme == \"example\" &amp;&amp; url.host == \"privacyPolicy\") {\n        // Custom Implementation for Link\n        return true\n    }\n    return false\n}\n</code></pre> <p>Configure AndroidManifest.xml to listen a specific URL scheme</p> <p>In order to capture deeplinks being triggered in your app, we should create an <code>Activity</code> on <code>AndroidManifest.xml</code> that will be responsible for receiving callbacks.</p> <pre><code>&lt;activity android:name=\".DeepLinkActivity\"&gt;\n\n&lt;intent-filter android:label=\"deep link example\"&gt;\n&lt;action android:name=\"android.intent.action.VIEW\" /&gt;\n\n&lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n&lt;data\nandroid:host=\"privacyPolicy\"\nandroid:scheme=\"example\" /&gt;\n&lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre> <p>Catch deeplink and provide custom implementation</p> <p>On create, add the necessary logic for your custom implementation.</p> <pre><code>class DeepLinkActivity: AppCompatActivity() {\n\noverride fun onCreate(savedInstanceState: Bundle?) {\nsuper.onCreate(savedInstanceState)\n\nval data = intent?.data ?: return\nif (data.scheme == \"example\" &amp;&amp; data.host == \"privacyPolicy\") {\n// Custom Implementation for Link\nfinish()\n}\n}\n}\n</code></pre>"},{"location":"apps/features/google-additional-consent/","title":"Google Additional Consent","text":""},{"location":"apps/features/google-additional-consent/#what-is-google-additional-consent","title":"What is Google Additional Consent?","text":"<p>Google\u2019s Additional Consent is a technical specification designed to enable publishers to collect and signal additional consent for ad tech providers that are not part of the IAB Europe\u2019s Transparency &amp; Consent Framework (TCF) v2.2, but are listed on Google\u2019s Ad Tech Providers (ATPs) list. This specification is crucial for publishers that want to work with ad tech providers not using the TCF. It is important to note that Google\u2019s Additional Consent does not replace the standard IAB TCF v2.2 consent collection process, but supplements it, enabling an extra layer of consent collection for Google ATPs.</p> <p>The Google Additional Consent V2 supports an Additional Consent (AC) String and to allow interoperability for CMPs that support TCF and Advertiser Consent Mode. For more information, please refer to this guide.</p>"},{"location":"apps/features/google-additional-consent/#how-to-implement-google-additional-consent-v2","title":"How to implement Google Additional Consent V2?","text":"<p>Starting from version 2.11.0, we are now supporting the Google Additional Consent V2.</p> <p>To successfully incorporate Google Additional Consent V2 into your mobile application, there are a few essential steps to ensure a seamless integration process.</p> <ol> <li> <p>Setup Google Ad Tech Providers in your configuration:     Please go to your configuration in Admin Interface settings, in Google Vendors tab, under Service Settings, please enable the Google Ad Technology Providers (ATPs) and select your desired providers.</p> <p></p> </li> </ol> <p>That's it! \ud83d\ude80 your app is now using the Google Additional Consent Mode V2.</p> <p>To access the Additional Consent Mode Data generated by the SDK, please check the following API.</p>"},{"location":"apps/features/google-consent-mode-begin/","title":"Google Consent Mode","text":""},{"location":"apps/features/google-consent-mode-begin/#what-is-google-consent-mode","title":"What is Google Consent Mode?","text":"<p>Google Consent mode helps you to obtain your users consent and pass it to Google seamlessly. Consequently, Google tools adjust their behaviors automatically. Google further supplements this by filling gaps through conversion modeling and behavioral modeling, aiding you in achieving your marketing goals. For mobile applications, this is crucial to ensure the proper functioning of Firebase Services.</p> <p>Those who do not have consent mode enabled will not be able to capture new EEA users in their audiences starting from March 2024.</p>"},{"location":"apps/features/google-consent-mode-begin/#how-to-implement-google-consent-mode-in-your-app","title":"How to implement Google Consent Mode in your app","text":"<p>To successfully incorporate Google Consent Mode V2 into your mobile application, there are a few essential steps to ensure a seamless integration process.</p>"},{"location":"apps/features/google-consent-mode-begin/#consent-types","title":"Consent Types","text":"<p>Google created four new types of consent types which includes:</p> Consent Type Description ad_storage Enables storage, such as cookies (web) or device identifiers (apps), related to advertising. ad_user_data Sets consent for sending user data to Google for online advertising purposes. ad_personalization Sets consent for personalized advertising. analytics_storage Enables storage, such as cookies (web) or device identifiers (apps), related to analytics, for example, visit duration. <p>More details can be found in their official documentation.</p>"},{"location":"apps/features/google-consent-mode-begin/#setting-up-account-settings","title":"Setting up Account Settings","text":"<p>To streamline all consent types to Google, it's crucial to adhere to the steps outlined below. Following are instructions according to the chosen legal framework available on our Admin Interface.</p> TCF 2.2 + GDPRGDPR Only <p>Google adheres entirely to TCF policies and is registered as a vendor with ID 755 on IAB Global Vendor List (check out the Vendor List).</p> <p>Therefore, it's mandatory to select this vendor from the Global Vendor List to enable the SDK to signal Consent Mode accurately.</p> <p></p> <p>Full overview of the purposes and corresponding consent types can be found in the official documentation. </p> <p>Example banner:</p> <p></p> <p>After end-user interacts with the banner, the following scenarios could happen:</p> <p>- Accept All \u2705  \u2003 All Consent Types will be set to <code>true</code>.</p> <p>- Deny All \u274c  \u2003 All Consent Types will be set to <code>false</code>.</p> <p>- Save Settings (granular choices) \ud83d\udccb  \u2003 This is the trickiest scenario because the Consent Types may have different values, since it will vary according to the consent given to  Google Adverting Products TCF Vendor, Purposes being used and their Legal Basis.  \u2003 Short example:    \u2003 Above we have:  \u2003\u2003 - Google Adverting Products (Vendor ID 755) -&gt; Consent \u274c Legitimate Interest \u2705  \u2003\u2003 - Store and/or access information on a device (Purpose 1) -&gt; Consent \u274c  \u2003\u2003\u2003 therefore <code>ad_storage = denied</code> and <code>ad_user_data = denied</code>  \u2003\u2003 - Create profiles for personalised advertising (Purpose 3) -&gt; Consent \u274c  \u2003\u2003\u2003 therefore <code>ad_personalization = denied</code>  \u2003\u2003 - Use profiles to select personalised advertising (Purpose 4) -&gt; Consent \u274c  \u2003\u2003\u2003 therefore <code>ad_personalization = denied</code>  \u2003\u2003 - Measure advertising performance (Purpose 7) -&gt; Legitimate Interest \u2705  \u2003\u2003\u2003 therefore <code>ad_user_data = denied</code> since Purpose 1 Consent \u274c  \u2003\u2003 - Apply market research to generate audience insights (Purpose 9) -&gt; Legitimate Interest \u2705  \u2003\u2003\u2003 therefore <code>analytics_storage = granted</code>, since Purpose 10 has Legitimate Interest \u2705   \u2003\u2003 - Develop and improve services (Purpose 10) -&gt; Legitimate Interest \u2705  \u2003\u2003\u2003 therefore <code>analytics_storage = granted</code> since Purpose 9 has Legitimate Interest \u2705  \u2003 This is just an example of how granular consents work, in order to gain a more detailed understanding, we recommend to follow Google's official documentation.  \u2003 All the details on how Google will process the generated TCString, click here.</p> <p>When using GDPR only we will only update the value to the <code>analytics_storage</code> flag and set analytics collection enabled or disabled, according to the consent given to Google Analytics for Firebase. More details on how we implement the signaling, check out our Consent Mediation documentation.</p> <p>Therefore, it's mandatory to select this Data Processing Service to enable the SDK to signal Consent Mode accurately.</p> <p></p>"},{"location":"apps/features/google-consent-mode-end/","title":"Google consent mode end","text":""},{"location":"apps/features/google-consent-mode-end/#basic-vs-advanced-mode","title":"Basic vs Advanced Mode","text":"<p>Google delineates its implementation strategies into two categories: Basic and Advanced modes.</p> <p>The key differences are:</p> <ul> <li> <p>Basic Implementation</p> <ul> <li>Google SDKs are NOT loaded until end-user interacts with a consent banner.</li> </ul> </li> <li> <p>Advanced Implementation</p> <ul> <li>Google SDKs are loaded BEFORE end-user interacts with a consent banner.</li> </ul> </li> </ul>"},{"location":"apps/features/google-consent-mode-end/#usercentrics-approach","title":"Usercentrics approach","text":"<p>Our SDK operates within the realm of Advanced Implementation, ensuring a comprehensive integration.</p> <p>Why? Our approach never restricts any SDK from operating within any app or game.</p> <p>When Google SDKs are loaded alongside Usercentrics, you're choosing an Advanced Implementation approach. Usercentrics will then send the consent signals once it has been initialized.</p> <p>We signal Consent using Privacy APIs exposed by Third-Party SDKs, like described on our Consent Mediation documentation.</p> <p>Following the guidance above, Google SDKs will automatically identify the default consent status, which is initially set to <code>false</code> in scenarios where GDPR or another legal framework requires consent to be explicitly given.</p> <p>If you wish to implement the Basic approach, make sure to only initialize Firebase SDK after the end-user interacted with the banner.</p>"},{"location":"apps/features/google-consent-mode-end/#faq","title":"FAQ","text":"<ul> <li> <p>How to verify the integration with Usercentrics SDK?</p> <ul> <li>By enabling the debug mode, check out the console to see our logs, example:     <pre><code>[USERCENTRICS][DEBUG] [Mediation] Applied Granular Consent to Firebase - MediationGranularConsent(eea=true, analyticsStorage=false, adStorage=false, adUserData=false, adPersonalization=false)\n[USERCENTRICS][DEBUG] [Mediation] Applied Granular Consent to Firebase (Adjust Signal) - MediationGranularConsent(eea=true, analyticsStorage=false, adStorage=false, adUserData=false, adPersonalization=false)\n</code></pre></li> </ul> </li> <li> <p>How to double check the integration with Firebase?</p> <ul> <li>Check out their documentation on how to verify consent signals, iOS or Android.</li> </ul> </li> </ul>"},{"location":"apps/features/google-consent-mode-end/#integration-on-earlier-versions","title":"Integration on Earlier Versions","text":"<p>Usercentrics implemented the Google Consent Mode in version <code>2.11.0</code>. For the sake of transparency, we offer a link that documents how the integration was conducted in that version. </p>"},{"location":"apps/features/google-consent-mode-setup/","title":"Google consent mode setup","text":""},{"location":"apps/features/google-consent-mode-setup/#configuring-the-sdk","title":"Configuring the SDK","text":"iOSAndroidUnity <p>1. Integrate with Usercentrics SDK starting from version 2.13.2. </p> <p>2. Activate the Usercentrics Consent Mediation Feature:</p> <pre><code>let options = UsercentricsOptions(..., consentMediation: true)\n</code></pre> <p>Refer to the specific set of the documentation for more detailed instructions if needed. </p> <p>3. Add Firebase Library to your app:</p> <p>Use the minimum version of 10.17.0. Please refer to its guide for detailed instructions on integration.</p> <p>4. Add the Consent Mode keys to your app's info.plist file:</p> <p>Assign <code>false</code> values to the keys to establish default permission where GDPR or another legal framework requires consent to be explicitly given.</p> <p>More information can be found here.</p> <pre><code>&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_ANALYTICS_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_USER_DATA&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_PERSONALIZATION_SIGNALS&lt;/key&gt; &lt;false/&gt;\n</code></pre> <p>1. Integrate with Usercentrics SDK starting from version 2.13.2. </p> <p>2. Activate the Usercentrics Consent Mediation Feature:</p> <pre><code>val options = UsercentricsOptions(..., consentMediation = true)\n</code></pre> <p>Refer to the specific set of the documentation for more detailed instructions if needed. </p> <p>3. Add Firebase Library to your app:</p> <p>Use the minimum version of 21.5.0 or 32.5.0 if you want to use the Firebase Android BoM. Please refer to its guide for detailed instructions on integration.</p> <p>4. Add the consent mode keys to your app's AndroidManifest.xml file:</p> <p>Assign <code>false</code> values to the keys to establish default permission where GDPR or another legal framework requires consent to be explicitly given.</p> <pre><code>&lt;meta-data android:name=\"google_analytics_default_allow_analytics_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_user_data\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_personalization_signals\" android:value=\"false\" /&gt;\n</code></pre> <p>1. Enable Consent Mediation on Usercentrics Prefab.</p> <p></p> <p>2. Please use the minimum version of 11.7.0.</p> <p>3. Please refer to its guide.</p> <p>4. Make sure to add default keys for each platform to establish default permission where GDPR or another legal framework requires consent to be explicitly given.</p> <p>Android (AndroidManifest.xml):</p> <pre><code>&lt;meta-data android:name=\"google_analytics_default_allow_analytics_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_user_data\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_personalization_signals\" android:value=\"false\" /&gt;\n</code></pre> <p>iOS (Info.plist):</p> <pre><code>&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_ANALYTICS_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_USER_DATA&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_PERSONALIZATION_SIGNALS&lt;/key&gt; &lt;false/&gt;\n</code></pre> <p>That's it! \ud83d\ude80 we will now apply the consent mode to Firebase Analytics SDK.</p>"},{"location":"apps/features/google-consent-mode/","title":"Google Consent Mode","text":""},{"location":"apps/features/google-consent-mode/#what-is-google-consent-mode","title":"What is Google Consent Mode?","text":"<p>Google Consent mode helps you to obtain your users consent and pass it to Google seamlessly. Consequently, Google tools adjust their behaviors automatically. Google further supplements this by filling gaps through conversion modeling and behavioral modeling, aiding you in achieving your marketing goals. For mobile applications, this is crucial to ensure the proper functioning of Firebase Services.</p> <p>Those who do not have consent mode enabled will not be able to capture new EEA users in their audiences starting from March 2024.</p>"},{"location":"apps/features/google-consent-mode/#how-to-implement-google-consent-mode-in-your-app","title":"How to implement Google Consent Mode in your app","text":"<p>To successfully incorporate Google Consent Mode V2 into your mobile application, there are a few essential steps to ensure a seamless integration process.</p>"},{"location":"apps/features/google-consent-mode/#consent-types","title":"Consent Types","text":"<p>Google created four new types of consent types which includes:</p> Consent Type Description ad_storage Enables storage, such as cookies (web) or device identifiers (apps), related to advertising. ad_user_data Sets consent for sending user data to Google for online advertising purposes. ad_personalization Sets consent for personalized advertising. analytics_storage Enables storage, such as cookies (web) or device identifiers (apps), related to analytics, for example, visit duration. <p>More details can be found in their official documentation.</p>"},{"location":"apps/features/google-consent-mode/#setting-up-account-settings","title":"Setting up Account Settings","text":"<p>To streamline all consent types to Google, it's crucial to adhere to the steps outlined below. Following are instructions according to the chosen legal framework available on our Admin Interface.</p> TCF 2.2 + GDPRGDPR Only <p>Google adheres entirely to TCF policies and is registered as a vendor with ID 755 on IAB Global Vendor List (check out the Vendor List).</p> <p>Therefore, it's mandatory to select this vendor from the Global Vendor List to enable the SDK to signal Consent Mode accurately.</p> <p></p> <p>Full overview of the purposes and corresponding consent types can be found in the official documentation. </p> <p>Example banner:</p> <p></p> <p>After end-user interacts with the banner, the following scenarios could happen:</p> <p>- Accept All \u2705  \u2003 All Consent Types will be set to <code>true</code>.</p> <p>- Deny All \u274c  \u2003 All Consent Types will be set to <code>false</code>.</p> <p>- Save Settings (granular choices) \ud83d\udccb  \u2003 This is the trickiest scenario because the Consent Types may have different values, since it will vary according to the consent given to  Google Adverting Products TCF Vendor, Purposes being used and their Legal Basis.  \u2003 Short example:    \u2003 Above we have:  \u2003\u2003 - Google Adverting Products (Vendor ID 755) -&gt; Consent \u274c Legitimate Interest \u2705  \u2003\u2003 - Store and/or access information on a device (Purpose 1) -&gt; Consent \u274c  \u2003\u2003\u2003 therefore <code>ad_storage = denied</code> and <code>ad_user_data = denied</code>  \u2003\u2003 - Create profiles for personalised advertising (Purpose 3) -&gt; Consent \u274c  \u2003\u2003\u2003 therefore <code>ad_personalization = denied</code>  \u2003\u2003 - Use profiles to select personalised advertising (Purpose 4) -&gt; Consent \u274c  \u2003\u2003\u2003 therefore <code>ad_personalization = denied</code>  \u2003\u2003 - Measure advertising performance (Purpose 7) -&gt; Legitimate Interest \u2705  \u2003\u2003\u2003 therefore <code>ad_user_data = denied</code> since Purpose 1 Consent \u274c  \u2003\u2003 - Apply market research to generate audience insights (Purpose 9) -&gt; Legitimate Interest \u2705  \u2003\u2003\u2003 therefore <code>analytics_storage = granted</code>, since Purpose 10 has Legitimate Interest \u2705   \u2003\u2003 - Develop and improve services (Purpose 10) -&gt; Legitimate Interest \u2705  \u2003\u2003\u2003 therefore <code>analytics_storage = granted</code> since Purpose 9 has Legitimate Interest \u2705  \u2003 This is just an example of how granular consents work, in order to gain a more detailed understanding, we recommend to follow Google's official documentation.  \u2003 All the details on how Google will process the generated TCString, click here.</p> <p>When using GDPR only we will only update the value to the <code>analytics_storage</code> flag and set analytics collection enabled or disabled, according to the consent given to Google Analytics for Firebase. More details on how we implement the signaling, check out our Consent Mediation documentation.</p> <p>Therefore, it's mandatory to select this Data Processing Service to enable the SDK to signal Consent Mode accurately.</p> <p></p>"},{"location":"apps/features/google-consent-mode/#configuring-the-sdk","title":"Configuring the SDK","text":"iOSAndroidUnity <p>1. Integrate with Usercentrics SDK starting from version 2.13.2. </p> <p>2. Activate the Usercentrics Consent Mediation Feature:</p> <pre><code>let options = UsercentricsOptions(..., consentMediation: true)\n</code></pre> <p>Refer to the specific set of the documentation for more detailed instructions if needed. </p> <p>3. Add Firebase Library to your app:</p> <p>Use the minimum version of 10.17.0. Please refer to its guide for detailed instructions on integration.</p> <p>4. Add the Consent Mode keys to your app's info.plist file:</p> <p>Assign <code>false</code> values to the keys to establish default permission where GDPR or another legal framework requires consent to be explicitly given.</p> <p>More information can be found here.</p> <pre><code>&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_ANALYTICS_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_USER_DATA&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_PERSONALIZATION_SIGNALS&lt;/key&gt; &lt;false/&gt;\n</code></pre> <p>1. Integrate with Usercentrics SDK starting from version 2.13.2. </p> <p>2. Activate the Usercentrics Consent Mediation Feature:</p> <pre><code>val options = UsercentricsOptions(..., consentMediation = true)\n</code></pre> <p>Refer to the specific set of the documentation for more detailed instructions if needed. </p> <p>3. Add Firebase Library to your app:</p> <p>Use the minimum version of 21.5.0 or 32.5.0 if you want to use the Firebase Android BoM. Please refer to its guide for detailed instructions on integration.</p> <p>4. Add the consent mode keys to your app's AndroidManifest.xml file:</p> <p>Assign <code>false</code> values to the keys to establish default permission where GDPR or another legal framework requires consent to be explicitly given.</p> <pre><code>&lt;meta-data android:name=\"google_analytics_default_allow_analytics_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_user_data\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_personalization_signals\" android:value=\"false\" /&gt;\n</code></pre> <p>1. Enable Consent Mediation on Usercentrics Prefab.</p> <p></p> <p>2. Please use the minimum version of 11.7.0.</p> <p>3. Please refer to its guide.</p> <p>4. Make sure to add default keys for each platform to establish default permission where GDPR or another legal framework requires consent to be explicitly given.</p> <p>Android (AndroidManifest.xml):</p> <pre><code>&lt;meta-data android:name=\"google_analytics_default_allow_analytics_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_user_data\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_personalization_signals\" android:value=\"false\" /&gt;\n</code></pre> <p>iOS (Info.plist):</p> <pre><code>&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_ANALYTICS_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_USER_DATA&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_PERSONALIZATION_SIGNALS&lt;/key&gt; &lt;false/&gt;\n</code></pre> <p>That's it! \ud83d\ude80 we will now apply the consent mode to Firebase Analytics SDK.</p>"},{"location":"apps/features/google-consent-mode/#basic-vs-advanced-mode","title":"Basic vs Advanced Mode","text":"<p>Google delineates its implementation strategies into two categories: Basic and Advanced modes.</p> <p>The key differences are:</p> <ul> <li> <p>Basic Implementation</p> <ul> <li>Google SDKs are NOT loaded until end-user interacts with a consent banner.</li> </ul> </li> <li> <p>Advanced Implementation</p> <ul> <li>Google SDKs are loaded BEFORE end-user interacts with a consent banner.</li> </ul> </li> </ul>"},{"location":"apps/features/google-consent-mode/#usercentrics-approach","title":"Usercentrics approach","text":"<p>Our SDK operates within the realm of Advanced Implementation, ensuring a comprehensive integration.</p> <p>Why? Our approach never restricts any SDK from operating within any app or game.</p> <p>When Google SDKs are loaded alongside Usercentrics, you're choosing an Advanced Implementation approach. Usercentrics will then send the consent signals once it has been initialized.</p> <p>We signal Consent using Privacy APIs exposed by Third-Party SDKs, like described on our Consent Mediation documentation.</p> <p>Following the guidance above, Google SDKs will automatically identify the default consent status, which is initially set to <code>false</code> in scenarios where GDPR or another legal framework requires consent to be explicitly given.</p> <p>If you wish to implement the Basic approach, make sure to only initialize Firebase SDK after the end-user interacted with the banner.</p>"},{"location":"apps/features/google-consent-mode/#faq","title":"FAQ","text":"<ul> <li> <p>How to verify the integration with Usercentrics SDK?</p> <ul> <li>By enabling the debug mode, check out the console to see our logs, example:     <pre><code>[USERCENTRICS][DEBUG] [Mediation] Applied Granular Consent to Firebase - MediationGranularConsent(eea=true, analyticsStorage=false, adStorage=false, adUserData=false, adPersonalization=false)\n[USERCENTRICS][DEBUG] [Mediation] Applied Granular Consent to Firebase (Adjust Signal) - MediationGranularConsent(eea=true, analyticsStorage=false, adStorage=false, adUserData=false, adPersonalization=false)\n</code></pre></li> </ul> </li> <li> <p>How to double check the integration with Firebase?</p> <ul> <li>Check out their documentation on how to verify consent signals, iOS or Android.</li> </ul> </li> </ul>"},{"location":"apps/features/google-consent-mode/#integration-on-earlier-versions","title":"Integration on Earlier Versions","text":"<p>Usercentrics implemented the Google Consent Mode in version <code>2.11.0</code>. For the sake of transparency, we offer a link that documents how the integration was conducted in that version. </p>"},{"location":"apps/features/google-consent-mode2/","title":"Google Consent Mode","text":"<p>This page is an archive for Usercentrics SDK version 2.11.0</p> <p>We highly recommend integrating using our SDK latest version, please click here </p>"},{"location":"apps/features/google-consent-mode2/#what-is-google-consent-mode","title":"What is Google Consent Mode?","text":"<p>Google Consent mode helps you to obtain your users consent and pass it to Google seamlessly. Consequently, Google tools adjust their behaviors automatically. Google further supplements this by filling gaps through conversion modeling and behavioral modeling, aiding you in achieving your marketing goals. For mobile applications, this is crucial to ensure the proper functioning of Google Analytics for Firebase.</p> <p>Note</p> <p>Those who do not have consent mode enabled will not be able to capture new EEA users in their audiences starting from March 2024.</p>"},{"location":"apps/features/google-consent-mode2/#how-to-implement-google-consent-mode-in-your-app","title":"How to implement Google Consent Mode in your app","text":"<p>To successfully incorporate Google Consent Mode V2 into your mobile application, there are a few essential steps to ensure a seamless integration process.</p> <ol> <li> <p>SDK Version:    Make sure your application uses our 2.11.0 SDK.</p> </li> <li> <p>Activate the Usercentrics Consent Mediation Feature:    Enable the consent mediation feature for our SDK, and make sure to include the Google Analytics for Firebase template ID in your configuration. Refer to the specific set of the    documentation for detailed instructions.</p> </li> <li> <p>Add Firebase Analytics Library to your app:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <p>Use the minimum version of 10.17.0. Please refer to its guide for detailed instructions on integration.</p> <p>Finally, in your Info.plist file add the consent mode key value pairs. Assign true or false values to the keys to establish default permission. More information can be found here.</p> <pre><code>&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_ANALYTICS_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_USER_DATA&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_PERSONALIZATION_SIGNALS&lt;/key&gt; &lt;false/&gt;\n</code></pre> <p>Use the minimum version of 21.5.0 or 32.5.0 if you want to use the Firebase Android BoM. Please refer to its guide for detailed instructions on integration.</p> <p>Finally, add the consent mode key value pairs. You can find more information here.</p> <pre><code>&lt;meta-data android:name=\"google_analytics_default_allow_analytics_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_user_data\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_personalization_signals\" android:value=\"false\" /&gt;\n</code></pre> </li> </ol>"},{"location":"apps/features/google-consent-mode2/#our-integration-with-google-firebase-sdk","title":"Our Integration With Google Firebase SDK","text":"<p>In this section, we provide a detailed overview of how we mediate consents for this version <code>2.11.0</code>.</p> <p>This initiative is part of our commitment to transparency, offering you clear insights into how we integrate with third-party SDKs to effectively signal user consent.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>import FirebaseAnalytics\nlet consent = .granted || .denied\n\nAnalytics.setConsent([\n  .analyticsStorage: consent,\n  .adStorage: consent,\n  .adUserData: consent,\n  .adPersonalization: consent,\n])\n</code></pre> <pre><code>import com.google.firebase.ktx.Firebase\nimport com.google.firebase.analytics.ktx.analytics\nimport com.google.firebase.analytics.FirebaseAnalytics.ConsentStatus\nval consent = ConsentStatus.GRANTED || ConsentStatus.DENIED\n\nFirebase.analytics.setConsent {\nanalyticsStorage(consent)\nadStorage(consent)\nadUserData(consent)\nadPersonalization(consent)\n}\n</code></pre> <p>That's it! \ud83d\ude80 we will now apply the consent mode to Firebase Analytics SDK.</p>"},{"location":"apps/features/google-consent-mode2/#basic-vs-advanced-mode","title":"Basic vs Advanced Mode","text":"<p>Google delineates its implementation strategies into two categories: Basic and Advanced modes. Usercentrics SDK operates within the realm of Advanced Implementation, ensuring a comprehensive integration.</p> <p>Our approach ensures no SDK is restricted from operating within any app or game.</p> <p>Following the guidance above, Google SDKs will intuitively recognize the default consent status (preset to <code>false</code>). Concurrently, upon activation of Consent Mediation and subsequent user consent, Usercentrics SDK seamlessly initiates any requisite API calls.</p> <p>This streamlined process facilitates a harmonious operation between consent management and functionality, enhancing user experience and compliance. \ud83d\ude80</p>"},{"location":"apps/features/restore-user-sessions/","title":"Restoring a User Session &amp; Cross-Device Consent Sharing","text":"<p>Premium Feature</p> <p>Cross-Device Consent Sharing is a Premium Feature that is only enabled on request. Please reach out to your Customer Success Manager for more information.</p>"},{"location":"apps/features/restore-user-sessions/#overview","title":"Overview","text":"<p>The 'Restore User Session' feature in our SDK is a specialized tool designed for a specific use case: retrieving user consents that were previously granted on a different device. This feature is ideal for scenarios where users switch between devices, such as moving from a web interface to a smartphone.</p>"},{"location":"apps/features/restore-user-sessions/#key-concept","title":"Key Concept","text":"<p>One-Time Restoration: This feature is intended to restore consents only once from another system, ensuring a seamless user experience across devices.</p>"},{"location":"apps/features/restore-user-sessions/#examples-of-use-cases","title":"Examples of Use Cases","text":"<ul> <li>User Switching Devices: A user grants consent on a web application and later accesses the mobile app. Using 'Restore User Session', the consents are carried over, eliminating the need for re-consent on the mobile app.</li> <li>Login Process: Integrate the 'Restore User Session' feature during the user login routine to seamlessly transition consents across different sessions or platforms.</li> </ul>"},{"location":"apps/features/restore-user-sessions/#implementation-guide","title":"Implementation Guide","text":""},{"location":"apps/features/restore-user-sessions/#prerequisites","title":"Prerequisites","text":"<ul> <li>Consistent use of the same Settings ID across your systems.</li> <li>Secure storage of the Controller ID provided by Usercentrics.</li> </ul>"},{"location":"apps/features/restore-user-sessions/#steps-for-implementation","title":"Steps for Implementation","text":"<ol> <li>Store Controller ID: Save the Controller ID that Usercentrics provides. This ID is crucial for identifying the user session across different platforms</li> <li>API Invocation: Call the <code>restoreUserSession</code> API immediately after initializing the SDK and checking if it's ready</li> <li>Session Restoration Callback: After invoking the API, verify if the session was successfully restored. If the restoration fails, prompt the user to provide their consents again</li> </ol>"},{"location":"apps/features/restore-user-sessions/#what-is-controller-id","title":"What is Controller ID?","text":"<p>A <code>controllerID</code> is a Usercentrics generated ID, used to identify a user's consent history. </p> <p>In the moment that a user provides consent, the SDK will generate a <code>controllerID</code> that identifies that specific user to it's privacy choices. This ID will be stored locally and available to you after a user gives consent:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub>C#<sub>Unity</sub> <pre><code>banner.showFirstLayer(...) { userResponse in\n    let controllerID = userResponse.controllerId\n}\n</code></pre> <pre><code>banner.showFirstLayer(...) { userResponse -&gt;\nval controllerId = userResponse?.controllerId\n}\n</code></pre> <pre><code>final userResponse = await Usercentrics.showFirstLayer(...);\nval controllerId = userResponse?.controllerId\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\nconst userResponse = await Usercentrics.showFirstLayer(...);\nconst controllerId = response.controllerId;\n</code></pre> <pre><code>Usercentrics.Instance.ShowFirstLayer(&lt;UsercentricsLayout&gt;, (userResponse) =&gt; {\nvar controllerId = userResponse.controllerId;\n});\n</code></pre> <p>or you can get it by calling <code>getControllerId()</code> after the initialization:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub>C#<sub>Unity</sub> <pre><code>let controllerID = UsercentricsCore.shared.getControllerId()\n</code></pre> <pre><code>val controllerId = Usercentrics.instance.getControllerId()\n</code></pre> <pre><code>final controllerId = await Usercentrics.getControllerId();\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\nconst controllerId = await Usercentrics.getControllerId();\n</code></pre> <pre><code>Usercentrics.Instance.GetControllerID();\n</code></pre>"},{"location":"apps/features/restore-user-sessions/#implementation","title":"Implementation","text":"<p>You can now take this ID, and restore a user session in another Usercentrics supported platform, such as iOS, Android, TV, Web or Unity. By using the method <code>restoreUserSession</code> and passing the controllerID:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub>C#<sub>Unity</sub> <pre><code>UsercentricsCore.shared.restoreUserSession(controllerId: controllerId) { status in\n    // This callback is equivalent to isReady API\n    if status.shouldCollectConsent {\n        // Collect Consent\n    } else {\n        // Session restored: apply consent with status.consents\n    }\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.instance.restoreUserSession(controllerId, { status -&gt;\n// This callback is equivalent to isReady API\nif (status.shouldCollectConsent) {\n// Collect Consent\n} else {\n// Session restored: apply consent with status.consents\n}\n}, { error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>try {\nfinal status = Usercentrics.restoreUserSession(controllerId: controllerId);\n\nif (status.shouldCollectConsent) {\n// Collect Consent\n} else {\n// Session restored: apply consent with status.consents\n}\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\ntry {\nconst status = Usercentrics.restoreUserSession(controllerId: controllerId);\n\nif (status.shouldCollectConsent) {\n// Collect Consent\n} else {\n// Session restored: apply consent with status.consents\n}\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.Instance.RestoreUserSession(&lt;controllerId&gt;, (status) =&gt; {\nif (status.shouldCollectConsent)\n{\n// Collect Consent\n}\nelse\n{\n// Session restored: apply consent with status.consents\n}\n}, (errorString) =&gt; {\n// Handle non-localized error\n});\n</code></pre>"},{"location":"apps/features/restore-user-sessions/#graphical-overview","title":"Graphical overview","text":""},{"location":"apps/features/restore-user-sessions/#best-practices","title":"Best Practices","text":""},{"location":"apps/features/restore-user-sessions/#avoid-routine-invocation","title":"Avoid Routine Invocation","text":"<p>Do not invoke the <code>restoreUserSession</code> method as part of regular operations. It's best suited for specific instances, like during the login process.</p>"},{"location":"apps/features/restore-user-sessions/#save-controllerid-only-after-user-gave-consent","title":"Save controllerId only after user gave consent","text":"<p>The <code>controllerId</code> serves as a reference to the consents provided by the end-user. Therefore, it is recommended to store it on your premises only after the user has interacted with the banner and the consents are ready to be processed.</p>"},{"location":"apps/features/restore-user-sessions/#single-use-restoration","title":"Single-Use Restoration","text":"<p>Remember that this feature is designed for a one-time restoration of user consents from another system. Repeated attempts to restore the session using the same Controller ID will not be successful.</p> <p>What happens if I call <code>restoreUserSession</code> repeatedly?</p> <p>The SDK is designed to only restore the session once. Repeated calls, especially with the same Controller ID, will not initiate additional session restorations.</p> <p>CCPA/CPRA and US Frameworks (VCDPA, CPA, CTDPA, UCPA) are not supported</p> <p>Cross-Device Consent Sharing is not supported for CCPA/CPRA and US Frameworks. The consent collected for these frameworks is only meant for the device the consent was given in.</p>"},{"location":"apps/features/webview-continuity/","title":"WebView User Session Continuity","text":"<p>For cases where your app uses WebViews, we provide a mechanism to inject a user session, so that the CMP on the WebView is not shown every time the user opens it.</p> <p>To implement this feature the SDK offers the method <code>getUserSessionData</code>, which returns a String (JSON) with the user session.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <p>This data must then be injected into a global variable called <code>UC_UI_USER_SESSION_DATA</code> in your WKWebView. </p> <pre><code>let sessionData = UsercentricsCore.shared.getUserSessionData()\n\nlet script = \"\"\"\nwindow.ucMobileSdk = {\n    getUserSessionData: function() {\n        return '\\(sessionData)';\n    }\n}\n\"\"\"\n\nlet userScript = WKUserScript(source: script, injectionTime: .atDocumentStart, forMainFrameOnly: true)\nlet contentController = WKUserContentController()\ncontentController.addUserScript(userScript)\n\nlet preferences = WKPreferences()\npreferences.javaScriptEnabled = true\n\nlet webConfiguration = WKWebViewConfiguration()\nwebConfiguration.preferences = preferences\nwebConfiguration.userContentController = contentController\n\nwebView = WKWebView(frame: .zero, configuration: webConfiguration)\nwebView.uiDelegate = self\n\nlet myURL = URL(string:\"https://&lt;some_url&gt;\")\nlet myRequest = URLRequest(url: myURL!)\nwebView.load(myRequest)\n</code></pre> <p>This data must be injected using a <code>JavaScriptInterface</code> with a method <code>getSessionData</code>.</p> <pre><code>webView.settings.javaScriptEnabled = true\nwebView.settings.domStorageEnabled = true\n\nwebView.addJavascriptInterface(SampleJavascriptInterface(userSessionData), \"ucMobileSdk\")\nwebView.loadUrl(\"https://&lt;some_url&gt;\")\n</code></pre> <pre><code>class SampleJavascriptInterface(private val userSessionData: UserSessionData) {\n\n@JavascriptInterface\nfun getUserSessionData(): String? {\nreturn userSessionData\n}\n}\n</code></pre> <p>This data must then be injected into a global variable called <code>UC_UI_USER_SESSION_DATA</code>. However due to the <code>webview_flutter</code> library limitations, it is important that you guarantee in some way or another that the data is available at the time the Usercentrics script is executed in the webview. For example:</p> <p><pre><code>FutureBuilder&lt;String&gt;(\nfuture: Usercentrics.userSessionData,\nbuilder: (context, snapshot) {\nfinal userSessionData = snapshot.data;\nif (userSessionData == null) return const SizedBox();\nreturn WebView(\nonWebViewCreated: (WebViewController controller) async {\nthis.controller = controller;\nawait controller.loadFlutterAsset('assets/webview_index.html'); // loadUrl or whatever\n},\nonPageFinished: (String url) async {\nawait controller?.runJavascript(\"\"\"\n        window.UC_UI_USER_SESSION_DATA = $userSessionData;\n        window.dispatchEvent(new Event('Usercentrics_userSessionData_injected'));\n        \"\"\");\n},\njavascriptMode: JavascriptMode.unrestricted,\ndebuggingEnabled: true,\n);\n}),\n)\n</code></pre> <pre><code>function addUsercentricsScript() {\nvar settingsId = 'Yi9N3aXia';\nvar script = document.createElement('script');\nscript.id = 'usercentrics-cmp';\nscript.setAttribute('data-settings-id', settingsId);\nscript.setAttribute('src', 'https://app.usercentrics.eu/browser-ui/latest/bundle_legacy.js');\nscript.async = true;\ndocument.head.appendChild(script);\n}\n\nwindow.addEventListener(\"Usercentrics_userSessionData_injected\", function() {\naddUsercentricsScript();\n});\n</code></pre></p> <p>See more here.</p> <p>This data must then be injected into a global variable called <code>UC_UI_USER_SESSION_DATA</code> in your WebView <code>injectedJavaScriptBeforeContentLoaded</code> property. </p> <pre><code>&lt;WebView\njavaScriptEnabled={true}\ndomStorageEnabled={true}\ninjectedJavaScriptBeforeContentLoaded={`window.UC_UI_USER_SESSION_DATA = ${userSessionData};`.toString()}\nsource=... /&gt;\n</code></pre> <p>See more here.</p> This feature is intended to be used with a single SettingsID <p>For seamless integration and support, it is imperative that the SDK utilized within your application employs the same SettingsID as the one implemented within the WebView. The utilization of divergent SettingsIDs between the SDK and WebView are not supported by the SDK.</p>"},{"location":"apps/features/webview-continuity/#webview-banner-and-the-native-sdk","title":"WebView Banner and the Native SDK","text":"<p>When displaying a WebView and adhering to the provided instructions, it's important to note that any changes to consent made by the user within the Web banner will not automatically be reflected in the Native SDK. This means that if a user alters their consent settings, these changes won't be communicated back to the native environment of your application.</p> <p>To ensure that your application's functionality remains unaffected by these potential discrepancies, it's crucial to implement a mechanism that re-synchronizes consent statuses whenever the WebView is dismissed. This proactive approach will help maintain consistency across your application's consent management processes.</p> <p>Compatibility</p> <p>User Session injection is only supported if your WebView is running version 1.4.0 or higher of the Usercentrics Browser SDK.</p>"},{"location":"apps/help/att/","title":"AppTrackingTransparency Framework - iOS 14.5","text":"<p>Starting with iOS 14.5, Apple requires you to declare the type of data your app is tracking and ask users for permission to track them. For this, Apple has provided the AppTrackingTransparency framework. (ATT)</p> <p></p>"},{"location":"apps/help/att/#does-att-replace-a-cmp","title":"Does ATT replace a CMP?","text":"<p>No, it does not. A CMP collects consent based on the legal requirements of a framework, such as GDPR or CCPA/CPRA, which are valid in their respective jurisdiction. Where as ATT is designed to provide transparency about the tracking practices of an App. The underlying value of ATT is to empower users, by giving them the control over who can have access to their Advertising Identifier (IDFA, an ID used by advertisers to identify a unique user/device and provide personalized ads), by signaling to the app developer, that tracking practices should/should not be enabled.   </p>"},{"location":"apps/help/att/#how-to-support-att","title":"How to support ATT?","text":"<ol> <li> <p>Add NSUserTrackingUsageDescription to your info.plist, with a description explaining why you want to track your user's data, Import the framework.</p> </li> <li> <p>Create an iOS 14 or later function, and request permission with the AppTrackingTransparency framework.</p> <pre><code>import AppTrackingTransparency\n\n@available(iOS 14, *)\nprivate func requestAppTrackingTransparencyPermission() {\n\n    ATTrackingManager.requestTrackingAuthorization { status in\n        switch status {\n        case .authorized:\n            // Handle Approve case\n        case .denied:\n            // Handle Deny case\n        default:\n            // Consider .restricted and .notDetermined states if needed\n        }\n    }\n\n}\n</code></pre> </li> <li> <p>Depending on your App Flow, you may request ATT permission whenever you deem convenient, but we recommend collecting both legal consent via the Usercentrics CMP and ATT permission in consecutive steps. </p> <pre><code>if #available(iOS 14, *) {\n    self.requestAppTrackingTransparencyPermission()\n}\n</code></pre> </li> </ol> <p>If permission has never been requested, the system will prompt the ATT pop-up, and the result will be return on the callback.  Once permission has been collected, any future call to this function will directly return the permission status without presenting the pop-up. </p>"},{"location":"apps/help/att/#is-it-possible-for-a-user-to-change-their-att-decision","title":"Is it possible for a user to change their ATT decision?","text":"<p>In case you change your tracking practices and want to guide your users to re-evaluate their ATT decision, you can always facilitate the path to your App Settings, by calling the following method:</p> <pre><code>if let appSettings = NSURL(string: UIApplication.openSettingsURLString) {\n    UIApplication.shared.open(appSettings as URL, options: [:], completionHandler: nil)\n}\n</code></pre> <p>This will forward users to your specific App settings, where they can change their settings if they so wish.</p> <p> </p> <p>Do NOT force users to give ATT permission</p> <p>We highly discourage limiting functionality or blocking users, if they do not provide ATT permission.</p>"},{"location":"apps/help/privacy_manifest/","title":"Apple's Privacy Manifest files","text":""},{"location":"apps/help/privacy_manifest/#introduction","title":"Introduction","text":"<p>Apple's new privacy requirements center around documenting the data collected by your app, referred to as the Privacy Manifest. This manifest provides details on the data categories collected by your app and third-party SDKs, along with the purposes behind data collection.</p> <p>Third-party SDKs must include a privacy manifest file named <code>PrivacyInfo.xcprivacy</code>. This property list records the data types collected and the reasons for using corresponding APIs.</p>"},{"location":"apps/help/privacy_manifest/#do-i-need-to-update-the-manifest-when-integrating-with-usercentrics-sdk","title":"Do I need to update the manifest when integrating with Usercentrics SDK?","text":"<p>No, we do not collect any data deemed by Apple as significant for inclusion in the manifest.</p>"},{"location":"apps/help/privacy_manifest/#more-information","title":"More information","text":"<p>Data collection practices are organized into categories like Contact Info, Health &amp; Fitness, Financial Info, Location, Sensitive Info, Contacts, User Content, Browsing History, Identifiers, Purchases, Usage Data, Diagnostics, and Other Data Types, each encompassing specific data types.</p> <p>The reasons for data collection that require reporting fall into the following purposed: Third-Party Advertising, Developer\u2019s Advertising or Marketing, Analytics, Product Personalization, App Functionality and Other Purposes.</p> <p>We recommend to follow Apple guidelines and privacy policies. You can find more information in their public documentation.</p>"},{"location":"apps/help/privacy_manifest/#sources","title":"Sources","text":"<p>Official documentation on Privacy Manifest Files</p> <p>Official documentation on how to describe data being used</p>"},{"location":"apps/integration/apply-consent/","title":"Applying Consent","text":"<p>Now that you have collected consent, let's make sure to respect the user's choices by applying consent to each SDK.</p> <p>IMPORTANT: Please review EVERY vendor's documentation to understand how each SDK expects consent to be passed.</p> <p>DO NOT assume consent is passed automatically to every SDK. Even if you are using the TCF standard or our Consent Mediation feature, please test and verify that consent is reaching the target SDKs.</p> <p>First, we need a way to match the 3<sup>rd</sup> party technologies declared in your configuration, with the SDKs running in your App.</p>"},{"location":"apps/integration/apply-consent/#when-should-you-apply-consent","title":"When should you apply consent?","text":""},{"location":"apps/integration/apply-consent/#after-collecting-consent","title":"After collecting consent","text":"<p>It is a given that consent will only change if the banner is shown to the user and an action is taken.  When using the UsercentricsUI, the callback will return the new values, and you will need to use it to apply consent:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let banner = UsercentricsBanner()\nbanner.showFirstLayer(hostView: self) { userResponse in\n    self.applyConsent(with: userResponse.consents)\n}\n</code></pre> <pre><code>val banner = UsercentricsBanner(&lt;Context&gt;)\nbanner.showFirstLayer() { userResponse -&gt;\napplyConsent(userResponse?.consents)\n}\n</code></pre> <pre><code>final userResponse = await Usercentrics.showFirstLayer();\napplyConsent(userResponse?.consents);\n</code></pre> <pre><code>const userResponse = await Usercentrics.showFirstLayer();\napplyConsent(userResponse.consents);\n</code></pre> <p>In a similar manner, if you are building your own UI, you will need to apply consent after any consent storage action is triggered:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let consents = UsercentricsCore.shared.acceptAll(consentType: .explicit_) // also applies for \"deny\" and \"save\"\nself.applyConsent(with: consents)\n</code></pre> <pre><code>val consents = Usercentrics.instance.acceptAll(consentType = UsercentricsConsentType.EXPLICIT) // also applies for \"deny\" and \"save\"\napplyConsent(consents)\n</code></pre> <pre><code>final consents = Usercentrics.acceptAll(consentType: UsercentricsConsentType.explicit); // also applies for \"deny\" and \"save\"\napplyConsent(consents);\n</code></pre> <pre><code>const consents = Usercentrics.acceptAll(UsercentricsConsentType.explicit); // also applies for \"deny\" and \"save\"\napplyConsent(consents);\n</code></pre>"},{"location":"apps/integration/apply-consent/#after-a-new-app-launch","title":"After a new app launch","text":"<p>The first time you launch the app with the Usercentrics SDK, no consent will have been collected, and the <code>status</code> returned in <code>isReady</code> will let you know if you should collect consent.</p> <p>However, in any future initialization after the first one, you will already have a consent status, and you will only need to apply it.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.isReady { status in\n    if status.shouldCollectConsent {\n        // Collect Consent\n    } else {\n        self.applyConsent(with: status.consents)\n    }\n} onFailure: { error in \n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({ status -&gt;\nif (status.shouldCollectConsent) {\n// Collect Consent\n} else {\napplyConsent(status.consents)\n}\n},{ error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>try {\nfinal status = await Usercentrics.status;\n\nif (status.shouldCollectConsent) {\n//Collect Consent\n} else {\napplyConsent(status.consents);\n}\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\ntry {\nconst status = await Usercentrics.status();\n\nif (status.shouldCollectConsent) {\n//Collect Consent\n} else {\napplyConsent(status.consents);\n}\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <p>Getting consent on demand</p> <p>You may also call <code>UsercentricsCore.shared.getConsents()</code> to get the consent directly, but make sure to do so after the <code>isReady</code> callback has been triggered.</p>"},{"location":"apps/integration/apply-consent/#how-to-apply-consent","title":"How to apply consent?","text":"<p>SDKs that access and process user and/or device data, are only allowed to do so, if the user has given explicit consent. In order to be compliant, please review every SDK in your App for the following cases:</p>"},{"location":"apps/integration/apply-consent/#data-processing-services-dps","title":"Data Processing Services (DPS)","text":""},{"location":"apps/integration/apply-consent/#how-to-match-a-dps-with-an-sdk","title":"How to match a DPS with an SDK?","text":"<p>Every service (DPS) available in our database, such as:</p> <ul> <li>Google Firebase</li> <li>Unity Ads</li> <li>Adjust</li> <li>AppLovin</li> <li>Vungle</li> </ul> <p>will have a unique <code>templateID</code> to identify it. This ID can be found under Service Settings &gt; Data Processing Services &gt; Service Extended Information.</p> <p></p> <p>We will be using this ID to match every declared service with it's SDK.</p>"},{"location":"apps/integration/apply-consent/#sdks-with-a-consent-api","title":"SDKs with a consent API","text":"<p>SDKs that support data privacy compliance, will provide an API to set the user's consent status. The API and it's behaviour will be documented by the SDK's provider.</p> <p>e.g.</p> <ul> <li>Google Analytics for Firebase's Consent Mode</li> <li>Unity Ad's Privacy consent and data API</li> <li>AppLovin's Privacy API</li> </ul> <p>Regulation dedicated APIs</p> <p>Please note that most APIs are dedicated for a specific regulation. e.g. GDPR for Europe, CCPA/CPRA for US/California, COPPA for children protection, etc. Make sure to review the documentation and apply the consent for the correct regulation. </p> <p>To apply consent to these SDKs, identify the target SDK and implement the consent API as documented:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>func applyConsent(with consents: [UsercentricsServiceConsent]) {\n    for service in consents {\n        switch service.templateId {\n        case \"diWdt4yLB\": // Google Analytics for Firebase Template ID\n\n            // Google Firebase Consent Mode API\n            let firebaseConsentStatus = service.status ? .granted : .denied\n            Analytics.setConsent([\n                .analyticsStorage: firebaseConsentStatus\n                .adStorage: firebaseConsentStatus\n            ])\n            initializeFirebase()\n\n        case \"x-XXXxXx\": // Other Service Template ID\n            // Pass consent to framework with service.status\n        default:\n            // Log a warning if a service was not caught or do nothing\n        }\n    }\n}\n</code></pre> <pre><code>fun applyConsent(consents: List&lt;UsercentricsServiceConsent&gt;?) {\nconsents?.forEach { service -&gt;\nwhen (service.templateId) {\n\"diWdt4yLB\" -&gt; { // Google Analytics for Firebase Template ID\n\n// Google Firebase Consent Mode API\nval firebaseConsentStatus = if (service.status) ConsentStatus.GRANTED else ConsentStatus.DENIED\nFirebase.analytics.setConsent {\nanalyticsStorage(firebaseConsentStatus)\nadStorage(firebaseConsentStatus)\n}\ninitializeFirebase()    }\n// Other Service Template ID\n\"x-XXXxXx\" -&gt; {\n// Initialize or pass consent to framework with service.status\n}\nelse -&gt; {\n// Log a warning if a service was not caught or do nothing\n}\n}\n}\n}\n</code></pre> <pre><code>void applyConsent(List&lt;UsercentricsServiceConsent&gt;? consents) {\nconsents?.forEach((service) {\nswitch (service.templateId) {\ncase \"diWdt4yLB\": // Google Analytics for Firebase Template ID\n\n// Google Firebase Consent Mode API\napplyConsentToFirebase(service.status) // See iOS and Android examples\ninitializeFirebase()    break;\ncase \"x-XXXxXx\": // Other Service Template ID\n// Initialize or pass consent to framework with service.status\nbreak;\ndefault:\n// Log a warning if a service was not caught or do nothing\n}\n});\n}\n</code></pre> <pre><code>import { UsercentricsServiceConsent } from '@usercentrics/react-native-sdk';\n\nconst applyConsents = (consents: [UsercentricsServiceConsent]) =&gt; {\nconsents.forEach(service =&gt; {\nswitch (service.templateId) {\ncase \"diWdt4yLB\": // Google Analytics for Firebase Template ID\n\n// Google Firebase Consent Mode API\napplyConsentToFirebase(service.status) // See iOS and Android examples\ninitializeFirebase()\nbreak;\n\n// Other Service Template ID\ncase \"x-XXXxXx\":\n// Initialize or pass consent to framework with service.status\nbreak;\n\ndefault:\n// Log a warning if a service was not caught or do nothing\n}\n});\n}\n</code></pre> <p>Not all APIs are created equal</p> <p>Please make sure you read through each documentation, as many providers might require other steps to fully be complaint.</p>"},{"location":"apps/integration/apply-consent/#sdks-without-a-consent-api","title":"SDKs without a consent API","text":"<p>For SDKs that track user/device data and do not offer a consent API, the only solution is to not initialize those SDKs, when a user did not provide consent.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>func applyConsent(with consents: [UsercentricsServiceConsent]) {\n    for service in consents {\n        switch service.templateId {\n        case \"x-XXXxXx\": // Template ID\n\n            // Only initialize an SDK if consent has been given\n            if service.status { initializeSDK() }\n\n        case \"x-xXX-Xx\": // Other Service Template ID\n            //Initialize framework based on service.status\n        default:\n            // Log a warning if a service was not caught or do nothing\n        }\n    }\n}\n</code></pre> <pre><code>fun applyConsent(consents: List&lt;UsercentricsServiceConsent&gt;?) {\nconsents?.forEach { service -&gt;\nwhen (service.templateId) {\n\"x-XXXxXx\" -&gt; { // Template ID\n// Only initialize an SDK if consent has been given\nif (service.status) {\ninitializeSDK()\n}\n}\n\"x-xXX-Xx\" -&gt; { // Other Template ID\n//Initialize framework based on service.status\n}\nelse -&gt; {\n// Log a warning if a service was not caught or do nothing\n}\n}\n}\n}\n</code></pre> <pre><code>void applyConsent(List&lt;UsercentricsServiceConsent&gt;? consents) {\nconsents?.forEach((service) {\nswitch (service.templateId) {\ncase \"x-XXXxXx\": // Template ID\n// Only initialize an SDK if consent has been given\nif (service.status) {\ninitializeFirebase();\n}\nbreak;\n\ncase \"x-xXX-Xx\": // Other Template ID\n// Initialize framework based on service.status\nbreak;\n\ndefault:\n// Log a warning if a service was not caught or do nothing\n}\n});\n}\n</code></pre> <pre><code>import { UsercentricsServiceConsent } from '@usercentrics/react-native-sdk';\n\nconst applyConsents = (consents: [UsercentricsServiceConsent]) =&gt; {\nconsents.forEach(service =&gt; {\nswitch (service.templateId) {\ncase \"x-XXXxXx\": // Template ID\n// Only initialize an SDK if consent has been given\nif (service.status) {\n// initializeSDK();\n}\nbreak;\n\n// Other Service Template ID\ncase \"x-xXX-Xx\":\n// Initialize framework based on service.status\nbreak;\n\ndefault:\n// Log a warning if a service was not caught or do nothing\n}\n});\n}\n</code></pre>"},{"location":"apps/integration/apply-consent/#vendors-following-the-tcf-22-standard","title":"Vendors following the TCF 2.2 standard","text":"<p>When using third party services that are certified as TCF Vendors, you will need to declare these services via the Global Vendor List (GVL) tab, in the Service Settings section of your TCF configuration.</p> <p></p> <p>Given you have selected your TCF Vendors in the GVL and published the changes, when a user provides consent, the SDK will generate an encoded string with the consent for these vendors according to the TCF 2.2 standard, called:</p>"},{"location":"apps/integration/apply-consent/#tc-string","title":"TC String","text":"<p>As specified by the IAB, the collected consent for IAB Vendors will be encoded into a TCString and stored locally in <code>NSUserDefaults</code>(iOS) or <code>SharedPreferences</code>(Android).</p> <p>In most cases, the Vendor SDK might automatically pull the TCString, and apply consent to itself automatically. In case the vendor SDK requires you to pass the TCString programmatically, you may use:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.getTCFData() { tcfData in\n    let tcString = tcfData.tcString\n}\n</code></pre> <pre><code>Usercentrics.instance.getTCFData { tcfData -&gt;\nval tcString = tcfData.tcString\n}\n</code></pre> <pre><code>Usercentrics.getTCString();\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\nconst tcString = await Usercentrics.getTCFString();\n</code></pre> <p>Alternatively, you can also find it directly in memory with their specific Key.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>let defaults = UserDefaults.standard\nlet tcString = defaults.string(forKey: \"IABTCF_TCString\")\n</code></pre> <pre><code>val preferences = PreferenceManager.getDefaultSharedPreferences(this)\nval tcString = preferences.getString(\"IABTCF_TCString\")\n</code></pre>"},{"location":"apps/integration/collect-consent/","title":"Collecting Consent with Usercentrics UI","text":"<p>Usercentrics UI is a native UI component designed to own all the complexity of compliance, while also allowing different levels of customization.</p> <p>This component consists of 2 Layers:</p> <p> </p>"},{"location":"apps/integration/collect-consent/#first-layer","title":"First Layer","text":"<p>The First Layer is designed to be friendly to end-users, compact and highly customizable. This layer can be presented in 3 different ways:</p> PopupSheetFull <p></p> <p></p> <p></p> <p>Recommendation</p> <p>Use the First Layer when collecting consent for the first time or when prompting updates to the consent services. Remember that user's will be able to navigate from the First Layer to the Second Layer.</p> <p>To present the First Layer, simply create an instance of <code>UsercentricsBanner</code>, and call <code>showFirstLayer()</code>. Once the user provides their consent choices, a userResponse object will be returned.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let banner = UsercentricsBanner()\nbanner.showFirstLayer() { userResponse in\n    // Handle userResponse\n}\n</code></pre> Passing a specific HostView <p>You may also pass a specific HostView as a parameter of <code>showSecondLayer(hostView: &lt;UIViewController&gt;)</code>. If not provided, the SDK will resolve the HostView from the presented view controller of the first window.</p> Support for Swift UI <p>Support for Swift UI is available starting v2.7.6.  On our iOS Sample App you can find an example of how to integrate with SwiftUI. <pre><code>let banner = UsercentricsBanner()\nbanner.showFirstLayer(layout: &lt;UsercentricsLayout&gt;) { userResponse in\n    // Handle userResponse\n}\n</code></pre></p> <pre><code>val banner = UsercentricsBanner(&lt;Context&gt;)\nbanner.showFirstLayer() { userResponse -&gt;\n// Handle userResponse\n}\n</code></pre> <p>Use a valid Context</p> <p>We are using the <code>Dialog</code> Android API for the Banner implementation.  It is recommended to use a <code>Context</code> that is an <code>Activity</code> or derived/wrapper from it. Note that the <code>Activity</code> has to be alive for the dialog to be displayed.</p> <pre><code>final userResponse = await Usercentrics.showFirstLayer();\n// Handle userResponse\n</code></pre> <pre><code>const userResponse = await Usercentrics.showFirstLayer();\n// Handle userResponse\n</code></pre>"},{"location":"apps/integration/collect-consent/#second-layer","title":"Second Layer","text":"<p>The Second Layer is designed to own all the complexity of compliance, declare all legally required information and allow for granular choices.</p> <p></p> <p>Recommendation</p> <p>Use the Second Layer to allow users to review their choices from your apps settings.</p> <p>To present the Second Layer, similarly create an instance of <code>UsercentricsBanner</code>, and call <code>showSecondLayer()</code>. The same userResponse object will be returned here as well.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let banner = UsercentricsBanner()\nbanner.showSecondLayer() { userResponse in\n    // Handle userResponse\n}\n</code></pre> Passing a specific HostView <p>You may also pass a specific HostView as a parameter of <code>showSecondLayer(hostView: &lt;UIViewController&gt;)</code>. If not provided, the SDK will resolve the HostView from the presented view controller of the first window.</p> Support for Swift UI <p>Support for Swift UI is available starting v2.7.6.  On our iOS Sample App you can find an example of how to integrate with SwiftUI. <pre><code>let banner = UsercentricsBanner()\nbanner.showSecondLayer() { userResponse in\n    // Handle userResponse\n}\n</code></pre></p> <pre><code>val banner = UsercentricsBanner(&lt;Context&gt;)\nbanner.showSecondLayer() { userResponse -&gt;\n// Handle userResponse\n}\n</code></pre> <p>Use a valid Context</p> <p>We are using the <code>Dialog</code> Android API for the Banner implementation.  It is recommended to use a <code>Context</code> that is an <code>Activity</code> or derived/wrapper from it. Note that the <code>Activity</code> has to be alive for the dialog to be displayed.</p> <pre><code>final userResponse = await Usercentrics.showSecondLayer();\n// Handle userResponse\n</code></pre> <pre><code>const userResponse = await Usercentrics.showSecondLayer();\n// Handle userResponse\n</code></pre>"},{"location":"apps/integration/collect-consent/#handling-userresponse","title":"Handling UserResponse","text":"<p>The <code>userResponse</code> object provided in the callback of <code>UsercentricsBanner.showLayer()</code>, contains the following information:</p> Properties Type Notes consents [UsercentricsServiceConsent] List of the user's consent choices needed to apply consent. userInteraction Enum <ul><li>AcceptAll: User accepted all services. <li>DenyAll: User denied all service. <li>Granular: User gave a granular choice, <li>No Interaction: User dismissed the Banner with no response.  controllerId String A Usercentrics generated ID, used to identify a specific user. This value is required when using Cross-Device Consent Sharing. <p>You have successfully collected consent! \ud83d\ude80</p> <p>Now, it is fundamental that the user's privacy choices are applied to the 3<sup>rd</sup> party SDKs on you App. Please continue to Apply Consent.</p>"},{"location":"apps/integration/configure/","title":"Configuring Usercentrics","text":"<p>Once you have installed the Usercentrics SDK, you will need an account to configure your consent banner.</p> <p>Depending on your setup, you may choose one of the following options:</p> <ul> <li>Initialize Usercentrics with a RulesetID, if you are using GeoLocation Rules, and wish to target users based on their location.</li> <li>Initialize Usercentrics with a SettingsID, if you want to have one specific configuration, regardless of user location.</li> </ul> <p>Both values should not be used at the same time</p> Where to find a RulesetID or SettingsID? RulesetIDSettingsID <p></p> <p></p>"},{"location":"apps/integration/configure/#device-options","title":"Device Options","text":"<p>In addition to the <code>SettingsID</code>, you may also configure the following options to control different behaviours at a device-level:</p> Property Type Notes rulesetId String A Usercentrics generated ID, used to identify a bundle of CMP configurations to be used depending on the user's location. settingsID String A Usercentrics generated ID, used to identify a unique CMP configuration. defaultLanguage String Selected based on our language selection hierarchy. This property defines the language used to render the banner.  e.g. \"en\", \"de\", \"fr\". version String To freeze the configuration version shown to your users, you may pass a specific version here. You may find an overview of all versions in your Configuration Dashboard under Configuration &gt; History &gt; Settings History &gt; Version (Column) or Implementation &gt; Script Tag &gt; Version History. e.g. \"3.0.4\". Passing \"latest\" (default) will fetch the latest version of your CMP configuration. Passing \"preview\" will fetch the latest draft of your CMP configuration. timeoutMillis Int Timeout for network requests in milliseconds. We do NOT recommend overwriting this field unless absolutely necessary or for debugging reasons, as well as using any values under 5,000 ms. Default is 10,000 ms (10s). loggerLevel Enum Provides a set of logs for operations being executed in the SDK.  <ul><li>debug: includes every other level <li>warning: non-problematic operations <li>error: relevant logs to any blocking problems <li>none (default)  consentMediation Bool Enable Consent Mediation, an automated way to pass consent to 3<sup>rd</sup> party frameworks."},{"location":"apps/integration/configure/#language-selection-hierarchy","title":"Language Selection Hierarchy","text":"<p>The SDK uses the following hierarchy, when deciding which language to load on init:</p> <p></p> <p>On first init, Default Language<sup>1</sup> <sup>2</sup> will have first priority, then Device language<sup>1</sup> <sup>2</sup> and finally a hard default to the first language available in your configuration. Once a language has been selected, it will be stored. Any following SDK initializations will use the Stored Language <sup>3</sup>.</p>"},{"location":"apps/integration/configure/#tcf-special-cases","title":"TCF Special Cases","text":"<p>When implementing the TCF Framework, it's important to note that Usercentrics does not manage all the translations. This responsibility falls to the IAB, the institution that owns the Framework.</p> <p>If a language is chosen in the Admin Interface that is not supported by the IAB, it will not appear in the language selector popup.</p> <p>To ensure a seamless integration, verify your desired language against the IAB's official list of supported languages at IABs official list before launching the Banner in production. This proactive step is crucial for maintaining compliance and ensuring a smooth user experience.</p> <p>Dialects are supported and automatically used</p> <p>If the language you pick in the Admin Interface has different dialects and the IAB doesn't support them, we'll automatically select the main dialect. This way, users won't miss out on seeing their language choice.</p> <ol> <li> <p>To be supported, a language needs to be added and set as visible in the Configuration Dashboard, under Configuration &gt; Setup &gt; Language Settings.\u00a0\u21a9\u21a9</p> </li> <li> <p>This value will only be checked during the first SDK initialized. Afterwards, the stored languages will be used.\u00a0\u21a9\u21a9</p> </li> <li> <p>If a user explicitly selects a new language in the Usercentrics UI, or the language is changed programmatically after init, the stored languages will be updated and take priority in the future.\u00a0\u21a9</p> </li> </ol>"},{"location":"apps/integration/initialize/","title":"Initializing Usercentrics","text":"<p>Before we get started with the integration, let's review some basics on when to initialize Usercentrics and legal requirements.</p>"},{"location":"apps/integration/initialize/#when-to-present-the-banner","title":"When to present the banner?","text":"<p>In general, you are free to decide when to present the banner to your users. e.g. Right after app launch, after login, during app onboarding, etc.</p> <p>There are only 2 requirements when deciding when to do this:</p> <p>Requirement 1</p> <p>Do NOT enable any data tracking from 3<sup>rd</sup> party services/SDKs before a user has given explicit consent. This would otherwise be a breach of data protection regulations, which can result in heavy fines.</p> <p>Requirement 2</p> <p>Don't forget Requirement 1.</p>"},{"location":"apps/integration/initialize/#initialize-usercentrics","title":"Initialize Usercentrics","text":"SettingsIDRulesetID <ol> <li> <p>Import <code>Usercentrics</code>, configure your options and call the init method of the SDK:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>// On AppDelegate\nimport Usercentrics\n\nlet options = UsercentricsOptions(settingsId: &lt;SettingsID&gt;)\nUsercentricsCore.configure(options: options)\n</code></pre> <pre><code>// On Application\nimport com.usercentrics.sdk.*\n\nval options = UsercentricsOptions(settingsId = &lt;SettingsID&gt;)\nUsercentrics.initialize(this, options)\n</code></pre> <pre><code>// e.g place this inside the [initState] of the Entry Point Widget\nimport 'package:usercentrics_sdk/usercentrics_sdk.dart';\n\nUsercentrics.initialize(\nsettingsId: &lt;SettingsID&gt;,\n);\n</code></pre> <pre><code>// On your App entrypoint\nimport { Usercentrics, UsercentricsOptions } from '@usercentrics/react-native-sdk';\n\n// React hooks\nuseEffect(() =&gt; {\nlet options = new UsercentricsOptions(&lt;SettingsID&gt;);\nUsercentrics.configure(options);\n}, []);\n\n// Or via constructor\nconstructor(props: any) {\nsuper(props)\n\nlet options = new UsercentricsOptions(&lt;SettingsID&gt;)\nUsercentrics.configure(options)\n}\n</code></pre> <p>First Init</p> <p>We recommend initializing the SDK in the background as soon as possible after app launch to avoid any loading delays. After the first init, the SDK will cache essential data and following initializations will be immediate.</p> </li> <li> <p>Use <code>isReady</code> to fetch the latest consent status. This status will let you know if you need to show the banner to collect consent or only apply the already collected consent.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>import Usercentrics\n\nUsercentricsCore.isReady { [weak self] status in\n    guard let self = self else { return }\n    if status.shouldCollectConsent {\n        // Show banner to collect consent\n    } else {\n        // Apply consent with status.consents\n    }\n} onFailure: { error in \n    // Handle non-localized error\n}\n</code></pre> <pre><code>import com.usercentrics.sdk.*\n\nUsercentrics.isReady({ status -&gt;\nif (status.shouldCollectConsent) {\n// Show banner to collect consent\n} else {\n// Apply consent with status.consents\n}\n}, { error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>import 'package:usercentrics_sdk/usercentrics_sdk.dart';\n\ntry {\nfinal status = await Usercentrics.status;\nif (status.shouldCollectConsent) {\n// Show banner to collect consent\n} else {\n// Apply consent with status.consents\n}\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\ntry {\nconst status = await Usercentrics.status();\nif (status.shouldCollectConsent) {\n// Show banner to collect consent\n} else {\n// Apply consent with status.consents\n}\n} catch(error) {\n// Handle error\n}\n</code></pre> <p>Wait for isReady</p> <p>It is required that you wait until isReady is called to use any SDK methods. Not doing so could lead to a crash, as methods called when the SDK has not finished initializing will return an exception.</p> </li> <li> <p>Once you are ready to collect consent, use the status object returned in <code>isReady</code> to know if you <code>shouldCollectConsent</code> or if consent has already been collected.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.isReady { [weak self] status in\n    guard let self = self else { return }\n    if status.shouldCollectConsent {\n        self.collectConsent()\n    } else {\n        // Apply consent with status.consents\n    }\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({ status -&gt;\nif (status.shouldCollectConsent) {\ncollectConsent()\n} else {\n// Apply consent with status.consents\n}\n},{ error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>try {\nfinal status = await Usercentrics.status;\nif (status.shouldCollectConsent) {\ncollectConsent();\n} else {\n// Apply consent with status.consents\n}\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>try {\nconst status = await Usercentrics.status();\n\nif (status.shouldCollectConsent) {\ncollectConsent();\n} else { // Apply consents with status.consents\n} } catch(e) { // Handle non-localized error \n}\n</code></pre> </li> </ol> <p>Inside <code>collectConsent()</code>, you will be presenting the consent banner.</p> <ol> <li> <p>Import <code>Usercentrics</code>, configure your options and call the init method of the SDK:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>// On AppDelegate\nimport Usercentrics\n\nlet options = UsercentricsOptions()\noptions.ruleSetId = \"&lt;RulesetID&gt;\"\n\nUsercentricsCore.configure(options: options)\n</code></pre> <pre><code>// On Application\nimport com.usercentrics.sdk.*\n\nval options = UsercentricsOptions(ruleSetId = \"&lt;RulesetID&gt;\")\nUsercentrics.initialize(this, options)\n</code></pre> <pre><code>// e.g place this inside the [initState] of the Entry Point Widget\nimport 'package:usercentrics_sdk/usercentrics_sdk.dart';\n\nUsercentrics.initialize(\nruleSetId: \"&lt;RulesetID&gt;\"\n);\n</code></pre> <pre><code>// On your App entrypoint\nimport { Usercentrics, UsercentricsOptions } from '@usercentrics/react-native-sdk';\n\n// React hooks\nuseEffect(() =&gt; {\nlet options: UsercentricsOptions = { ruleSetId: \"&lt;RulesetID&gt;\" };\nUsercentrics.configure(options);\n}, []);\n\n// Or via constructor\nconstructor(props: any) {\nsuper(props)\n\nlet options: UsercentricsOptions = { ruleSetId: \"&lt;RulesetID&gt;\" };\nUsercentrics.configure(options)\n}\n</code></pre> <p>First Init</p> <p>We recommend initializing the SDK in the background as soon as possible after app launch to avoid any loading delays. After the first init, the SDK will cache essential data and following initializations will be immediate.</p> </li> <li> <p>Use <code>isReady</code> to get the geolocationRuleset. This object will let you know if the banner is required according to the configurations and the user's location.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>import Usercentrics\n\nUsercentricsCore.isReady { [weak self] status in\n    guard let self = self else { return }\n\n    if status.geolocationRuleset != null &amp;&amp; status.geolocationRuleset.bannerRequiredAtLocation == false {\n        // banner is not required at this location\n        return\n    }\n\n    if status.shouldCollectConsent {\n        // Show banner to collect consent\n    } else {\n        // Apply consent with status.consents\n    }\n} onFailure: { error in \n    // Handle non-localized error\n}\n</code></pre> <pre><code>import com.usercentrics.sdk.*\n\nUsercentrics.isReady({ status -&gt;\n\nif (status.geolocationRuleset != null &amp;&amp; status.geolocationRuleset?.bannerRequiredAtLocation == false) {\n// banner is not required at this location\nreturn@isReady\n}\n\nif (status.shouldCollectConsent) {\n// Show banner to collect consent\n} else {\n// Apply consent with status.consents\n}\n}, { error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>import 'package:usercentrics_sdk/usercentrics_sdk.dart';\n\ntry {\nfinal status = await Usercentrics.status;\n\nif (status.geolocationRuleset != null &amp;&amp; status.geolocationRuleset?.bannerRequiredAtLocation == false) {\n// banner is not required at this location\nreturn;\n}\n\nif (status.shouldCollectConsent) {\n// Show banner to collect consent\n} else {\n// Apply consent with status.consents\n}\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\ntry {\nconst status = await Usercentrics.status();\n\nif (status.geolocationRuleset != null &amp;&amp; status.geolocationRuleset?.bannerRequiredAtLocation == false) {\n// banner is not required at this location\nreturn\n}\n\nif (status.shouldCollectConsent) {\n// Show banner to collect consent\n} else {\n// Apply consent with status.consents\n}\n} catch(error) {\n// Handle error\n}\n</code></pre> <p>Wait for isReady</p> <p>It is required that you wait until isReady is called to use any SDK methods. Not doing so could lead to a crash, as methods called when the SDK has not finished initializing will return an exception.</p> </li> <li> <p>Once you are ready to collect consent, use the status object returned in <code>isReady</code> to know if you <code>shouldCollectConsent</code> or if consent has already been collected.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.isReady { [weak self] status in\n    guard let self = self else { return }\n    if status.shouldCollectConsent {\n        self.collectConsent()\n    } else {\n        // Apply consent with status.consents\n    }\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({ status -&gt;\nif (status.shouldCollectConsent) {\ncollectConsent()\n} else {\n// Apply consent with status.consents\n}\n},{ error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>try {\nfinal status = await Usercentrics.status;\nif (status.shouldCollectConsent) {\ncollectConsent();\n} else {\n// Apply consent with status.consents\n}\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>try {\nconst status = await Usercentrics.status();\n\nif (status.shouldCollectConsent) {\ncollectConsent();\n} else { // Apply consents with status.consents\n} } catch(e) { // Handle non-localized error \n}\n</code></pre> </li> </ol> <p>Inside <code>collectConsent()</code>, you will be presenting the consent banner.</p> Resetting the SDK <p>Use reset() to clean all local storage and release the initialized instance. You will need to initialize the SDK again after a reset. Make sure you validate the expected behaviour, before using reset in production.</p> Switching SettingsIDs <p>If you need to switch SettingsIDs during runtime, just reinitialize the SDK with the new SettingsID. This will automatically trigger a reset(), and initialize the new configuration.</p>"},{"location":"apps/integration/initialize/#presenting-the-consent-banner","title":"Presenting the Consent Banner","text":"<p>In order to present the banner, we offer different options depending on your needs:</p>"},{"location":"apps/integration/initialize/#usercentricsui","title":"UsercentricsUI","text":"<p>An out-of-the-box UI component, that owns all the complexity of compliance, designed to be highly customizable. Continue to Collecting Consent with UsercentricsUI.</p> <p></p>"},{"location":"apps/integration/initialize/#build-you-own-ui","title":"Build you own UI","text":"<p>Use our SDK as a data source and render your own consent banner from scratch. Continue to Build your own UI.</p> <p></p>"},{"location":"apps/integration/initialize/#hybrid","title":"Hybrid","text":"<p>If you need a \"in between\" solution, we encourage you to mix these two approaches to get the best of both worlds.</p> <p></p> e.g. Create your own first layer banner, and let UsercentricsUI take care of the complexity on a second layer."},{"location":"apps/integration/install/","title":"Installing the Usercentrics SDK","text":"iOSAndroidFlutterReact Native"},{"location":"apps/integration/install/#ios","title":"iOS","text":"<p>Prerequisites</p> <ul> <li>iOS 11 or higher</li> </ul>"},{"location":"apps/integration/install/#cocoapods","title":"CocoaPods","text":"<ol> <li>In case you haven't, please install CocoaPods and follow these instructions to setup you project.</li> <li> <p>On your Podfile, add the following line:</p> UsercentricsCore + Usercentrics UIUsercentricsCore <pre><code>platform :ios, '11.0'\nuse_frameworks!  \n\npod 'UsercentricsUI'\n</code></pre> <pre><code>platform :ios, '11.0'\nuse_frameworks!  \n\npod 'Usercentrics'\n</code></pre> </li> <li> <p>On the root directory of your project, run the following command to install the pod. <pre><code>pod install\n</code></pre></p> </li> <li> <p>Open your .xcworkspace file.</p> </li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/integration/install/#swift-package-manager-spm","title":"Swift Package Manager (SPM)","text":"<p>From Xcode 11 and above, you can use Swift Package Manager to install our SDK.</p> <ol> <li> <p>On Xcode, Select File &gt; Swift Packages &gt; Add Package Dependency.</p> </li> <li> <p>Enter the package repository URLs:</p> Usercentrics UIUsercentricsCore <pre><code>https://bitbucket.org/usercentricscode/usercentrics-spm-ui\n</code></pre> <pre><code>https://bitbucket.org/usercentricscode/usercentrics-spm-sdk\n</code></pre> </li> <li> <p>Select the version you would like to use. We recommend sticking to \"Up to Next Major\" with the latest release as minor version.</p> </li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/integration/install/#manual","title":"Manual","text":"<ol> <li>Download and unzip the latest version of our SDKs: UsercentricsCore and UsercentricsUI. </li> <li>Drag and drop .xcframework file to your Xcode project.</li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/integration/install/#android","title":"Android","text":"<p>Prerequisites</p> <ul> <li>Android 4.1 (API 16) and higher</li> </ul> <p>Android minimum SDK Version</p> <p>Support for versions lower than Android 5.0 (API Level 20) is planned to be removed in releases starting from end of March/24</p>"},{"location":"apps/integration/install/#gradle","title":"Gradle","text":"<ol> <li> <p>If not present, add Maven Central repository URL to your top-level build.gradle file: <pre><code>allprojects {\nrepositories {\nmavenCentral()\n}\n}\n</code></pre></p> </li> <li> <p>Add the dependency to your app's build.gradle:</p> UsercentricsCore + Usercentrics UIUsercentricsCore <pre><code>dependencies {\nimplementation \"com.usercentrics.sdk:usercentrics-ui\"\n}\n</code></pre> <pre><code>dependencies {\nimplementation \"com.usercentrics.sdk:usercentrics\"\n}\n</code></pre> </li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/integration/install/#manual_1","title":"Manual","text":"<ol> <li>Download and the latest version of our SDKs: Usercentrics Core and Usercentrics UI.</li> <li>Note that we are using other libraries that may be required to be download, the POM file is available in both links above.</li> <li>In case the dependencies are being handled manually, move all .aar and .jar files to your project, if not, upload them to your Nexus solution.</li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/integration/install/#flutter","title":"Flutter","text":"<p>Prerequisites</p> <ul> <li>Android 4.1 (API 16) or higher with Kotlin 1.7 or higher</li> <li>iOS 11 or higher</li> <li>Dart 2.12 or higher</li> <li>Flutter 1.20 or higher</li> </ul> <p>Android minimum SDK Version</p> <p>Support for versions lower than Android 5.0 (API Level 20) is planned to be removed in releases starting from end of March/24</p> <p>To meet the prerequisites:</p> Android with Kotlin version lower than 1.7 <p>If you have an incompatible Kotlin version you may see the following error when you run app on Android: <pre><code>e: Incompatible classes were found in dependencies. Remove them from the classpath or use '-Xskip-metadata-version-check' to suppress errors\n</code></pre></p> <p>This error is easy to solve, you only need to increase the version that is usually in the <code>android/build.gradle</code> file. Use a recent stable Kotlin version, for example: <code>1.5.31</code>. </p> Android version lower than 5.0 (API 21) <p>If you support an Android version lower than 5.0 (API 21) and you don't have the multidex enabled in your project, you may see the following error when you run your app on Android: <pre><code>D8: Cannot fit requested classes in a single dex file (# methods: 66055 &gt; 65536)\n</code></pre></p> <p>You can change the minimum version of your application to 5.0 (API 21). That configuration is usually in the <code>android/app/build.gradle</code> file. Make sure that <code>minSdkVersion</code> is <code>21</code> or higher.</p> <p></p> <p>Although Android 5.0 version already supports 99% of all devices, if you still want to have support for Android 4.1 (API 16) you have to do the following:</p> <ol> <li> <p>Add the multidex library to your application dependencies that is usually in the <code>android/app/build.gradle</code> file.     <pre><code>implementation \"androidx.multidex:multidex:2.0.1\"\n</code></pre> </p> </li> <li> <p>Enable the option in the application build <code>defaultConfig</code>. It is usually in the same <code>android/app/build.gradle</code> file.     <pre><code>multiDexEnabled true\n</code></pre> </p> </li> <li> <p>Make your application class initialize multidex. There are several options to do that, in Flutter the easiest way is to add it to the manifest. The manifest is usually located at <code>android/app/src/main/AndroidManifest.xml</code>.     <pre><code>android:name=\"androidx.multidex.MultiDexApplication\"\n</code></pre> </p> </li> </ol> <p>Android minimum SDK Version</p> <p>Support for versions lower than Android 5.0 (API Level 20) is planned to be removed in releases starting from end of March/24</p> iOS version lower than 11 <p>If you have a iOS target version lower than 11 or you have no version at all (it defaults to version 9) you may see the following error when you run your app on iOS: <pre><code>[!] Automatically assigning platform `iOS` with version `9.0` on target `Runner` because no platform was specified. Please specify a platform for this target in your Podfile. See `https://guides.cocoapods.org/syntax/podfile.html#platform`.\n</code></pre></p> <p>This error is easy to solve, you have to do the following:</p> <ol> <li> <p>Define or increase the version of your Podfile at least to version 11. It is usually located at <code>ios/Podfile</code>. <pre><code>platform :ios, '11.0'\n</code></pre> </p> </li> <li> <p>Run <code>flutter pub get</code> again and open the iOS project using Xcode. It is usually located at <code>ios/Runner.xcworkspace</code>. Now, you have to select the <code>Runner</code> project and change the <code>Deployment Target</code> to the same version. </p> </li> </ol>"},{"location":"apps/integration/install/#pubdev","title":"Pub.dev","text":"<ol> <li> <p>Add Usercentrics to your project via pub.dev:</p> <pre><code>flutter pub add usercentrics_sdk\n</code></pre> </li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/integration/install/#react-native","title":"React Native","text":"<p>Prerequisites</p> <ul> <li>Android 5.0 (API 21) or higher with Kotlin 1.7 or higher</li> <li>iOS 11 or higher</li> <li>React Native 0.65 or higher</li> <li>React 17.0 or higher</li> </ul>"},{"location":"apps/integration/install/#npm","title":"npm","text":"<ol> <li> <p>Add Usercentrics to your project using npm:</p> <pre><code>npm i @usercentrics/react-native-sdk\n</code></pre> </li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/optimization/ab-testing/","title":"A/B Testing","text":"<p>BETA</p> <p>This feature is currently in beta, and only available starting v2.7.4. Please make sure you validate the functionality before pushing to production.</p> <p>In order to optimize the performance of your Consent Banner, we have enabled A/B Testing capabilities, to make your life easier.</p>"},{"location":"apps/optimization/ab-testing/#enabling-ab-testing","title":"Enabling A/B Testing","text":"<p>Go to the Implementation section in your Configuration Dashboard and select the A/B Testing tab. Here you will find a toggle to enable the feature.</p> <p></p> <p>Once enabled, you will see the the A/B Testing configuration options.</p>"},{"location":"apps/optimization/ab-testing/#using-usercentrics","title":"Using Usercentrics","text":"<p>Activate with Usercentrics</p> <p>To use the Usercentrics tools for A/B Testing, please select the checkbox at the bottom of the A/B Testing configuration options: \"Activate with Usercentrics\".</p>"},{"location":"apps/optimization/ab-testing/#defining-variants","title":"Defining Variants","text":"<p>Using the JSON input field, define the variants names with an empty values. </p> <pre><code>{\n\"variantA\": {},\n\"variantB\": {}\n}\n</code></pre> <p>Now, in your project, fetch the variant names programmatically, and return a Banner Configuration for each one using the BannerSettings object:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>switch UsercentricsCore.shared.getABTestingVariant() {\ncase \"variantA\": return BannerSettings(/* variantA configuration */)\ncase \"variantB\": return BannerSettings(/* variantB configuration */)\ndefault: return BannerSettings(/* default configuration */)\n}\n</code></pre> <pre><code>val bannerSettings = when (Usercentrics.instance.getABTestingVariant()) {\n\"variantA\" -&gt; BannerSettings(/* variantA configuration */)\n\"variantB\" -&gt; BannerSettings(/* variantB configuration */)\nelse -&gt; BannerSettings(/* default configuration */)\n}\n</code></pre> <pre><code>final variant = await Usercentrics.aBTestingVariant;\nswitch(variant) {\ncase \"variantA\": {_showFirstLayer(/* variantA Settings */);}\nbreak;\ncase \"variantB\": {_showFirstLayer(/* variantB Settings */);}\nbreak;\ndefault: {_showFirstLayer(/*Default*/);}\nbreak;\n}\n</code></pre> <pre><code> const variant = await Usercentrics.getABTestingVariant()\nlet bannerSettings: BannerSettings;\nswitch (variant){\ncase \"variantA\":\nreturn bannerSettings = {/* settings for the banner with variantA */};\ncase \"variantB\":\nreturn bannerSettings = {/* settings for the banner with variantB */};\ndefault:\nreturn bannerSettings = {/* default banner settings*/};\n</code></pre> <p>Always fallback to a Default</p> <p>Always have a fallback default configuration. This will allow you to turn off, or change the variants you are testing dynamically.</p> <p>Even distribution</p> <p>The distribution between variants will be even. e.g. 50:50 for two variants, 33:33:33 for three variants.</p>"},{"location":"apps/optimization/ab-testing/#tracking-results","title":"Tracking Results","text":"<p>Once you have generated variant interactions, all results will be available in the Analytics section of your Usercentrics Dashboard.</p> <p>Interaction Analytics</p> <p>Overview your Interaction and Acceptance rates by filtering for specific Variants.</p> <p></p> <p>Comparison Analytics</p> <p>Get a direct comparison of interactions and acceptance rates for each variant.</p> <p></p> <p>Download Raw Data</p> <p>For in-depth insights and custom analysis, we recommend downloading a raw-data report available at the bottom of the Interaction Analytics section. In this report, an additional \"variant\" column will tell you which variant was used for each entry in the data.</p> <p></p> <p>Keep A/B Testing feature ON</p> <p>To see variant analytics data, the A/B Testing feature needs to be ON. If you wish to stop running specific variants. Just delete the variants in the JSON input field.</p>"},{"location":"apps/optimization/ab-testing/#using-a-third-party-tool","title":"Using a Third Party Tool","text":"<p>Activate with third-party tool</p> <p>To use a third-party tool for A/B Testing, please select the checkbox at the bottom of the A/B Testing configuration options: \"Activate with third-party tool\".</p>"},{"location":"apps/optimization/ab-testing/#defining-variants_1","title":"Defining Variants","text":"<p>When using a third-party tool, you may pass variant names directly via the Customization API as such:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let variant = AnyABTestTool.getVariants()\nswitch variant {\ncase \"variantA\": return BannerSettings(/* variantA configuration */ variantName: \"variantA\")\ncase \"variantB\": return BannerSettings(/* variantA configuration */ variantName: \"variantB\")\ndefault: return BannerSettings(/* default configuration */)\n}\n</code></pre> <pre><code>val variant = AnyABTestTool.getVariants()\nval bannerSettings = when (variant) {\n\"variantA\" -&gt; BannerSettings(variantName = \"variantA\", /* variantA configuration */)\n\"variantB\" -&gt; BannerSettings(variantName = \"variantB\", /* variantB configuration */)\nelse -&gt; BannerSettings(/* default configuration */)\n}\n</code></pre> <pre><code>final variant = await AnyABTestTool.aBTestingVariant;\nswitch(variant) {\ncase \"variantA\": {_showFirstLayer(/* variantA Settings */);}\nbreak;\ncase \"variantB\": {_showFirstLayer(/* variantB Settings */);}\nbreak;\ndefault: {_showFirstLayer(/*Default*/);}\nbreak;\n}\n</code></pre> <pre><code> const variant = await AnyABTestTool.getABTestingVariant()\nlet bannerSettings: BannerSettings;\nswitch (variant){\ncase \"variantA\":\nreturn bannerSettings = {/* settings for the banner with variantA */};\ncase \"variantB\":\nreturn bannerSettings = {/* settings for the banner with variantB */};\ndefault:\nreturn bannerSettings = {/* default banner settings*/};\n</code></pre> Supporting your self-built UI <p>If you have your own UI and you want Usercentrics to know which A/B Testing variant from your Third-Party Tool you are using, so that the events you track in the Usercentrics analytics API (<code>track()</code>) have the variant data. Then you have to inject the variant programmatically with this API:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.shared.setABTestingVariant(variant: &lt;VariantName&gt;)\n</code></pre> <pre><code>Usercentrics.instance.setABTestingVariant(&lt;VariantName&gt;)\n</code></pre> <pre><code>UsercentricsCore.setABTestingVariant(variant: &lt;VariantName&gt;)\n</code></pre> <pre><code>Usercentrics.setABTestingVariant(&lt;VariantName&gt;)\n</code></pre>"},{"location":"apps/optimization/ab-testing/#tracking-results_1","title":"Tracking Results","text":"<p>Implement the tracking mechanism of your third-party tool, when processing the <code>UsercentricsConsentUserResponse</code>, available in the callback of the banner presentation.</p>"},{"location":"apps/optimization/customization/","title":"Customization","text":"<p>User experience is a relevant variable when collecting consent. We highly encourage you to take advantage of our customization features, in order to provide a branded and user friendly banner to your users.</p>"},{"location":"apps/optimization/customization/#remote-customization","title":"Remote Customization","text":"<p>Use our Remote Customization options, for a quick out-of-the-box branding that covers all the basics. </p> <p></p> <p>In the Appearance section of our Admin Interface, you will find the Layout and Styling tabs:</p> LayoutStyling <p>Under Display Options, you will find the following options:</p> <ul> <li>Hide \"Deny All\" button</li> <li>Hide Language switch</li> </ul> <p>Showing the Language Switch</p> <p>The language switch will only be shown in the Second Layer, and both of the following requirements need to be fulfilled:</p> <ul> <li>Multiple visible languages are added in the Configuration section of the Admin Interface.</li> <li>The \"Hide language switch\" option is disabled in the Appearance section of the Admin Interface, under the \"Layout\" tab.</li> </ul> <p>Colors: Set individual colors by providing a specific HEX or using our color picker for the following banner elements:</p> <ul> <li>Background Color</li> <li>Text Color</li> <li>Links Color</li> <li>Tab Color</li> <li>Accent Color</li> <li>Button Colors</li> <li>Tabs Color</li> <li>Toggle Colors</li> </ul> <p></p> <p>Text Font and Size: Only supported via Programmatic Customization.</p> <p>Logo: Set an image to appear at the top of your banner by providing a URL, as well as it's position:</p> <p></p> Supported URL Image Formats <p>When passing a URL to fetch an image, the SDK supports: iOS: PNG and JPEG. Android: PNG, JPEG, BMP, GIF and WebP.</p> Supporting SVG Images <p>As SVG is not a format supported by mobile operating systems, we have provided an ad-hoc solution that requires the addition of dedicaded SVG libraries to your project.</p> iOSAndroid <p>Add SVG kit via Cocoapods: <pre><code>pod 'SVGKit'\n</code></pre></p> <p>Add Pixplicity to your <code>build.gradle</code>: <pre><code>implementation 'com.pixplicity.sharp:sharp:1.1.3@aar'\n</code></pre></p> <p>Once added, the Usercentrics SDK will make use of it when an SVG needs to be rendered.</p> <p></p> <p>Any changes to the properties available here, will only take effect with a new init of the SDK and clean/updated cache.</p> <p>Forcing configuration updates during Testing</p> <p>You may force a configuration update by using the reset() function, or by deleting the app and installing it again. We only recommend doing this when integrating and testing the SDK.</p> <p>Configuration updates in Production</p> <p>The SDK caches essential data on device after the first successful init, in order to be efficient with resources and provide offline capabilities. This cache is kept for several days, depending on app usage. Which means user's will not get \"Published\" changes from the Admin Interface immediately, but we can guaranty changes will take effect for 100% of your user base latest within a week. </p>"},{"location":"apps/optimization/customization/#programmatic-customization","title":"Programmatic Customization","text":"<p>Use our Programmatic Customization API, to create advance banner designs and run-time variants. Using this API unlocks features like A/B Testing &amp; Dark Mode.</p> Compliance Note <p>Because the Programmatic API enables many customization options, it is important that your DPO (Data Protection Officer) reviews and approves the compliance of your design:</p> <p>e.g.</p> <ul> <li>A user should always have clear options to accept, deny or save granular choices available as call to actions in the 1<sup>st</sup> or 2<sup>nd</sup> layer.</li> <li>The First Layer should always allow a path to the Second Layer.</li> <li>Calls to action should be equally prominent.</li> </ul> <p></p> <p>When creating the UsercentricsUI banner, a <code>BannerSettings</code> property will be available for you to customize any element of the banner.</p> <p>BannerSettings is an optional field for UsercentricsBanner constructor and an optional argument for the showFirstLayer and showSecondLayer methods</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>let firstLayerStyleSettings = FirstLayerStyleSettings(\n    buttonLayout =  [\n        ButtonSettings(type: .acceptAll, font: UIFont(name: \"Avenir\", size: 15), cornerRadius: 18)\n    ]\n)\nlet bannerSettings = BannerSettings(generalStyleSettings: nil, //GeneralStyleSettings?\n                                    firstLayerSettings: firstLayerStyleSettings,\n                                    secondLayerSettings: nil //SecondLayerStyleSettings?)\n\nlet banner = UsercentricsBanner(bannerSettings: bannerSettings)\n</code></pre> <pre><code>val firstLayerStyleSettings = FirstLayerStyleSettings(\nbuttonLayout = ButtonLayout.Column(\nlistOf(\nButtonSettings(\ntype = ButtonType.ACCEPT_ALL,\ntextColor = Color.Red,\nbackgroundColor = Color.Blue,\ncornerRadius = 24,\ntextSizeInSp = 15f,\n)\n)\n)\n)\nval bannerSettings = BannerSettings(\ngeneralStyleSettings = null, //GeneralStyleSettings?\nfirstLayerSettings = firstLayerStyleSettings,\nsecondLayerSettings = null, //SecondLayerStyleSettings?\n)\n\nval banner = UsercentricsBanner(context, bannerSettings)\n</code></pre> <pre><code>final firstLayerStyleSettings = FirstLayerStyleSettings(\nbuttonLayout: ButtonLayout.column(buttons: [\nconst ButtonSettings(\ntype: ButtonType.acceptAll,\ntextColor: Colors.black,\nbackgroundColor: Colors.white,\ntextSize: 16.0,\ncornerRadius: 32.0,\n),\n])\n)\nfinal bannerSettings = BannerSettings(\ngeneral: null, //GeneralStyleSettings?\nfirstLayer: firstLayerStyleSettings,\nsecondLayer: null, //SecondLayerStyleSettings?,\n);\n\n// First Layer\nfinal response = await Usercentrics.showFirstLayer(\nsettings: bannerSettings,\n);\n\n// Second Layer\nfinal response = await Usercentrics.showSecondLayer(\nsettings: bannerSettings,\n);\n</code></pre> <pre><code>const bannerSettings: BannerSettings = {\nfirstLayerStyleSettings: {\nbuttonLayout: ButtonLayout.row([\n{\nbuttonType: ButtonType.acceptAll,\ncornerRadius: 30.0,\nbackgroundColorHex: \"FFFFFF\",\ntextSize: 16.0,\ntextColorHex: \"000000\",\n}\n])\n},\nsecondLayerStyleSettings: null,  //SecondLayerStyleSettings?\ngeneralStyleSettings: null  //GeneralStyleSettings?\n}\n\n// First Layer\nconst response = await Usercentrics.showFirstLayer(bannerSettings);\n\n// Second Layer\nconst response = await Usercentrics.showSecondLayer(bannerSettings);\n</code></pre> Dark Mode <p>Use the customization API to define both <code>light</code> and <code>dark</code> designs and use depending on device theme.</p> <pre><code>let lightBannerTheme = BannerSettings(...) // define light theme\nlet darkBannerTheme = BannerSettings(...) // define dark theme\n\nlet theme = (&lt;Device Theme Dark?&gt;) = darkBannerTheme : lightBannerTheme\nlet banner = UsercentricsBanner(theme)\nbanner.showFirstLayer(hostView: self) { }\n</code></pre>"},{"location":"apps/optimization/customization/#general-style-settings","title":"General Style Settings","text":"<p>Style Settings values overwrite Remote Style values</p> Properties Type Notes textColor Color Edit the text color for both First Layer and Second Layer. layerBackgroundColor Color Edit the color of the First Layer, and Header and Footer of the Second Layer. layerBackgroundSecondaryColor Color Edit the color of the background in the content section. linkColor Color Edit the color of all available links. tabColor Color Edit the color of the Category and Services Tabs. bordersColor Color Edit the color for the borders of the Category and Services content section, Category and Service components and Service Information Tags. toggleStyleSettings Object Edit the toggle colors for: Active, Inactive and Disabled states. font Font Pass both Regular and Bold fonts to be used in the banner. logo Image Pass a local image to be rendered as a logo in both First Layer and Second Layer. links Enum Customize the visibility of the legal links: .both (default), .firstLayerOnly, .secondLayerOnly and .hidden. disableSystemBackButton Bool Disable system back button. statusBarColor Color Edit the color of the status bar when the banner is displayed."},{"location":"apps/optimization/customization/#first-layer-style-settings","title":"First Layer Style Settings","text":"Properties Type Notes layout Enum Select the Layout of the First Layer: Sheet, Popup Center, Popup Bottom, Full. headerImage Enum Customize the layout of the image at the top of your banner: .logo (default), .extended or .hidden. title Object Customize the appearance of the title label: Font, Text Size, Text Color and Text Alignment. message Object Customize the appearance of the message label: Font, Text Size, Text Color, Text Alignment, Link Text Color and Link Text Underline. buttonLayout Enum Customize the layout of the action buttons: .column (default), .grid, .row. You may also pass an array of ButtonSettings to define the order and appearance of the buttons. backgroundColor Color Edit the color of the First Layer background. cornerRadius Float Edit the corner radius of the banner. overlayColor Color Edit the color of the First Layer overlay."},{"location":"apps/optimization/customization/#second-layer-style-settings","title":"Second Layer Style Settings","text":"Properties Type Notes buttonLayout Enum Customize the layout of the action buttons: .column (default), .grid, .row. You may also pass an array of ButtonSettings to define the order and appearance of the buttons. showCloseButton Bool Show a close button in the Second Layer to allow users to dismiss the banner without editing consent."},{"location":"apps/optimization/customization/#button-settings","title":"Button Settings","text":"Properties Type Notes type Enum Select the Button Type: Accept All, Deny All, More, Save. font Font Customize the Font of the Button text. backgroundColor Color Edit the color of the Button background. textColor Color Edit the color of the Button text. textSizeInSp Float Edit the size of the Button text in Scalable Pixels (adjustable to the device screen density and users preference). cornerRadius Int Edit the corner radius of the Button. isAllCaps Boolean Change the Button text to be in all Uppercase."},{"location":"apps/optimization/customization/#accessibility","title":"Accessibility","text":"<p>The text size within any font-utilizing sections (such as GeneralStyleSettings, TitleSettings and MessageSettings) is influenced by the device's Accessibility settings. In this scenario, Usercentrics SDK automatically adjust the font size specified, in the Admin Interface, by the factor determined in the Accessibility settings of the respective device (Android or iOS).</p>"},{"location":"apps/optimization/customization/#customizing-fonts-on-ios","title":"Customizing fonts on iOS","text":"<p>On iOS, setting a font on any of our Programmatic Customization APIs (e.g., GeneralStyleSettings), the banner won't adhere to the accessibility settings specified on the device unless an scaled font is used. Ensure that you pass a scaled font in order to conform to accessibility rules.</p> <p>Example: <pre><code>let fontMetrics = UIFontMetrics.default\nlet scaledFont = BannerFont(regularFont: fontMetrics.scaledFont(for: UIFont(...)), boldFont: fontMetrics.scaledFont(for: UIFont(...))\nlet generalStyleSettings = GeneralStyleSettings(font: scaledFont)\n</code></pre></p> <p>Default behaviour</p> <p>When no font is specified, the SDK defaults to the system font and the size set in the Admin Interface, ensuring compliance with accessibility standards.</p>"},{"location":"apps/optimization/customization/#customizing-fonts-on-android","title":"Customizing fonts on Android","text":"<p>In Android, the operating system consistently respects the device's accessibility settings, regardless of the selected font size.</p>"},{"location":"config/account-config/","title":"Setting up your Account","text":"<p>Welcome to Usercentrics! Let's get you started with setting up your account, and making sure you are making the best out of our CMP.</p> <p>First, log in to your account with the email you registered during signup. </p> <p></p> <p>Once logged in, you will have access to your dashboard:</p>"},{"location":"config/account-config/#configurations","title":"Configurations","text":"<p>Here you can create new configurations with the following criteria: </p> <ul> <li> <p>Legal Framework: Choose the legal framework that you would like to target to a region or country.</p> <p></p> </li> <li> <p>Platform: Our CMP has dedicated features and configurations for Web and Apps.</p> <p>Dependent on your Subscription</p> <p>Given your subscription or trial, all configuration will default to the platform that you selected during signup. In case you have a subscription to both platforms, during the configuration creation flow, you will be able to choose a Platform.</p> <p></p> </li> <li> <p>Configuration Details: Configuration metadata to keep things in order.</p> </li> </ul> <p>Now that you have a new configuration, you may continue to Banner Configuration</p>"},{"location":"config/account-config/#geolocation-rulesets","title":"Geolocation Rulesets","text":"<p>Here you can define regions to target specific configuration. You may also define a default, which will be used to target any user that is outside of the defined regions. In this case, you may choose to not show a banner at all.</p> <p></p>"},{"location":"config/account-config/#user-management","title":"User Management","text":"<p>Invite and Manage User permission for stakeholders in your organization.</p> <p></p>"},{"location":"config/account-config/#company-details","title":"Company Details","text":"<p>Overview of your company details, and edit Mode.</p>"},{"location":"config/account-config/#do-you-need-further-help","title":"Do you need further help?","text":"<p>See our Customer Support Portal</p>"},{"location":"config/banner-config/","title":"Setting up a Banner Configuration","text":"<p>From your Configurations Dashboard, select any configuration, and a new window will open. This is your Banner Configuration Dashboard:</p>"},{"location":"config/banner-config/#configuration","title":"Configuration","text":"SetupLegal SpecificationsCMP Settings <p>Here you will find the mandatory fields:</p> <ul> <li>Configuration Name: Give your configuration a meaningul name to easily identify it.</li> <li> <p>Data Controller: Name of legal entity collecting consent. </p> </li> <li> <p>Domain Settings: [Web Configurations only] Domains where banner should be permitted.</p> </li> <li>Published Apps: [App Configurations only] Declair published apps to enable App Scanner.</li> </ul> <p>and Language Settings:</p> <ul> <li>Language Settings: Languages that will be available when adding translations. </li> <li>Visible Languages: Languages the CMP will support and will be available in the language toggle.</li> </ul> <p>Depending the selected legal framework, this section will show options related to the regulation.</p> <p>Find CMP settings to enable functionality such as: </p> <ul> <li>Cross-Domain Consent Sharing [Web]</li> <li>Google Consent Mode, </li> <li>Banner Resurfacing options</li> <li>Bot Detection[Web].</li> </ul>"},{"location":"config/banner-config/#service-settings","title":"Service Settings","text":"DPS &amp; App ScannerData Processing ServicesGlobal Vendor ListCategories <p>For both Websites and published mobile Apps, we provide a scanner that will identify third party technologies and map them to Data Processing Services, that you can add to your configuration in a few steps.</p> <p>A Data Processing Service (DPS) represents any third party vendor or technology running on your website or mobile app. </p> <p>There are 4 ways to add a DPS:</p> <ul> <li>Add a DPS via Scanner Results: When running a scan, results will be presented to you, and you may add DPSs directly from there.</li> <li>Add a DPS via Database: Search for a DPS by the vendor's name on our database. e.g. Adjust, Firebase, Twitter, etc.</li> <li>Create a Custom DPS: If you have custom technologies or your legal team would like to have more control over the languages used in the DPS, you may create new ones from scratch.</li> <li>Customize Predefined Service: Create your own DPS, starting with an already existing template.</li> </ul> <p>Only for TCF configurations</p> <p>Declare TCF certified vendors in order to pass consent via the TCString. Please consider that if you declare a vendor in the Global Vendor List, you do not need to add them again as a DPS.</p> <p>Bundle Data Processing Services in Categories for easier user overview:</p> <ul> <li>Categories for Marketing, Functional and Essential are set by default, but you can create, modify and delete categories as you need.</li> <li>All Data Processing Services need to be assigned to a category.</li> </ul>"},{"location":"config/banner-config/#appearance","title":"Appearance","text":"LayoutStyling <p>Here you will find a set of different banner layouts that you can use to render your banner, as well as customization options for the UI.</p> <p>Customize the style of your banner:</p> <ul> <li>Colors: Set colors for Tabs and Button Text and Background individually.</li> <li>Font: Set fonts and size for the text of the CMP. Note that the device system needs to support the font in order for this setting to work, otherwise, please inject your font programmatically.</li> <li>Logo: Provide a .png image URL that can be rendered at the top of the banner. Position can also be edited.</li> </ul>"},{"location":"config/banner-config/#content","title":"Content","text":"First LayerSecond LayerLabels <p>Define content and links for the Banner's First Layer:</p> <ul> <li>Title: Header title of First Layer.</li> <li>Banner Message: Use this space to clarify why you need to track user data and what kind of data you are tracking. </li> <li>Imprint &amp; Privacy Links: Provide links to your legal documents. Links &amp; titles can be edited, if you would like to expose other links. </li> </ul> <p>Define content for the Banner's Second Layer:</p> <ul> <li>Title: Header title of Second Layer.</li> <li>Description: Use this space to provide a description of the services you use and their purpose. </li> </ul> <p>Customize and provide translations:</p> <ul> <li>Buttons: Edit the labels and add translations to all action buttons in the CMP.</li> <li>History: Edit the labela and add translations to history entries found in each service description.</li> </ul>"},{"location":"config/banner-config/#analytics","title":"Analytics","text":"Interaction Analytics OverviewInteraction Analytics Comparison <p>These dasboards will give you an overview of your user's behaviour:</p> <ul> <li>Displays: Times the banner has been shown.</li> <li>Interactions: Times users have saved consent in any direction.</li> <li>Ignores: Displays - Interactions. This number needs to be interpreted depending on your configuration.</li> </ul> <p>The second dashboard \"User Acceptance\" will give you a distribution of the type of interactions customers had with your banner. e.g. Accept, Deny, Custom.</p> <p>Get a comparison board to segregate users consent by country, device type and even banner layer.</p>"},{"location":"config/banner-config/#integrations","title":"Integrations","text":"<p>A marketplace of third party integrations that you can enable with Usercentrics.</p>"},{"location":"config/banner-config/#implementation","title":"Implementation","text":"<p>An overview on how to implement the Web or App SDKs, Version History and A/B Testing.</p>"},{"location":"config/banner-config/#do-you-need-further-help","title":"Do you need further help?","text":"<p>See our Customer Support Portal</p>"},{"location":"games/intro/","title":"Welcome!","text":"<p>We know monetization and user retention is important to you, and it's easy to think that privacy will be an obstacle for these metrics. But we are here to show you a better way, where you can improve your monetization strategy, boost user retention and become compliant with privacy regulations all at the same time.</p>"},{"location":"games/intro/#the-usercentrics-unity-sdk","title":"The Usercentrics Unity SDK","text":"<p>The Usercentrics Unity SDK helps you become compliant with privacy regulations such as GDPR (Europe) &amp; CCPA (US/California) and compliance standards like the IAB's TCF 2.2.</p> <p></p> <p>With our Drag and Drop integration, you will be compliant from the get go, and will have all our optimization and analytics features to unlock a better performance for your monetization and retention, while also being compliant with privacy compliance regulations.</p>"},{"location":"games/intro/#get-started","title":"Get started","text":"<p>Please create a Usercentrics account or starting a free trial in order to test the Usercentrics SDK.</p>"},{"location":"games/intro/#supported-legal-frameworks","title":"Supported Legal Frameworks","text":"<ul> <li>\ud83c\uddea\ud83c\uddfa GDPR - European Union's General Data Protection Regulation</li> <li>\ud83c\udf0e TCF 2.2 - IAB's Transparency &amp; Consent Framework 2.2</li> <li>\ud83c\uddfa\ud83c\uddf8 CCPA/CPRA and other US Frameworks - Regulations in US States</li> <li>\ud83c\udde7\ud83c\uddf7 LGPD - Brazil\u2019s Lei Geral de Prote\u00e7\u00e3o de Dados</li> <li>and many more...</li> </ul>"},{"location":"games/intro/#features","title":"Features","text":"<ul> <li>Easy installation via a package manager</li> <li>Methods to collect &amp; update consent</li> <li>Up-to-date legal information on more than 1,000 technology vendors</li> <li>UsercentricsUI is a plug &amp; play CMP solution with endless customization options</li> <li>Build your own CMP with our UsercentricsCore module, an API that provides all necessary data and action delegates</li> <li>Device language detection</li> <li>tvOS and Android TV support only when building your own CMP</li> <li>Share the same settingsID between multiple apps and web applications</li> <li>Cross-Device consent sharing</li> <li>Consent continuity between the app and embedded WebViews. (Browser SDK is required)</li> <li>Offline Handling</li> <li>Support for Landscape Mode</li> <li>Reporting of service Opt-In rates</li> <li>Reporting of User Interactions</li> </ul>"},{"location":"games/releases/","title":"Releases","text":""},{"location":"games/releases/#release-history","title":"Release History","text":"<p>The following table lists the details of the latest Usercentrics Unity SDK releases:</p> Version Release Date Release Notes 2.13.2 March 13, 2024 <ul><li>[Feature] Clear User Session - Introducing a new API designed to simplify the process of clearing user sessions. Explore it further here</li></ul><ul><li>[Improvement] Google Consent Mode Granular Choices - Enhances integration with Google SDKs by updating to the latest changes. Explore the details here</li><li>[Improvement] Adjust Granular Consent - By Using Consent Mediation, we have fully integrated with Adjust SDK updates associated with the DMA</li></ul><ul><li> iOS Bug Fixes:<ul><li>[Fix] Adjusts in landscape mode where labels were not fully aligned with other elements of the screen</li><li>[tvOS Fix] Numerous layout modifications have been made to address the arrangement of titles and the rendering of other elements in languages that result in larger text sizes</li></ul></li></ul><ul><li>Other Fixes:<ul><li>[Fix] Removes deprecated field TCFVendor::deviceStorage</li><li>[Fix] In certain scenarios, the 'Save Settings' button color was not customizable</li></ul></li></ul> 2.13.0 February 29, 2024 <ul><li>[Feature] New Usercentrics Ready API - The API's new properties introduce a feature that, through Rulesets, allows identification of scenarios where the banner may be bypassed in specific locations, check it out</li></ul><ul><li>[Improvement] Removes TCF 2.0 warnings - Since TCF 2.0 has been deprecated, we've removed all warnings regarding the usage of version 2.0 of this framework</li><li>[Improvement] New TCF 2.2 Stacks - Added support for Stacks 44 and 45</li></ul><ul><li>Android Bug Fixes:    <ul> <li>[Fix] Fully removes support for TLS 1.2 in Android versions lower than 5.0 (API Level 20)</li> <li>[Minor Fix] Prefab was not holding the correct value for <code>DisableSystemBackButton</code></li> </ul></li></ul><ul><li>iOS Bug Fixes:    <ul> <li>[Fix] Banner was not correctly rendered given some specific programmatic customization scenarios</li> <li>[Fix] Fixes layout constraints when changing the language for CCPA banners</li> </ul></li></ul><ul><li>Other Fixes:    <ul> <li>[Fix] General improvement on resurfacing logic for any Legal Basis change on TCF Purposes</li> </ul></li></ul> 2.12.0 February 15, 2024 <ul><li>[Feature] Consent choice persistence - Prevents repeated banner displays across geographies for users moving across different legal frameworks (i.e. in case of frequent travellers)</li><li>[Feature] - Added Assembly Definitions</li></ul><ul><li>[Improvement] - Displaying the count of third-party vendors by category title</li><li>[Improvement] First Layer customization demo - Showcasing our First Layer personalization by using all the power from our Customization API </li></ul><ul><li>Android Bug Fixes:<ul><li>[Fix] Improved UX on language selector popup</li></ul></li></ul><ul><li> iOS Bug Fixes:<ul><li>[Fix] Enhancing the UI of First-layer Popups and Sheets for Optimal Display on iPads</li></ul><ul><li>Other Fixes:<ul><li>[Fix] Aligned purposes descriptions/illustrations and vendor data with GVL translation</li><li>[Fix] Edge case when certain services, hidden by their respective categories, were visible\"</li><li>[Fix] Minor issues on session restoration when using TCF</li></ul></li></ul> 2.11.3 January 25, 2024 <ul><li>[Improvement] Adds API to Get Consents</li><li>[Improvement] Adds AC String into Updated Consent Event API</li></ul><ul><li>Other Fixes:<ul><li>[Fix] Ensures accurate and proper display of large links on the Banner First and Second layer</li><li>[Fix] Deprecates deviceStorage field on TCF Vendor class</li></ul></li></ul> 2.11.2 January 12, 2024 <ul><li>[Improvement] Rework of session restore checks to prevent empty/bogus Controller ID</li><li>[Improvement] Adds description for ATT message in default Info.plist file</li><li>[Improvement] Programmatic Customization: added remaining custom properties to GeneralStyleSettings</li><li>[Improvement] Android: changed default property value that indicates if back button should be disabled, it can be enabled only if necessary</li></ul><ul><li>Android Bug Fixes - Experience a smoother Android experience with the resolution of minor bugs:<ul><li>[Fix] Controller ID card replaced at the bottom when using Google Additional Consent</li><li>[Fix] Language selection menu will respect programmatic customization parameters</li><li>[Fix] Warning for Chartboost SDK when R8 is enabled</li><li>[Fix] Minor UI glitch where tab names were truncated when displaying the second layer in landscape mode</li></ul></li></ul><ul><li> iOS Bug Fixes:<ul><li>[Fix] Prevent fatal exceptions for a known iOS issue, more details here</li><li>[Fix] Resolved for iOS pointer address of the native object being returned</li><li>[Fix] Resolved AmbiguousException on Unity versions newer than 2021 when using ATTManager</li></ul><ul><li>Other Fixes:<ul><li>[Fix] Solved for Webview continuity previously not restoring consents to Google Additional Technology Providers</li><li>[Fix] Solves the problem where the option 'Show non-IAB purposes only for EU users' incorrectly impacts users from specific regions</li><li>[Fix] Application of consents when configuring the CMP to 'Do Not Display' with Geolocation Rules</li><li>[Fix] Resolved the missing parameters error when showing First Layer on some Unity versions</li></ul></li></ul> 2.11.0 December 22, 2023 <ul><li>[Feature] Google Consent Mode V2 Support - Seamlessly integrate with the latest Google Consent Mode, ensuring enhanced privacy compliance and meeting Google requirements.</li></ul><ul><li>[Feature] Google Additional Consent Mode V2 - Integrate with the latest Google Additional Consent, allowing you to collect and signal additional consent for ad tech providers not covered by the IAB TCF V2.2.<ul><li>[Feature] Display number of vendors for each purpose on TCF - Easily view the number of vendors associated with each purpose in the Transparency and Consent Framework.</li></ul><ul><li>[Feature] Chartboost SDK in Consent Mediation - Optimize revenue by effortlessly managing the Chartboost SDK within Usercentrics Consent Mediation.</li></ul><ul><li>[Feature] Expanded Programmatic Customization API - Elevate your customization experience with our latest API enhancements. Now offering extended control over a broader range of elements, our updated API enables deeper and more precise customization options to fine-tune the banner with greater ease and flexibility.</li></ul><ul><li>[Improvement] TCFUserDecisions API update - All properties have been changed from variables to constants. The adTechProviders field has been added which represent consents for Google Additional Consent Mode. On iOS this is a required argument, so if this is irrelevant for your configuration, just set an empty list, when needed.</li></ul><ul><li>[Improvement] Location is only cached by the SDK for offline mode.</li></ul><ul><li>Android Bug Fixes - Experience a smoother Android experience with the resolution of minor bugs:<ul><li>[Fix] Avoid fetching any image resource after the banner has been closed.</li></ul></li></ul><ul><li> iOS Bug Fixes:<ul><li>[Fix] Prevent Long Privacy Legal Links from Being Truncated;</li><li>[Fix] Enable Scaled Fonts resources when using Custom UI.<ul><li>Other Fixes:<ul><li>[Fix] Third-Party Vendors Count misalignment in some configurations;</li><li> [Fix] Fix the bug causing the banner to reappear for users outside the European Union, despite configurations being specifically set to enforce GDPR compliance exclusively for EU users;<ul><li> [Fix] Update Link to Report Issues on Zendesk.</li> 2.10.3 November 16, 2023 <ul><li>[Improvement] Accessibility: Various issues have been addressed to enhance accessibility.<ul><li>Resolved banner compatibility issues with iOS VoiceOver.</li><li>Resolved banner compatibility issues with Android TalkBack.</li><li>Adjusted font sizes to comply with Accessibility requirements on both iOS and Android.</li></ul></li></ul><ul><li>[Improvement] Added Ukrainian support language for TCF.<ul><li>[Resolved Issues]<ul><li>Fixed the issue of not disclosing the setting \"showCloseButton\" has been addressed, preventing errors on Android.</li><li>Fixed the crash on Android when passing an invalid controller id to restore the user session.</li><li>Fixed The issue of the remote variant configuration not being used in first layer on Unity.</li></ul> 2.10.1 October 27, 2023 <ul><li>[Resolved Issue] When using ATT solution combined with some third-party plugins, some classes would clash their names, causing the build to fail</li></ul> 2.10.0 October 25, 2023 <ul><li>[Feature]  New Consent Mediation Event API! Now you can programatically track which SDKs were mediated by Usercentrics </li><li>[Feature]  New Customization API for Unity is now in Beta! Use our API, to create advance banner designs and run-time variants. You can now, customise the top banner image, select layout of the banner, customise the title and customise the action buttons. This also unlocks features like A/B Testing </li><li>[Improvement]  Important Note: the API to get the Apple Tracking Transparency status has been renamed to <code>GetAuthorizationStatus</code>. Please note that this API is used only to returns the status.</li><li>[Resolved Issue] Minor UI fixes</li><li>[Resolved Issue] Fixed the support for multiple orientations, as previously the buttons at times were not rendered with the best UX on iOS</li> 2.9.0 October 4, 2023 <ul><li>[TCF 2.2 Support] As the industry shifts to TCF 2.2 (deadline: November 20, 2024), we are pleased to announce that SDK Version 2.9.0 now offers comprehensive support for this new industry standard. \u26a0\ufe0fImportant Note: Please be aware that this version is incompatible with TCF 2.0. Before upgrading to V 2.9.0, ensure a smooth transition to TCF 2.2 following the guidelines on How to migrate from TCF v2.0 to TCF v2.2 </li><li>[Updated Global Vendor List] We've transitioned to Global Vendor List v3 to align with industry standards.</li><li>[Legitimate Interest] To enhance transparency and privacy, purposes 3 to 6 have been removed, and purpose 11 has been introduced.</li><li>[Improved User Interface] We've made enhancements to the banner's second layer for a better user experience.</li><li>[Vendor Count Display] Users can now easily see the total count of IAB and non-IAB vendors.</li><li>[New Resurface Requirements] We've implemented new resurfacing requirements to keep your CMP compliant with the latest standards.</li></ul> 2.8.7 July 12, 2023 <ul><li>[Unity] New <code>getCMPData</code> API, to unlock <code>activeVariant</code> and <code>publsihedApps</code> properties.</li><li>[Flutter &amp; React Native] Intraction Analytics tracking API is now available.</li><li>[Improvement] \"Default\" label value is now supported for consent history entries.</li><li>[Improvement] Enable support for Hidden Data Processing Services.</li></ul> 2.8.6 May 26, 2023 <ul><li>[Fix] <code>onConsentUpdated</code> event was not triggered after initialization.</li><li>[Fix] Solved issue with Boolean values being sent via consent mediation to Adjust </li><li>[Fix] Solved Apple TV labels being cut off</li><li>[Fix] Solved Android TV issue when showing TCF on 2<sup>nd</sup> layer.</li></ul> 2.8.5 May 08, 2023 <ul><li>[Feature] Add support to US Legal Frameworks.</li><li>[Deprecate] Remove deprecated method <code>showFirstLayer(layout: Layout)</code></li></ul> 2.8.4 April 17, 2023 <ul><li>[Feature] Supporting Limited Fields in Service Descriptions.</li><li>[Improvement] Accessibility in First and Second Layer.</li><li>[Improvement] Custom UI objects are getting the latest values.</li><li>[Fix] General issues.</li></ul> 2.8.3 March 23, 2023 <ul><li>[Fix] General issues.</li><li>[Fix] Switches were showing the wrong value on iOS when pressing too many times repeatedly.</li></ul> 2.8.0 March 03, 2023 <ul><li>[Fix] Issue when toggles were showing on second layer even though they were disabled.</li><li>[Fix] Issue where the first time the app was initialized using the method getTCString, the TCString comes out empty.</li><li>[Fix] Issue where DPSs accepted by default did not appear as accepted when opening second layer.</li></ul> 2.7.15 February 22, 2023 <ul><li>[Feature] Expose PUR enabling properties</li><li>[Improvement] Extend handling of edge case exceptions. </li><li>[Improvement] UI updates to CCPA banner variant. </li><li>[Fix] Issue with third party SDKs being included in POM file.</li></ul>"},{"location":"games/releases/#released-betas","title":"Released Betas","text":"<p>The following table lists the Beta features that are currently available:</p> <p>Beta Disclaimer</p> <p>These features are currently considered experimental. Please make sure you validate the functionality before pushing to production.</p> Feature Minimum Version Description Consent Mediation 2.7.0 To simplify the process of applying consent, we are adding a mediation feature, that is aware of the Consent API of selected SDKs, and will automatically apply/update consent as soon as it is captured."},{"location":"games/samples/","title":"Sample Projects","text":"<p>We have prepares a sample Unity Scene, so you can evaluate the integration in advanced:</p> <ul> <li>Unity Sample Scene</li> </ul> <p>This example provide an overview of setup and UsercentricsUI implementation.</p>"},{"location":"games/specifications/","title":"Technical Specifications","text":"<p>Please note that Package Size is just an estimate of the packages without any runtime storage.</p>"},{"location":"games/specifications/#supported-operating-systems","title":"Supported Operating Systems","text":"Operating System Package Size Version  iOS \u223c3MB 11 and higher  Android \u223c2MB 5.0 (API 21) and higher"},{"location":"games/specifications/#supported-game-engines","title":"Supported Game Engines","text":"Frameworks Package Size Version  Unity \u223c0.36MB 2018.4 and higher"},{"location":"games/api/core-api/","title":"Unity Core API","text":""},{"location":"games/api/core-api/#initialization","title":"Initialization","text":""},{"location":"games/api/core-api/#init","title":"Init","text":"<p>Called to configure and initialize Usercentrics after app launch</p> <pre><code>Usercentrics.Instance.Initialize((status) =&gt; {\n// Success: Returns UsercentricsReadyStatus object\n}, (errorMessage) =&gt; {\n// Failure: Returns non-localized error\n});\n</code></pre>"},{"location":"games/api/core-api/#showfirstlayer","title":"ShowFirstLayer","text":"<p>When called, it will display First Layer.</p> <pre><code>Usercentrics.Instance.ShowFirstLayer( (userResponse) =&gt; {\n// Handle userResponse\n});\n</code></pre>"},{"location":"games/api/core-api/#showsecondlayer","title":"ShowSecondLayer","text":"<p>When called, it will display the Second Layer.</p> <pre><code>Usercentrics.Instance.ShowSecondLayer(&lt;showCloseButton&gt; /* true/false */, (usercentricsConsentUserResponse) =&gt; {\n// Handle userResponse\n});\n</code></pre>"},{"location":"games/api/core-api/#features","title":"Features","text":""},{"location":"games/api/core-api/#restoreusersession","title":"RestoreUserSession","text":"<p>Restore Consents given by a user using its Controller ID.</p> <pre><code>Usercentrics.Instance.RestoreUserSession(&lt;controllerId&gt;, (status =&gt; {}), (errorString =&gt; {}));\n</code></pre>"},{"location":"games/api/core-api/#clearusersession","title":"ClearUserSession","text":"<p>Clear Consents given by a user in its current session, check out the feature page.</p> <pre><code>Usercentrics.Instance.ClearUserSession((status) =&gt; {}, (errorString) =&gt; {});\n</code></pre>"},{"location":"games/api/core-api/#reset","title":"Reset","text":"<p>Resets Usercentrics SDK, deleting all local data and forcing to be initialized again.</p> <pre><code>Usercentrics.Instance.Reset();\n</code></pre>"},{"location":"games/api/core-api/#acceptall","title":"AcceptAll","text":"<p>Signal to Usercentrics SDK that the Accept All button has been pressed by the user.</p> <pre><code>Usercentrics.Instance.AcceptAll();\n</code></pre>"},{"location":"games/api/core-api/#denyall","title":"DenyAll","text":"<p>Signal to Usercentrics SDK that the Deny All button has been pressed by the user.</p> <pre><code>Usercentrics.Instance.DenyAll();\n</code></pre>"},{"location":"games/api/core-api/#getfirstlayersettings","title":"GetFirstLayerSettings","text":"<p>For now, this method only returns First Layer data when using TCF Framework.</p> <pre><code>Usercentrics.Instance.GetFirstLayerSettings();\n</code></pre>"},{"location":"games/api/core-api/#getconsents","title":"GetConsents","text":"<p>Retrieve a list of services with the consent choices.</p> <pre><code>Usercentrics.Instance.GetConsents();\n</code></pre> Outputs Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"games/api/core-api/#usercentricsserviceconsent","title":"UsercentricsServiceConsent","text":"Property Type Notes templateId String ID used to match a service with frameworks running on your app. See Applying Service Consent. status Bool Consent status given to this specific service. dataProcessor String Name of entity processing the data that was collected via this service. version String Legal template version. See Service Settings. isEssential Boolean If it is an essential service. history [UsercentricsConsentHistoryEntry] The consent history chronologically ordered. type UsercentricsConsentType The type of the current consent status (Explicit/Implicit)."},{"location":"games/api/core-api/#usercentricsconsenthistoryentry","title":"UsercentricsConsentHistoryEntry","text":"Property Type Notes status Bool Consent status given to this specific service. dataProcessor String Name of entity processing the data that was collected via this service. timestampInMillis Long The UNIX timestamp in millisecons of the consent."},{"location":"games/api/core-api/#helpers","title":"Helpers","text":""},{"location":"games/api/core-api/#platform-is-supported","title":"Platform is supported","text":"<p>Get if current selected platform is supported by Usercentrics.</p> <pre><code>Usercentrics.Instance.IsPlatformSupported();\n</code></pre>"},{"location":"games/api/core-api/#getcontrollerid","title":"GetControllerID","text":"<p>Catch user events if you are using Third Party Analytics tools.</p> <p>A Usercentrics generated ID, that represents the consent collected by a User. <pre><code>Usercentrics.Instance.GetControllerID();\n</code></pre></p>"},{"location":"games/api/core-api/#track","title":"Track","text":"<p>Track user events if you are building your own UI, and want to see these events in the Usercentrics Analytics Dashboard. <pre><code>Usercentrics.Instance.Track(&lt;usercentricsAnalyticsEventType&gt;);\n</code></pre></p>"},{"location":"games/api/core-api/#get-cmp-data","title":"Get CMP Data","text":"<p>Get CMP related data set in the Admin Interface. <pre><code>var cmpData = Usercentrics.Instance.GetCmpData();\n\nvar publishedApps = cmpData.publishedApps;\nvar activeVariant = cmpData.activeVariant\nvar userLocation = cmpData.userLocation;\n</code></pre></p>"},{"location":"games/api/core-api/#tcf-22-specific-methods","title":"TCF 2.2 Specific Methods","text":""},{"location":"games/api/core-api/#gettcfdata","title":"GetTCFData","text":"<p>Retrieve all data related to TCF 2.2, as well as the consent string. (TCString) Your CMP configuration needs to be set for TCF, otherwise this object will be empty.</p> <pre><code>Usercentrics.Instance.GetTCFData((tcfData) =&gt; {\nvar purposes = tcfData.purposes;\nvar specialPurposes = tcfData.specialPurposes;\nvar features = tcfData.features;\nvar specialFeatures = tcfData.specialFeatures;\nvar stacks = tcfData.stacks;\nvar vendors = tcfData.vendors;\n\n// TCString\nvar tcString = tcfData.tcString;\n});\n</code></pre>"},{"location":"games/api/core-api/#set-cmp-id","title":"Set CMP ID","text":"<p>When building your own UI for TCF 2.2. You need to pass the CMPID given to you by the IAB, in order for your solution to be compliant.</p> <pre><code>Usercentrics.Instance.SetCmpId(&lt;cmpId&gt;);\n</code></pre>"},{"location":"games/api/core-api/#getadditionalconsentmodedata","title":"GetAdditionalConsentModeData","text":"<p>Retrieve all data related to Google Additional Consent v2, as well as the consent string. (ACString) Your CMP configuration needs to be set for Additional Consent, otherwise this object will be empty. <pre><code>var additionalConsentData = Usercentrics.Instance.GetAdditionalConsentModeData()\n</code></pre></p> Outputs Type Notes additionalConsentData AdditionalConsentModeData Retrieves the Google's Additional Consent String and the List of consented and not consented Ad Tech Providers."},{"location":"games/api/core-api/#additionalconsentmodedata","title":"AdditionalConsentModeData","text":"Property Type Notes acString String A String that represents the consented and disclosed Google Ad Technology Providers (ATPs), as defined by Google. adTechProviders List Represents the List of the defined ATPs."},{"location":"games/api/core-api/#adtechprovider","title":"AdTechProvider","text":"Property Type Notes id Int ATP Identifier. name String ATP Name. privacyPolicyUrl String ATP Privacy Policy URL. consent Boolean Consent given to the ATP."},{"location":"games/api/core-api/#ccpacpra-specific-methods","title":"CCPA/CPRA Specific Methods","text":""},{"location":"games/api/core-api/#get-ccpacpra-usp-data","title":"Get CCPA/CPRA (USP) Data","text":"<p>Retrieve all data related to CCPA/CPRA, as well as the consent string. (USPString) Your CMP configuration needs to be set for CCPA/CPRA, otherwise this object will be empty.</p> <pre><code>Usercentrics.Instance.GetUSPData();\n</code></pre>"},{"location":"games/api/event-api/","title":"Unity Event API","text":""},{"location":"games/api/event-api/#consent-listener","title":"Consent Listener","text":""},{"location":"games/api/event-api/#subscribe","title":"Subscribe","text":"<p>Subscribe to any consent updated event that happens within Usercentrics SDK This API is meant for third-parties, that need to pull consent from the Usercentrics SDK.</p> <pre><code>Usercentrics.Instance.SubscribeOnConsentUpdated((consentEvent) =&gt; {\n// Handle consentEvent\n});\n</code></pre>"},{"location":"games/api/event-api/#consentevent","title":"ConsentEvent","text":"Property Type Notes consents UsercentricsServiceConsent List of Services with consent choices. controllerId String A Usercentrics generated ID, used to identify a specific user. See Restore User Session tcString String IAB's Transparency &amp; Consent String uspString String IAB's US Privacy String acString String A String that represents the consented and disclosed Google Ad Technology Providers (ATPs), as defined by Google."},{"location":"games/api/event-api/#usercentricsserviceconsent","title":"UsercentricsServiceConsent","text":"Property Type Notes templateId String ID used to match a service with frameworks running on your app. See Applying Consent. status Bool Consent status given to this specific service. dataProcessor String Name of entity processing the data that was collected via this service. version String Legal template version. See Service Settings."},{"location":"games/api/event-api/#dispose-listener","title":"Dispose Listener","text":"<p>Dispose any subscription to this API.</p> <pre><code>Usercentrics.Instance.DisposeOnConsentUpdatedSubscription();\n</code></pre>"},{"location":"games/api/event-api/#mediation-listener","title":"Mediation Listener","text":""},{"location":"games/api/event-api/#subscribe_1","title":"Subscribe","text":"<p>Subscribe to any mediation updated event that happens within Usercentrics SDK This API is meant for third-parties, that need to pull mediation from the Usercentrics SDK.</p> <pre><code>Usercentrics.Instance.SubscribeOnConsentMediation( (mediationEvent) =&gt; {\n// Handle mediationEvent\n});\n</code></pre>"},{"location":"games/api/event-api/#mediationevent","title":"MediationEvent","text":"Property Type Notes applied ConsentApplied List of Consent Applied payload."},{"location":"games/api/event-api/#consentapplied","title":"ConsentApplied","text":"Property Type Notes name String Name of the SDK mediated. templateId String Template ID that represents the SDK. consent Bool Consent status given to this specific service. mediated Bool Mediation success status."},{"location":"games/api/event-api/#dispose-listener_1","title":"Dispose Listener","text":"<p>Dispose any subscription to this API.</p> <pre><code>Usercentrics.Instance.DisposeOnConsentMediationSubscription();\n</code></pre>"},{"location":"games/features/build_own_ui/","title":"Building your own UI","text":"<p>Only for IAB TCF 2.2 certified customers</p> <p>Currently you can only use this solution if you are building a Banner that adheres to the IAB's TCF 2.2 Standard. For this you will need to be certified as a CMP by the IAB.</p> <p>Use our Data Source and Action Delegates to fetch all the information you need to build you Banner, and add functionality.</p>"},{"location":"games/features/build_own_ui/#data-source","title":"Data Source","text":"<pre><code>//Fetch Banner properties to build you UI\nvar firstLayerSettings = Usercentrics.Instance.GetFirstLayerSettings();\nvar title = firstLayerSettings.title;\nvar description = firstLayerSettings.description;\n// see below the full list of fields available\n\n// IAB's TCF Data\nUsercentrics.Instance.GetTCFData((tcfData) =&gt; {\nvar purposes = tcfData.purposes;\nvar specialPurposes = tcfData.specialPurposes;\nvar features = tcfData.features;\nvar specialFeatures = tcfData.specialFeatures;\nvar stacks = tcfData.stacks;\nvar vendors = tcfData.vendors;\nvar tcString = tcfData.tcString;\n});\n</code></pre>"},{"location":"games/features/build_own_ui/#content-mapping","title":"Content Mapping","text":"First Layer SDK Property 1. First layer title firstLayerSettings.title 2. First layer description firstLayerSettings.description 3. First layer additional Info firstLayerSettings.additionalInfo 4. First layer resurface note firstLayerSettings.resurfaceNote 5. Vendorlist link title firstLayerSettings.vendorListLinkTitle 6. Manage settings link title firstLayerSettings.manageSettingsLinkTitle 7. Label purposes firstLayerSettings.purposesLabel 8. Label features firstLayerSettings.featuresLabel Buttons SDK Property 1. Accept all button title firstLayerSettings.acceptAllButton 2. Deny all button title firstLayerSettings.denyAllButton 3. Save button title firstLayerSettings.saveButton Vendors SDK Property 1. Label title vendor.name 2. Purpose Name vendor.purposes[n].[findByPurposeId].name 3. Legitimate Interest Purpose name vendor.legitimateInterestPurposes[n].[findByPurposeId].name 4. Special purpose name vendor.specialPurposes[n].[findByPurposeId].name 5. Feature name vendor.features[n].[findByPurposeId].name 6. Special Feature name vendor.specialFeatures[n].[findByPurposeId].name 7. Cookie refresh value vendor.cookieRefresh 8. Cookie Age value vendor.cookieMaxAgeSeconds 9. Cookie storage value vendor.usesCookie 10. Non-cookie storage value vendor.usesNonCookieAccess Purposes SDK Property 1. Label title purpose.name 2. Legitimate interest consent purpose.legitimateInterestConsent 3. Legal Description purpose.descriptionLegal 4. Purpose Description purpose.purposeDescription 5. Consent purpose.consent Special Purposes SDK Property 1. Label title specialPurpose.name 2. Legal Description specialPurpose.descriptionLegal 3. Purpose Description purpose.purposeDescription Features SDK Property 1. Label title feature.name 2. Legitimate interest consent feature.legitimateInterestConsent 3. Legal Description feature.descriptionLegal Special Features SDK Property 1. Label title specialFeature.name 2. Consent specialFeature.consent 3. Description specialFeature.purposeDescription 4. Legal Description specialFeature.descriptionLegal Stacks SDK Property 1. Label title stack.name 3. Description stack.description 3. Purposes stack.purposeIds 4. Special Features stack.specialFeatureIds"},{"location":"games/features/build_own_ui/#set-cmp-id","title":"Set CMP ID","text":"<p>When building your own TCF 2.2 CMP, it is required to have your CMP UI design certified by the IAB. Once certified, you will need to provide your CMP ID as follows:</p> <pre><code>Usercentrics.Instance.setCMPId(&lt;ID&gt;);\n</code></pre>"},{"location":"games/features/build_own_ui/#action-delegates","title":"Action Delegates","text":"<p>In order to collect consent, we have provided the following two functions:</p> <p>Accept All</p> <pre><code>Usercentrics.Instance.AcceptAll();\n</code></pre> <p>Deny All</p> <pre><code>Usercentrics.Instance.DenyAll();\n</code></pre>"},{"location":"games/features/build_own_ui/#interaction-analytics","title":"Interaction Analytics","text":"<p>To gather events in the Usercentrics analytics dashboard the following API is provided to track the available events:</p> <pre><code>Usercentrics.Instance.Track(&lt;usercentricsAnalyticsEventType&gt;);\n</code></pre> <p>Events</p> Event Notes CmpShown The banner was displayed to the user. It doesn't matter which layer. AcceptAllFirstLayer The Accept All button was pressed from the first layer. DenyAllFirstLayer The Deny All button was pressed from the first layer. SaveFirstLayer The Save button was pressed from the first layer. Save is mainly used for granular decisions. AcceptAllSecondLayer The Accept All button was pressed from the second layer. DenyAllSecondLayer The Deny All button was pressed from the second layer. SaveSecondLayer The Save button was pressed from the second layer. Save is mainly used for granular decisions. ImprintLink The Imprint link/button was pressed. MoreInformationLink The More Information link/button was pressed. This button is usually used to navigate from first layer to second layer. PrivacyPolicyLink The Privacy policy link/button was pressed. <p>Continue to Apply Consent</p> <p>Now, it is fundamental that the user's privacy choices are applied to the 3<sup>rd</sup> party SDKs on you App. Please continue to Apply Consent.</p>"},{"location":"games/features/clear-user-session/","title":"Clearing User Session","text":""},{"location":"games/features/clear-user-session/#overview","title":"Overview","text":"<p>This feature enables the clearing of previously granted user consents, which proves beneficial in scenarios involving applications or games that offer sign-out functionality, allowing users to terminate their session. </p> <p>By removing the consents granted by the previous user, this feature ensures a smooth transition for the next user, eliminating the necessity to reset and reinitialize the SDK.</p> <p>Remote consents will not be deleted</p> <p>This feature solely clears the session stored on the local device; all user consents, which can be retrieved using their controllerId, will remain stored on our servers.</p>"},{"location":"games/features/clear-user-session/#examples-of-use-cases","title":"Examples of Use Cases","text":"<ul> <li> <p>Sign-Out and Sign-In Flow: If a login occurs and the current user is not associated in your system with a controllerId (which would indicate that their consents can be restored),   the Clear User Session function should be called</p> </li> <li> <p>Delete user data: If your app or game includes a feature to delete local user data, this method offers an optimized approach to clear user data while keeping the SDK prepared to collect new consents</p> </li> </ul>"},{"location":"games/features/clear-user-session/#implementation-guide","title":"Implementation Guide","text":"<p>Loaded Settings will be kept</p> <p>Since this feature will not reinitialize the SDK, all the Settings loaded by the settingsId or rulesetId previously used will be kept. </p>"},{"location":"games/features/clear-user-session/#steps-for-implementation","title":"Steps for Implementation","text":"<ol> <li>API Invocation: Call the <code>clearUserSession</code> API.</li> <li>Session Cleanup Callback: After invoking the API, ensure to verify the successful cleaning of the session. If the cleaning process fails, prompt the user to provide their consents again.</li> </ol>"},{"location":"games/features/clear-user-session/#implementation","title":"Implementation","text":"<p>You can clear a user session in all Usercentrics supported platforms.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub>C#<sub>Unity</sub> <pre><code>UsercentricsCore.shared.clearUserSession(onSuccess: { status in\n    // This callback is equivalent to isReady API\n}, onError: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.instance.clearUserSession({ status -&gt;\n// This callback is equivalent to isReady API\n}, { error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>try {\nfinal status = await Usercentrics.clearUserSession();\n// This callback is equivalent to isReady API\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\ntry {\nconst status = await Usercentrics.clearUserSession();\n// This callback is equivalent to isReady API\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.Instance.ClearUserSession((status) =&gt; {\n// This callback is equivalent to isReady API\n}, (errorString) =&gt; {\n// Handle non-localized error\n});\n</code></pre>"},{"location":"games/features/clear-user-session/#best-practices","title":"Best Practices","text":""},{"location":"games/features/clear-user-session/#avoid-routine-invocation","title":"Avoid Routine Invocation","text":"<ul> <li>Ensure this API is called only when necessary, as invoking it excessively could burden your end-users' experience</li> <li>Within the context of signing in and out, you can eliminate the need to call this API by restoring a user session directly. Check out this page for more detailed instructions</li> </ul>"},{"location":"games/features/consent-choice-persistence/","title":"Consent Choice Persistence","text":"<p>Feature introduced in version 2.13.0</p> <p>The Consent Choice Persistence feature is designed to streamline the user experience across different geographies by ensuring that consent preferences provided in one location are seamlessly preserved and applied when the user moves to another region where they have previously given consent.</p> <p>This means that once users consent to data collection in one city or country, they won't be prompted to provide consent again if they travel to another area covered by their initial consent.</p> <p>This feature not only enhances user convenience by eliminating repetitive consent requests, but also ensures that users' preferences are consistently  respected, regardless their location.</p>"},{"location":"games/features/consent-choice-persistence/#implementation-guide","title":"Implementation Guide","text":"<p>Activating the Consent Choice Persistence feature is achieved by using Rulesets, requiring no additional setup through the Admin Interface or SDK adjustments.</p> <p>This seamless integration ensures that once Rulesets are in place, the feature operates effortlessly, guided by Usercentrics' robust platform.</p> <p>Usercentrics offers a versatile toolkit for tailoring consent frameworks based on user location, customizing consent banner appearances, and adjusting settings to fit your needs. This hands-off approach maximizes efficiency while maintaining precise control over consent management across different regions.</p> <p>That's it! \ud83d\ude80 we will now store consent automatically for users!</p> <p>Please, make sure you are following the guidelines on how to collect consent.</p>"},{"location":"games/features/consent-mediation/","title":"Consent Mediation","text":"<p>This feature was introduced in its beta version with the release of 2.7.0. Starting from version 2.11.0, it has transitioned to a stable version, offering enhanced functionality.</p> <p>IMPORTANT</p> <p>Please make sure to follow all the steps outlined below and that consent is being passed correctly before pushing this feature to production.</p> <p>To simplify the process of signalling consent to third-party SDKs, we added a mediation feature, that works with APIs of SDKs listed below. This feature will update the consent when necessary within your application. Moreover, this functionality allows you to effortlessly activate Google Consent Mode and connect to advertising and mediation tools that, for instance, may not be part of TCF.</p> <p>Once correctly implemented, this feature simplifies the transmission of the consent signal and privacy choices to selected third-party SDKs.</p> <p>However, it is always advisable to review and assess the documentation, privacy policy, and privacy section of third-party vendor SDKs before deciding to work  with them or integrating any.</p> <p>Please note that Usercentrics cannot fully guarantee the compliance of collection mechanisms of third-party vendors and SDKs.</p>"},{"location":"games/features/consent-mediation/#how-it-works","title":"How it works?","text":"<p>The Consent Mediation feature on Unity operates by integrating SDKs APIs in order to stream user consent.</p> <p>Most Unity SDKs use a native implementation, serving as a bridge to their respective native platforms. Our approach integrates with these native libraries designed for Android and iOS.</p> <p>The supported SDKs listed below all utilize this integration method. If you encounter a library that doesn't follow a native implementation, please let us know by providing feedback. </p> <p>You can access a comprehensive overview of the native implementations for mediating consents here.</p>"},{"location":"games/features/consent-mediation/#enable-mediation","title":"Enable Mediation","text":"<p>That's it! \ud83d\ude80 we will now apply consent automatically to all supported SDKs.</p> <p>Make sure you apply consent to not supported SDKs as well.</p> <p>change /apps version as well \u2192</p>"},{"location":"games/features/consent-mediation/#supported-sdks","title":"Supported SDKs","text":"SDK Template ID Added in version Source Google Analytics for Firebase diWdt4yLB 2.7.0 Analytics data collection and usage Unity Ads hpb62D82I 2.7.0 Privacy consent and data APIs AppLovin fHczTMzX8 2.7.0 Privacy-Consent and Data API for iOS and Android ironSource 9dchbL797 2.7.0 Regulation Advanced Settings for iOS and Android Crashlytics cE0B0wy4Z 2.7.12 Privacy-Consent and Data API for iOS and Android Adjust Jy6PlrM3 2.7.12 Privacy-Consent and Data API for iOS and Android Chartboost IEbRp3saT 2.11.0 Privacy API for iOS and Android <p>It is essential to thoroughly review the documentation of each SDK to identify the specific APIs necessary for accurately signaling user consent.</p> <p>Be aware that some SDKs, such as Crashlytics, may automatically collect data by default.</p> <p>Although most SDKs maintain consistent contracts for Privacy APIs in their updates, any changes must be noted, and the appropriate API should be used accordingly. Remember, rigorous testing is vital for success. While our feature addresses a majority of scenarios, it is imperative that you personally verify the expected behavior in your specific use case.</p> <p>Warning</p> <p>Ensure that the version of the SDK in your application matches the one we currently support.</p>"},{"location":"games/features/consent-mediation/#supported-mediation-sdks","title":"Supported Mediation SDKs","text":"<p>These SDKs mediate consent for selected SDKs themselves. Make sure you set up the correct TemplateIDs to automatically pass consent to mediated SDKs.</p>"},{"location":"games/features/consent-mediation/#adjust","title":"Adjust","text":"<p>Check out the documentation page to get an insight on the Partners API. Note that we only support the ones listed below.</p> SDK Template ID Apple Ads weoN4Lb_MjWLuu Facebook ocv9HNX_g Google Ads S1_9Vsuj-Q Google Marketing Platform t-TPeXsRi Snapchat QcD9GVNXZ Tencent tMLzMavbHZoxW0 TikTokSan 6-qobRfu Twitter Skj79NodobQ Yahoo Gemini HJSPc4ids-Q Yahoo Japan Search gUbemZYaQwqxss"},{"location":"games/features/consent-mediation/#debugging","title":"Debugging","text":"<p>Debug Mode</p> <p>To see debug messages, please set the SDK's loggerLevel to DEBUG.</p> <p>When running your application with Consent Mediation enabled, you should expect the following events:</p> <p>Enable Confirmation</p> <p>Immediately after initialization, you will get a confirmation that Consent Mediation is Enabled: <pre><code>[USERCENTRICS] Consent Mediation is Enabled\n</code></pre></p> <p>Scan</p> <p>After your configuration has been loaded, the SDK will provide an overview of the supported services: <pre><code>[USERCENTRICS][Mediation] 2/6 Services are supported: Unity Ads | Google Analytics for Firebase\n</code></pre></p> <p>Mediation</p> <p>Whenever a user provides consent or the SDK has been initialized, the SDK will apply the latest user choices to each supported SDK:</p> <pre><code>[USERCENTRICS][Mediation] \u2705 Google Analytics for Firebase: TRUE\n[USERCENTRICS][Mediation] \u2705 Unity Ads: FALSE\n</code></pre> <p>Default Consent</p> <p>On first launch, you will see consent is applied immediately after initialization, even when a user still has not given consent. This happens because the default consent provided in your configuration is being applied.</p> <p>Warning</p> <p>If your workflow requires simultaneous initialization of certain SDKs alongside Usercentrics, be aware of potential racing conditions.</p> <p>These can arise when the Mediation routine is executed while an SDK is still in the process of initialization. To mitigate such issues, we strongly advise initializing SDKs only after obtaining user consent. For more detailed guidance on this approach, please refer to our further recommendations here.</p>"},{"location":"games/features/google-additional-consent/","title":"Google Additional Consent","text":""},{"location":"games/features/google-additional-consent/#what-is-google-additional-consent","title":"What is Google Additional Consent?","text":"<p>Google\u2019s Additional Consent is a technical specification designed to enable publishers to collect and signal additional consent for ad tech providers that are not part of the IAB Europe\u2019s Transparency &amp; Consent Framework (TCF) v2.2, but are listed on Google\u2019s Ad Tech Providers (ATPs) list. This specification is crucial for publishers that want to work with ad tech providers not using the TCF. It is important to note that Google\u2019s Additional Consent does not replace the standard IAB TCF v2.2 consent collection process, but supplements it, enabling an extra layer of consent collection for Google ATPs.</p> <p>The Google Additional Consent V2 supports an Additional Consent (AC) String and to allow interoperability for CMPs that support TCF and Advertiser Consent Mode. For more information, please refer to this guide.</p>"},{"location":"games/features/google-additional-consent/#how-to-implement-google-additional-consent-v2","title":"How to implement Google Additional Consent V2?","text":"<p>Starting from version 2.11.0, we are now supporting the Google Additional Consent V2.</p> <p>To successfully incorporate Google Additional Consent V2 into your mobile application, there are a few essential steps to ensure a seamless integration process.</p> <ol> <li> <p>Setup Google Ad Tech Providers in your configuration:     Please go to your configuration in Admin Interface settings, in Google Vendors tab, under Service Settings, please enable the Google Ad Technology Providers (ATPs) and select your desired providers.</p> <p></p> </li> </ol> <p>That's it! \ud83d\ude80 your app is now using the Google Additional Consent Mode V2.</p> <p>To access the Additional Consent Mode Data generated by the SDK, please check the following API.</p>"},{"location":"games/features/google-consent-mode/","title":"Google Consent Mode","text":""},{"location":"games/features/google-consent-mode/#what-is-google-consent-mode","title":"What is Google Consent Mode?","text":"<p>Google Consent mode helps you to obtain your users consent and pass it to Google seamlessly. Consequently, Google tools adjust their behaviors automatically. Google further supplements this by filling gaps through conversion modeling and behavioral modeling, aiding you in achieving your marketing goals. For mobile applications, this is crucial to ensure the proper functioning of Firebase Services.</p> <p>Those who do not have consent mode enabled will not be able to capture new EEA users in their audiences starting from March 2024.</p>"},{"location":"games/features/google-consent-mode/#how-to-implement-google-consent-mode-in-your-app","title":"How to implement Google Consent Mode in your app","text":"<p>To successfully incorporate Google Consent Mode V2 into your mobile application, there are a few essential steps to ensure a seamless integration process.</p>"},{"location":"games/features/google-consent-mode/#consent-types","title":"Consent Types","text":"<p>Google created four new types of consent types which includes:</p> Consent Type Description ad_storage Enables storage, such as cookies (web) or device identifiers (apps), related to advertising. ad_user_data Sets consent for sending user data to Google for online advertising purposes. ad_personalization Sets consent for personalized advertising. analytics_storage Enables storage, such as cookies (web) or device identifiers (apps), related to analytics, for example, visit duration. <p>More details can be found in their official documentation.</p>"},{"location":"games/features/google-consent-mode/#setting-up-account-settings","title":"Setting up Account Settings","text":"<p>To streamline all consent types to Google, it's crucial to adhere to the steps outlined below. Following are instructions according to the chosen legal framework available on our Admin Interface.</p> TCF 2.2 + GDPRGDPR Only <p>Google adheres entirely to TCF policies and is registered as a vendor with ID 755 on IAB Global Vendor List (check out the Vendor List).</p> <p>Therefore, it's mandatory to select this vendor from the Global Vendor List to enable the SDK to signal Consent Mode accurately.</p> <p></p> <p>Full overview of the purposes and corresponding consent types can be found in the official documentation. </p> <p>Example banner:</p> <p></p> <p>After end-user interacts with the banner, the following scenarios could happen:</p> <p>- Accept All \u2705  \u2003 All Consent Types will be set to <code>true</code>.</p> <p>- Deny All \u274c  \u2003 All Consent Types will be set to <code>false</code>.</p> <p>- Save Settings (granular choices) \ud83d\udccb  \u2003 This is the trickiest scenario because the Consent Types may have different values, since it will vary according to the consent given to  Google Adverting Products TCF Vendor, Purposes being used and their Legal Basis.  \u2003 Short example:    \u2003 Above we have:  \u2003\u2003 - Google Adverting Products (Vendor ID 755) -&gt; Consent \u274c Legitimate Interest \u2705  \u2003\u2003 - Store and/or access information on a device (Purpose 1) -&gt; Consent \u274c  \u2003\u2003\u2003 therefore <code>ad_storage = denied</code> and <code>ad_user_data = denied</code>  \u2003\u2003 - Create profiles for personalised advertising (Purpose 3) -&gt; Consent \u274c  \u2003\u2003\u2003 therefore <code>ad_personalization = denied</code>  \u2003\u2003 - Use profiles to select personalised advertising (Purpose 4) -&gt; Consent \u274c  \u2003\u2003\u2003 therefore <code>ad_personalization = denied</code>  \u2003\u2003 - Measure advertising performance (Purpose 7) -&gt; Legitimate Interest \u2705  \u2003\u2003\u2003 therefore <code>ad_user_data = denied</code> since Purpose 1 Consent \u274c  \u2003\u2003 - Apply market research to generate audience insights (Purpose 9) -&gt; Legitimate Interest \u2705  \u2003\u2003\u2003 therefore <code>analytics_storage = granted</code>, since Purpose 10 has Legitimate Interest \u2705   \u2003\u2003 - Develop and improve services (Purpose 10) -&gt; Legitimate Interest \u2705  \u2003\u2003\u2003 therefore <code>analytics_storage = granted</code> since Purpose 9 has Legitimate Interest \u2705  \u2003 This is just an example of how granular consents work, in order to gain a more detailed understanding, we recommend to follow Google's official documentation.  \u2003 All the details on how Google will process the generated TCString, click here.</p> <p>When using GDPR only we will only update the value to the <code>analytics_storage</code> flag and set analytics collection enabled or disabled, according to the consent given to Google Analytics for Firebase. More details on how we implement the signaling, check out our Consent Mediation documentation.</p> <p>Therefore, it's mandatory to select this Data Processing Service to enable the SDK to signal Consent Mode accurately.</p> <p></p>"},{"location":"games/features/google-consent-mode/#configuring-the-sdk","title":"Configuring the SDK","text":"iOSAndroidUnity <p>1. Integrate with Usercentrics SDK starting from version 2.13.2. </p> <p>2. Activate the Usercentrics Consent Mediation Feature:</p> <pre><code>let options = UsercentricsOptions(..., consentMediation: true)\n</code></pre> <p>Refer to the specific set of the documentation for more detailed instructions if needed. </p> <p>3. Add Firebase Library to your app:</p> <p>Use the minimum version of 10.17.0. Please refer to its guide for detailed instructions on integration.</p> <p>4. Add the Consent Mode keys to your app's info.plist file:</p> <p>Assign <code>false</code> values to the keys to establish default permission where GDPR or another legal framework requires consent to be explicitly given.</p> <p>More information can be found here.</p> <pre><code>&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_ANALYTICS_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_USER_DATA&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_PERSONALIZATION_SIGNALS&lt;/key&gt; &lt;false/&gt;\n</code></pre> <p>1. Integrate with Usercentrics SDK starting from version 2.13.2. </p> <p>2. Activate the Usercentrics Consent Mediation Feature:</p> <pre><code>val options = UsercentricsOptions(..., consentMediation = true)\n</code></pre> <p>Refer to the specific set of the documentation for more detailed instructions if needed. </p> <p>3. Add Firebase Library to your app:</p> <p>Use the minimum version of 21.5.0 or 32.5.0 if you want to use the Firebase Android BoM. Please refer to its guide for detailed instructions on integration.</p> <p>4. Add the consent mode keys to your app's AndroidManifest.xml file:</p> <p>Assign <code>false</code> values to the keys to establish default permission where GDPR or another legal framework requires consent to be explicitly given.</p> <pre><code>&lt;meta-data android:name=\"google_analytics_default_allow_analytics_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_user_data\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_personalization_signals\" android:value=\"false\" /&gt;\n</code></pre> <p>1. Enable Consent Mediation on Usercentrics Prefab.</p> <p></p> <p>2. Please use the minimum version of 11.7.0.</p> <p>3. Please refer to its guide.</p> <p>4. Make sure to add default keys for each platform to establish default permission where GDPR or another legal framework requires consent to be explicitly given.</p> <p>Android (AndroidManifest.xml):</p> <pre><code>&lt;meta-data android:name=\"google_analytics_default_allow_analytics_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_user_data\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_personalization_signals\" android:value=\"false\" /&gt;\n</code></pre> <p>iOS (Info.plist):</p> <pre><code>&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_ANALYTICS_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_USER_DATA&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_PERSONALIZATION_SIGNALS&lt;/key&gt; &lt;false/&gt;\n</code></pre> <p>That's it! \ud83d\ude80 we will now apply the consent mode to Firebase Analytics SDK.</p>"},{"location":"games/features/google-consent-mode/#basic-vs-advanced-mode","title":"Basic vs Advanced Mode","text":"<p>Google delineates its implementation strategies into two categories: Basic and Advanced modes.</p> <p>The key differences are:</p> <ul> <li> <p>Basic Implementation</p> <ul> <li>Google SDKs are NOT loaded until end-user interacts with a consent banner.</li> </ul> </li> <li> <p>Advanced Implementation</p> <ul> <li>Google SDKs are loaded BEFORE end-user interacts with a consent banner.</li> </ul> </li> </ul>"},{"location":"games/features/google-consent-mode/#usercentrics-approach","title":"Usercentrics approach","text":"<p>Our SDK operates within the realm of Advanced Implementation, ensuring a comprehensive integration.</p> <p>Why? Our approach never restricts any SDK from operating within any app or game.</p> <p>When Google SDKs are loaded alongside Usercentrics, you're choosing an Advanced Implementation approach. Usercentrics will then send the consent signals once it has been initialized.</p> <p>We signal Consent using Privacy APIs exposed by Third-Party SDKs, like described on our Consent Mediation documentation.</p> <p>Following the guidance above, Google SDKs will automatically identify the default consent status, which is initially set to <code>false</code> in scenarios where GDPR or another legal framework requires consent to be explicitly given.</p> <p>If you wish to implement the Basic approach, make sure to only initialize Firebase SDK after the end-user interacted with the banner.</p>"},{"location":"games/features/google-consent-mode/#faq","title":"FAQ","text":"<ul> <li> <p>How to verify the integration with Usercentrics SDK?</p> <ul> <li>By enabling the debug mode, check out the console to see our logs, example:     <pre><code>[USERCENTRICS][DEBUG] [Mediation] Applied Granular Consent to Firebase - MediationGranularConsent(eea=true, analyticsStorage=false, adStorage=false, adUserData=false, adPersonalization=false)\n[USERCENTRICS][DEBUG] [Mediation] Applied Granular Consent to Firebase (Adjust Signal) - MediationGranularConsent(eea=true, analyticsStorage=false, adStorage=false, adUserData=false, adPersonalization=false)\n</code></pre></li> </ul> </li> <li> <p>How to double check the integration with Firebase?</p> <ul> <li>Check out their documentation on how to verify consent signals, iOS or Android.</li> </ul> </li> </ul>"},{"location":"games/features/google-consent-mode/#integration-on-earlier-versions","title":"Integration on Earlier Versions","text":"<p>Usercentrics implemented the Google Consent Mode in version <code>2.11.0</code>. For the sake of transparency, we offer a link that documents how the integration was conducted in that version. </p>"},{"location":"games/features/google-consent-mode2/","title":"Google Consent Mode","text":"<p>This page is an archive for Usercentrics SDK version 2.11.0</p> <p>We highly recommend integrating using our SDK latest version, please click here </p>"},{"location":"games/features/google-consent-mode2/#what-is-google-consent-mode","title":"What is Google Consent Mode?","text":"<p>Google Consent mode helps you to obtain your users consent and pass it to Google seamlessly. Consequently, Google tools adjust their behaviors automatically. Google further supplements this by filling gaps through conversion modeling and behavioral modeling, aiding you in achieving your marketing goals. For mobile applications, this is crucial to ensure the proper functioning of Google Analytics for Firebase.</p> <p>Note</p> <p>Those who do not have consent mode enabled will not be able to capture new EEA users in their audiences starting from March 2024.</p>"},{"location":"games/features/google-consent-mode2/#how-to-implement-google-consent-mode-in-your-app","title":"How to implement Google Consent Mode in your app","text":"<p>To successfully incorporate Google Consent Mode V2 into your mobile application, there are a few essential steps to ensure a seamless integration process.</p> <ol> <li> <p>SDK Version:    Make sure your application uses our 2.11.0 SDK.</p> </li> <li> <p>Activate the Usercentrics Consent Mediation Feature:    Enable the consent mediation feature for our SDK, and make sure to include the Google Analytics for Firebase template ID in your configuration. Refer to the specific set of the    documentation for detailed instructions.</p> </li> <li> <p>Add Firebase Analytics Library to your app:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <p>Use the minimum version of 10.17.0. Please refer to its guide for detailed instructions on integration.</p> <p>Finally, in your Info.plist file add the consent mode key value pairs. Assign true or false values to the keys to establish default permission. More information can be found here.</p> <pre><code>&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_ANALYTICS_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_STORAGE&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_USER_DATA&lt;/key&gt; &lt;false/&gt;\n&lt;key&gt;GOOGLE_ANALYTICS_DEFAULT_ALLOW_AD_PERSONALIZATION_SIGNALS&lt;/key&gt; &lt;false/&gt;\n</code></pre> <p>Use the minimum version of 21.5.0 or 32.5.0 if you want to use the Firebase Android BoM. Please refer to its guide for detailed instructions on integration.</p> <p>Finally, add the consent mode key value pairs. You can find more information here.</p> <pre><code>&lt;meta-data android:name=\"google_analytics_default_allow_analytics_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_storage\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_user_data\" android:value=\"false\" /&gt;\n&lt;meta-data android:name=\"google_analytics_default_allow_ad_personalization_signals\" android:value=\"false\" /&gt;\n</code></pre> </li> </ol>"},{"location":"games/features/google-consent-mode2/#our-integration-with-google-firebase-sdk","title":"Our Integration With Google Firebase SDK","text":"<p>In this section, we provide a detailed overview of how we mediate consents for this version <code>2.11.0</code>.</p> <p>This initiative is part of our commitment to transparency, offering you clear insights into how we integrate with third-party SDKs to effectively signal user consent.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>import FirebaseAnalytics\nlet consent = .granted || .denied\n\nAnalytics.setConsent([\n  .analyticsStorage: consent,\n  .adStorage: consent,\n  .adUserData: consent,\n  .adPersonalization: consent,\n])\n</code></pre> <pre><code>import com.google.firebase.ktx.Firebase\nimport com.google.firebase.analytics.ktx.analytics\nimport com.google.firebase.analytics.FirebaseAnalytics.ConsentStatus\nval consent = ConsentStatus.GRANTED || ConsentStatus.DENIED\n\nFirebase.analytics.setConsent {\nanalyticsStorage(consent)\nadStorage(consent)\nadUserData(consent)\nadPersonalization(consent)\n}\n</code></pre> <p>That's it! \ud83d\ude80 we will now apply the consent mode to Firebase Analytics SDK.</p>"},{"location":"games/features/google-consent-mode2/#basic-vs-advanced-mode","title":"Basic vs Advanced Mode","text":"<p>Google delineates its implementation strategies into two categories: Basic and Advanced modes. Usercentrics SDK operates within the realm of Advanced Implementation, ensuring a comprehensive integration.</p> <p>Our approach ensures no SDK is restricted from operating within any app or game.</p> <p>Following the guidance above, Google SDKs will intuitively recognize the default consent status (preset to <code>false</code>). Concurrently, upon activation of Consent Mediation and subsequent user consent, Usercentrics SDK seamlessly initiates any requisite API calls.</p> <p>This streamlined process facilitates a harmonious operation between consent management and functionality, enhancing user experience and compliance. \ud83d\ude80</p>"},{"location":"games/features/restore-user-sessions/","title":"Restoring a User Session &amp; Cross-Device Consent Sharing","text":"<p>Premium Feature</p> <p>Cross-Device Consent Sharing is a Premium Feature that is only enabled on request. Please reach out to your Customer Success Manager for more information.</p>"},{"location":"games/features/restore-user-sessions/#overview","title":"Overview","text":"<p>The 'Restore User Session' feature in our SDK is a specialized tool designed for a specific use case: retrieving user consents that were previously granted on a different device. This feature is ideal for scenarios where users switch between devices, such as moving from a web interface to a smartphone.</p>"},{"location":"games/features/restore-user-sessions/#key-concept","title":"Key Concept","text":"<p>One-Time Restoration: This feature is intended to restore consents only once from another system, ensuring a seamless user experience across devices.</p>"},{"location":"games/features/restore-user-sessions/#examples-of-use-cases","title":"Examples of Use Cases","text":"<ul> <li>User Switching Devices: A user grants consent on a web application and later accesses the mobile app. Using 'Restore User Session', the consents are carried over, eliminating the need for re-consent on the mobile app.</li> <li>Login Process: Integrate the 'Restore User Session' feature during the user login routine to seamlessly transition consents across different sessions or platforms.</li> </ul>"},{"location":"games/features/restore-user-sessions/#implementation-guide","title":"Implementation Guide","text":""},{"location":"games/features/restore-user-sessions/#prerequisites","title":"Prerequisites","text":"<ul> <li>Consistent use of the same Settings ID across your systems.</li> <li>Secure storage of the Controller ID provided by Usercentrics.</li> </ul>"},{"location":"games/features/restore-user-sessions/#steps-for-implementation","title":"Steps for Implementation","text":"<ol> <li>Store Controller ID: Save the Controller ID that Usercentrics provides. This ID is crucial for identifying the user session across different platforms</li> <li>API Invocation: Call the <code>restoreUserSession</code> API immediately after initializing the SDK and checking if it's ready</li> <li>Session Restoration Callback: After invoking the API, verify if the session was successfully restored. If the restoration fails, prompt the user to provide their consents again</li> </ol>"},{"location":"games/features/restore-user-sessions/#what-is-controller-id","title":"What is Controller ID?","text":"<p>A <code>controllerID</code> is a Usercentrics generated ID, used to identify a user's consent history. </p> <p>In the moment that a user provides consent, the SDK will generate a <code>controllerID</code> that identifies that specific user to it's privacy choices. This ID will be stored locally and available to you after a user gives consent:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub>C#<sub>Unity</sub> <pre><code>banner.showFirstLayer(...) { userResponse in\n    let controllerID = userResponse.controllerId\n}\n</code></pre> <pre><code>banner.showFirstLayer(...) { userResponse -&gt;\nval controllerId = userResponse?.controllerId\n}\n</code></pre> <pre><code>final userResponse = await Usercentrics.showFirstLayer(...);\nval controllerId = userResponse?.controllerId\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\nconst userResponse = await Usercentrics.showFirstLayer(...);\nconst controllerId = response.controllerId;\n</code></pre> <pre><code>Usercentrics.Instance.ShowFirstLayer(&lt;UsercentricsLayout&gt;, (userResponse) =&gt; {\nvar controllerId = userResponse.controllerId;\n});\n</code></pre> <p>or you can get it by calling <code>getControllerId()</code> after the initialization:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub>C#<sub>Unity</sub> <pre><code>let controllerID = UsercentricsCore.shared.getControllerId()\n</code></pre> <pre><code>val controllerId = Usercentrics.instance.getControllerId()\n</code></pre> <pre><code>final controllerId = await Usercentrics.getControllerId();\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\nconst controllerId = await Usercentrics.getControllerId();\n</code></pre> <pre><code>Usercentrics.Instance.GetControllerID();\n</code></pre>"},{"location":"games/features/restore-user-sessions/#implementation","title":"Implementation","text":"<p>You can now take this ID, and restore a user session in another Usercentrics supported platform, such as iOS, Android, TV, Web or Unity. By using the method <code>restoreUserSession</code> and passing the controllerID:</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub>C#<sub>Unity</sub> <pre><code>UsercentricsCore.shared.restoreUserSession(controllerId: controllerId) { status in\n    // This callback is equivalent to isReady API\n    if status.shouldCollectConsent {\n        // Collect Consent\n    } else {\n        // Session restored: apply consent with status.consents\n    }\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.instance.restoreUserSession(controllerId, { status -&gt;\n// This callback is equivalent to isReady API\nif (status.shouldCollectConsent) {\n// Collect Consent\n} else {\n// Session restored: apply consent with status.consents\n}\n}, { error -&gt;\n// Handle non-localized error\n})\n</code></pre> <pre><code>try {\nfinal status = Usercentrics.restoreUserSession(controllerId: controllerId);\n\nif (status.shouldCollectConsent) {\n// Collect Consent\n} else {\n// Session restored: apply consent with status.consents\n}\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\ntry {\nconst status = Usercentrics.restoreUserSession(controllerId: controllerId);\n\nif (status.shouldCollectConsent) {\n// Collect Consent\n} else {\n// Session restored: apply consent with status.consents\n}\n} catch (error) {\n// Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.Instance.RestoreUserSession(&lt;controllerId&gt;, (status) =&gt; {\nif (status.shouldCollectConsent)\n{\n// Collect Consent\n}\nelse\n{\n// Session restored: apply consent with status.consents\n}\n}, (errorString) =&gt; {\n// Handle non-localized error\n});\n</code></pre>"},{"location":"games/features/restore-user-sessions/#graphical-overview","title":"Graphical overview","text":""},{"location":"games/features/restore-user-sessions/#best-practices","title":"Best Practices","text":""},{"location":"games/features/restore-user-sessions/#avoid-routine-invocation","title":"Avoid Routine Invocation","text":"<p>Do not invoke the <code>restoreUserSession</code> method as part of regular operations. It's best suited for specific instances, like during the login process.</p>"},{"location":"games/features/restore-user-sessions/#save-controllerid-only-after-user-gave-consent","title":"Save controllerId only after user gave consent","text":"<p>The <code>controllerId</code> serves as a reference to the consents provided by the end-user. Therefore, it is recommended to store it on your premises only after the user has interacted with the banner and the consents are ready to be processed.</p>"},{"location":"games/features/restore-user-sessions/#single-use-restoration","title":"Single-Use Restoration","text":"<p>Remember that this feature is designed for a one-time restoration of user consents from another system. Repeated attempts to restore the session using the same Controller ID will not be successful.</p> <p>What happens if I call <code>restoreUserSession</code> repeatedly?</p> <p>The SDK is designed to only restore the session once. Repeated calls, especially with the same Controller ID, will not initiate additional session restorations.</p> <p>CCPA/CPRA and US Frameworks (VCDPA, CPA, CTDPA, UCPA) are not supported</p> <p>Cross-Device Consent Sharing is not supported for CCPA/CPRA and US Frameworks. The consent collected for these frameworks is only meant for the device the consent was given in.</p>"},{"location":"games/help/att/","title":"AppTrackingTransparency Framework - iOS 14.5","text":"<p>Starting with iOS 14.5, Apple requires you to declare the type of data your app is tracking and ask users for permission to track them. For this, Apple has provided the AppTrackingTransparency framework. (ATT)</p> <p></p>"},{"location":"games/help/att/#does-att-replace-a-cmp","title":"Does ATT replace a CMP?","text":"<p>No, it does not. A CMP collects consent based on the legal requirements of a framework, such as GDPR or CCPA/CPRA, which are valid in their respective jurisdiction. Where as ATT is designed to provide transparency about the tracking practices of an App. The underlying value of ATT is to empower users, by giving them the control over who can have access to their Advertising Identifier (IDFA, an ID used by advertisers to identify a unique user/device and provide personalized ads), by signaling to the app developer, that tracking practices should/should not be enabled.</p>"},{"location":"games/help/att/#how-to-support-att","title":"How to support ATT?","text":"<ol> <li> <p>Depending on your App Flow, you may request ATT permission whenever you deem convenient, but we recommend collecting both legal consent via the Usercentrics CMP and ATT permission in consecutive steps.    The system will handle showing the popup, you will just need to call this function.</p> <p><pre><code>AppTrackingTransparency.Instance.PromptForAppTrackingTransparency((status) =&gt;\n{\nswitch (status)\n{\ncase AuthorizationStatus.AUTHORIZED:\n// You may enable tracking frameworks\ncase AuthorizationStatus.DENIED:\n// You should disable tracking frameworks\ncase AuthorizationStatus.NOT_DETERMINED:\n// State before prompt is shown. No further action.\ncase AuthorizationStatus.RESTRICTED:\n// Restricted. See: https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/authorizationstatus/restricted\n}\n});\n</code></pre> 2. Also depending on your App Flow, you can retrieve the current Authorization Status. You just need to call this function. Please note that, if user has not yet given consent, the obtained status will be <code>AuthorizationStatus.NOT_DETERMINED</code>.</p> <pre><code>AppTrackingTransparency.Instance.GetAuthorizationStatus((status) =&gt;\n{\nswitch (status)\n{\ncase AuthorizationStatus.AUTHORIZED:\n// You can enable tracking frameworks\ncase AuthorizationStatus.DENIED:\n// You should disable tracking frameworks\ncase AuthorizationStatus.NOT_DETERMINED:\n// State before prompt is shown. No further action.\ncase AuthorizationStatus.RESTRICTED:\n// Restricted. See: https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/authorizationstatus/restricted\n}\n});\n</code></pre> </li> </ol>"},{"location":"games/help/att/#how-to-support-internationalization-with-att","title":"How to support internationalization with ATT?","text":"<p>Possible Plugin conflict</p> <p>If you use an localization plugin and our solution, please be aware that they may conflict.</p> <ol> <li> <p>Drag the ATTManager game object into your scene and set an english default message.    </p> <p>Set an english default message</p> <p>If you do not set the english default message, the ATT support will not be enabled!</p> </li> <li> <p>ATT supports localization for several languages. You can also configure it with messages for other languages.    </p> <ol> <li>Note that the English default message message will only be displayed if the device's language is set to English or if the device's language is set to a language that does not have a corresponding localized message.</li> <li>On Localization Messages, click the + sign and choose the desired language from the dropdown menu.</li> <li>Write the localized message for the selected language.    </li> <li>If you wish to add a message for a language that is not available on the dropdown menu:<ol> <li>Select Other.</li> <li>You will have a Manual Iso Code field, where you can pass the language ISO code. Please use two-letter ISO 639-1 or three-letter ISO 639-2 language codes with optional region or script designators.    </li> </ol> </li> </ol> </li> </ol> <p>Handling for versions under iOS 14</p> <p>Since ATT permission is not supported in versions lower than iOS 14. We will always return AUTHORIZED, if this method is called in not supported versions.</p> <p>If permission has never been requested, the system will prompt the ATT pop-up, and the result will be return on the callback. Once permission has been collected, any future call to this function will directly return the permission status without presenting the pop-up.</p>"},{"location":"games/help/privacy_manifest/","title":"Apple's Privacy Manifest files","text":""},{"location":"games/help/privacy_manifest/#introduction","title":"Introduction","text":"<p>Apple's new privacy requirements center around documenting the data collected by your app, referred to as the Privacy Manifest. This manifest provides details on the data categories collected by your app and third-party SDKs, along with the purposes behind data collection.</p> <p>Third-party SDKs must include a privacy manifest file named <code>PrivacyInfo.xcprivacy</code>. This property list records the data types collected and the reasons for using corresponding APIs.</p>"},{"location":"games/help/privacy_manifest/#do-i-need-to-update-the-manifest-when-integrating-with-usercentrics-sdk","title":"Do I need to update the manifest when integrating with Usercentrics SDK?","text":"<p>No, we do not collect any data deemed by Apple as significant for inclusion in the manifest.</p>"},{"location":"games/help/privacy_manifest/#more-information","title":"More information","text":"<p>Data collection practices are organized into categories like Contact Info, Health &amp; Fitness, Financial Info, Location, Sensitive Info, Contacts, User Content, Browsing History, Identifiers, Purchases, Usage Data, Diagnostics, and Other Data Types, each encompassing specific data types.</p> <p>The reasons for data collection that require reporting fall into the following purposed: Third-Party Advertising, Developer\u2019s Advertising or Marketing, Analytics, Product Personalization, App Functionality and Other Purposes.</p> <p>We recommend to follow Apple guidelines and privacy policies. You can find more information in their public documentation.</p>"},{"location":"games/help/privacy_manifest/#sources","title":"Sources","text":"<p>Official documentation on Privacy Manifest Files</p> <p>Official documentation on how to describe data being used</p>"},{"location":"games/integration/apply_consent/","title":"Applying Consent","text":"<p>Now that you have collected consent, let's make sure to respect the user's choices by applying consent to each SDK.</p> <p>IMPORTANT: Please review EVERY vendor's documentation to understand how each SDK expects consent to be passed.</p> <p>DO NOT assume consent is passed automatically to every SDK. Even if you are using the TCF standard or our Consent Mediation feature, please test and verify that consent is reaching the target SDKs.</p> <p>First, we need a way to match the 3<sup>rd</sup> party technologies declared in your configuration, with the SDKs running in your Game.</p>"},{"location":"games/integration/apply_consent/#when-should-you-apply-consent","title":"When should you apply consent?","text":""},{"location":"games/integration/apply_consent/#after-collecting-consent-the-first-time","title":"After collecting consent the first time","text":"<p>The first time you launch the app with the Usercentrics SDK, no consent will have been collected and <code>status.shouldCollectConsent</code> returned in <code>isReady</code> will be TRUE, letting you know that you should collect consent by showing the banner. Once a user has responded, a <code>userResponse</code> will be returned on the banner callback, which will contain the consent object. <pre><code>Usercentrics.Instance.ShowFirstLayer(&lt;UsercentricsLayout&gt;, (userResponse) =&gt; {\napplyConsent(userResponse.consents);\n});\n</code></pre></p>"},{"location":"games/integration/apply_consent/#as-early-as-possible-on-any-future-app-launch","title":"As early as possible on any future app launch","text":"<p>In any future initialization after collecting consent for the first time, you will already have a consent status stored on device, and you will only need to apply it as early as possible in the app cycle. In this case, the callback of the initialization will return FALSE for <code>status.shouldCollectConsent</code>, and you may apply consent directly.</p> <pre><code>Usercentrics.Instance.Initialize((status) =&gt; {\nif (status.shouldCollectConsent) {\n// Collect Consent\n} else {\napplyConsent(status.consents);\n}\n},(errorMessage) =&gt; {\n// Failure: Returns non-localized error\n});\n</code></pre>"},{"location":"games/integration/apply_consent/#how-to-apply-consent","title":"How to apply consent?","text":"<p>SDKs that access and process user and/or device data, are only allowed to do so, if the user has given explicit consent. In order to be compliant, please review every SDK in your Game for the following cases:</p>"},{"location":"games/integration/apply_consent/#tcf-vendors","title":"TCF Vendors","text":"<p>When using third party services that are certified as TCF Vendors, you will need to declare these services via the Global Vendor List (GVL) tab, in the Service Settings section of your TCF configuration. </p> <p></p> <p>Given you have selected your TCF Vendors in the GVL and published the changes, when a user provides consent, the SDK will generate an encoded string with the consent for these vendors according to the TCF 2.2 standard, called:</p>"},{"location":"games/integration/apply_consent/#tc-string","title":"TC String","text":"<p>As specified by the IAB, the collected consent for IAB Vendors will be encoded into a TCString and stored locally in <code>NSUserDefaults</code>(iOS) or <code>SharedPreferences</code>(Android). You may access these values with their specific Keys.</p> <p>In most cases, the Vendor SDK might automatically pull the TCString, and apply consent to itself automatically. In case the vendor SDK requires you to pass the TCString programmatically, you may use:</p> <pre><code>Usercentrics.Instance.GetTCFData((tcfData) =&gt; {\nvar tcString = tcfData.tcString;\n});\n</code></pre> <p>Consent for Non-IAB vendors NEEDS to be applied programmatically</p>"},{"location":"games/integration/apply_consent/#non-tcf-vendors","title":"Non-TCF Vendors","text":""},{"location":"games/integration/apply_consent/#how-to-match-a-service-with-an-sdk","title":"How to match a service with an SDK?","text":"<p>Every service (DPS) available in our database, such as:</p> <ul> <li>Google Firebase</li> <li>Unity Ads</li> <li>Adjust</li> <li>AppLovin</li> <li>Vungle</li> </ul> <p>will have a unique <code>templateID</code> to identify it. This ID can be found under Service Settings &gt; Data Processing Services &gt; Service Extended Information.</p> <p></p> <p>We will be using this ID to match every declared service with it's SDK.</p>"},{"location":"games/integration/apply_consent/#sdks-with-a-consent-api","title":"SDKs with a consent API","text":"<p>SDKs that support data privacy compliance, will provide an API to set the user's consent status. The API and it's behaviour will be documented by the SDK's provider.</p> <p>e.g.</p> <ul> <li>Google Analytics for Firebase's Consent Mode</li> <li>Unity Ad's Privacy consent and data API</li> <li>AppLovin's Privacy API</li> </ul> <p>Regulation dedicated APIs</p> <p>Please note that most APIs are dedicated for a specific regulation. e.g. GDPR for Europe, CCPA/CPRA for California, COPPA for children protection, etc. Make sure to review the documentation and apply the consent for the correct regulation.</p> <p>To apply consent to these SDKs, identify the target SDK and implement the consent API as documented:</p> <pre><code>private void applyConsent(List&lt;UsercentricsServiceConsent&gt; consents){\nforeach (var serviceConsent in consents) {\nswitch (serviceConsent.templateId) {\ncase \"hpb62D82I\": // Unity Ads Template ID\n// UnityAdsConsentAPI.Enabled = service.consent.status;\nbreak;\ncase \"YYyyYyYYY\": // Other SDK Template ID\n// Pass consent to framework with service.status\nbreak;\ndefault:\n// Log a warning if a service was not caught or do nothing\nbreak;\n}\n}\n}\n</code></pre> <p>Not all APIs are created equal</p> <p>Please make sure you read through each documentation, as many providers might require other steps to fully be complaint.</p>"},{"location":"games/integration/apply_consent/#sdks-without-a-consent-api","title":"SDKs without a consent API","text":"<p>For SDKs that track user/device data and do not offer a consent API, the only solution is to not initialize those SDKs, when a user did not provide consent.</p> <pre><code>private void applyConsent(List&lt;UsercentricsServiceConsent&gt; consents){\nforeach (var serviceConsent in consents) {\nswitch (serviceConsent.templateId) {\ncase \"x-XXXxXx\": // Template ID\n// Only initialize an SDK if consent has been given\nif (service.status) { initializeSDK() }\nbreak;\ncase \"YYyyYyYYY\": // Other SDK Template ID\n//Initialize framework based on service.status\nbreak;\ndefault:\n// Log a warning if a service was not caught or do nothing\nbreak;\n}\n}\n}\n</code></pre>"},{"location":"games/integration/collect-consent/","title":"Collecting Consent with Usercentrics UI","text":"<p>Usercentrics UI is a native UI component designed to own all the complexity of compliance, while also allowing different levels of customization.</p> <p>This component consists of 2 Layers:</p> <p></p>"},{"location":"games/integration/collect-consent/#first-layer","title":"First Layer","text":"<p>The First Layer is designed to be friendly to end-users, compact and highly customizable. This layer can be presented in 3 different ways:</p> PopupSheetFull <p></p> <p></p> <p></p> <p>Recommendation</p> <p>Use the First Layer when collecting consent for the first time or when prompting updates to the consent services. Remember that user's will be able to navigate from the First Layer to the Second Layer.</p> <p>To present the First Layer, simply call <code>showFirstLayer()</code> from a <code>Usercentrics</code> instance. Once the user provides their consent, a userResponse object will be returned.</p> <pre><code>Usercentrics.Instance.ShowFirstLayer(&lt;UsercentricsLayout&gt;, (userResponse) =&gt; {\n// Handle userResponse\n});\n</code></pre>"},{"location":"games/integration/collect-consent/#second-layer","title":"Second Layer","text":"<p>The Second Layer is designed to own all the complexity of compliance, declare all legally required information and allow for granular choices.</p> <p></p> <p>Recommendation</p> <p>Use the Second Layer to allow users to review their choices from your game settings. Allowing for review and editing of consent is part of privacy compliance.</p> <p>To present the Second Layer, similarly call <code>showSecondLayer()</code> from a <code>Usercentrics</code> instance, and . The same userResponse object will be returned here as well.</p> <pre><code>Usercentrics.Instance.ShowSecondLayer(&lt;showCloseButton&gt;, (userResponse) =&gt; {\n// Handle userResponse\n});\n</code></pre>"},{"location":"games/integration/collect-consent/#handling-userresponse","title":"Handling UserResponse","text":"<p>The <code>userResponse</code> object provided in the callback of UsercentricsUI, contains the following information:</p> Properties Type Notes consents [UsercentricsServiceConsent] List of the user's consent choices needed to apply consent. userInteraction Enum Response given by user: AcceptAll: User accepted all services, DenyAll: User denied all service. Granular: User gave a granular choice, No Interaction: User dismissed the Banner with no response. controllerId String A Usercentrics generated ID, used to identify a specific user. This value is required when using Cross-Device Consent Sharing. <p>You have successfully collected consent! \ud83d\ude80</p> <p>Now, it is fundamental that the user's privacy choices are applied to the 3<sup>rd</sup> party SDKs on you App. Please continue to Apply Consent.</p>"},{"location":"games/integration/configure/","title":"Configuring Usercentrics","text":"<p>Once you have installed the Usercentrics SDK, you will need an account to configure your consent banner.</p>"},{"location":"games/integration/configure/#configuration-id","title":"Configuration ID","text":"<p>You may configure Usercentrics in the two following ways:</p> <p></p> <ul> <li>SettingsID: Initialize Usercentrics with a SettingsID, if you want to have one specific configuration, regardless of user location.</li> <li>RulesetID: Initialize Usercentrics with a RulesetID, if you are using GeoLocation Rules, and wish to target users based on their location.</li> </ul> Where to find a RulesetID or SettingsID? RulesetIDSettingsID <p> </p> <p></p> <p>Both values should not be used at the same time</p>"},{"location":"games/integration/configure/#device-options","title":"Device Options","text":"<p>In addition to the <code>SettingsID</code>, you may also configure the following options to control different behaviours at a device-level:</p> Property Type Notes settingsID String A Usercentrics generated ID, used to identify a unique CMP configuration. rulesetID String A Usercentircs generated ID, used to identify a bundle of CMP configurations to be used depending on the user's location. defaultLanguage String Selected based on our language selection hierarchy. This property defines the language used to render the banner.  e.g. \"en\", \"de\", \"fr\". version String To freeze the configuration version shown to your users, you may pass a specific version here. You may find an overview of all versions in the Configuration Dashboard under Configuration &gt; History &gt; Settings History &gt; Version (Column) or Implementation &gt; Script Tag &gt; Version History. e.g. \"3.0.4\". Passing \"latest\" (default) will fetch the latest version of your CMP configuration. Passing \"preview\" will fetch the latest draft of your CMP configuration. timeoutMillis Int Timeout for network requests in milliseconds. We do NOT recommend overwriting this field unless absolutely necessary or for debugging reasons, as well as using any values under 5,000 ms. Default is 10,000 ms (10s). debugMode Bool Get all errors, warning and logs when running the SDK. Consent Mediation Bool Toggles the Consent Mediation feature. [Android] Disable System Back Button Bool Toggles the system back button of the device. [Android] Status Bar Color String Edit the color (using hexadecimal string) of the status bar when the banner is displayed. <p>These options will be available on the Usercentrics (Script) menu in your Unity IDE.</p> <p></p>"},{"location":"games/integration/configure/#language-selection-hierarchy","title":"Language Selection Hierarchy","text":"<p>The SDK uses the following hierarchy, when deciding which language to load on init:</p> <p></p> <p>On first init, Default Language<sup>1</sup> <sup>2</sup> will have first priority, then Device language<sup>1</sup> <sup>2</sup> and finally a hard default to the first language available in your configuration. Once a language has been selected, it will be stored. Any following SDK initializations will use the Stored Language <sup>3</sup>.</p>"},{"location":"games/integration/configure/#tcf-special-cases","title":"TCF Special Cases","text":"<p>When implementing the TCF Framework, it's important to note that Usercentrics does not manage all the translations. This responsibility falls to the IAB, the institution that owns the Framework.</p> <p>If a language is chosen in the Admin Interface that is not supported by the IAB, it will not appear in the language selector popup.</p> <p>To ensure a seamless integration, verify your desired language against the IAB's official list of supported languages at IABs official list before launching the Banner in production. This proactive step is crucial for maintaining compliance and ensuring a smooth user experience.</p> <p>Dialects are supported and automatically used</p> <p>If the language you pick in the Admin Interface has different dialects and the IAB doesn't support them, we'll automatically select the main dialect. This way, users won't miss out on seeing their language choice.</p> <ol> <li> <p>To be supported, a language needs to be added and set as visible in the Admin Interface, under Configuration &gt; Setup &gt; Language Settings.\u00a0\u21a9\u21a9</p> </li> <li> <p>This value will only be checked during the first SDK initialized. Afterwards, the stored languages will be used.\u00a0\u21a9\u21a9</p> </li> <li> <p>If a user explicitly selects a new language in the Usercentrics UI, or the language is changed programmatically after init, the stored languages will be updated and take priority in the future.\u00a0\u21a9</p> </li> </ol>"},{"location":"games/integration/initialize/","title":"Initializing Usercentrics","text":"<p>Before we get started with the integration, let's review some basics on when to initialize Usercentrics and legal requirements.</p>"},{"location":"games/integration/initialize/#when-to-present-the-banner","title":"When to present the banner?","text":"<p>In general, you are free to decide when to present the banner to your users. e.g. Right after app launch, after login, during app onboarding, etc.</p> <p>There are only 2 requirements when deciding when to do this:</p> <p>Requirement 1</p> <p>Do NOT enable any data tracking from 3<sup>rd</sup> party services/SDKs before a user has given explicit consent. This would otherwise be a breach of data protection regulations, which can result in heavy fines.</p> <p>Requirement 2</p> <p>Don't forget Requirement 1. </p>"},{"location":"games/integration/initialize/#initializing-the-sdk","title":"Initializing the SDK","text":"<p>There are two ways you can initialize the SDK:</p>"},{"location":"games/integration/initialize/#auto-init","title":"Auto Init","text":"<p>Use Case</p> <p>Use Auto Init to present the banner automatically when a scene starts. This integration only supports using our Usercentrics UI, which can be customized via our Configuration Dashboard. To have more control over when to show the banner, please continue to Programmatic Init.</p> <ol> <li>Enable Auto Initialize in the Inspector Tab. When the Scene is shown for the first time, the consent banner will appear automatically when needed. </li> </ol> <p></p> <p>Done! \ud83d\ude80 The SDK will now be initialized when the scene starts. Please continue to Apply Consent to finish the integration.</p>"},{"location":"games/integration/initialize/#programmatic-init","title":"Programmatic Init","text":"<p>Use Case</p> <p>Use Programmatic Init to have control over when to present the banner in a given scene. This integration supports creating your own Banner, which can unlock a much higher performance for opt-in rates.</p> <p>Disable Auto Initialize</p> <p>For a custom integration, please make sure Auto Initialize is disabled.</p>"},{"location":"games/integration/initialize/#steps","title":"Steps","text":"<p>Import <code>Usercentrics</code> to the Scene      <pre><code>using Unity.Usercentrics;\n</code></pre></p> <p>On Scene start, call <code>Initialize()</code> from a <code>Usercentrics</code> instance. On success, evaluate <code>status.shouldCollectConsent</code>, examples:</p> SettingsIDRulesetID <pre><code>Usercentrics.Instance.Initialize((status) =&gt; {\nif (status.shouldCollectConsent) { // Collect Consent\n}\nelse\n{\n// Apply Consent with status.consents\n}\n},(errorMessage) =&gt; {\n// Failure: Returns non-localized error\n});    </code></pre> <pre><code>Usercentrics.Instance.Initialize((status) =&gt; {\n\nif (status.geolocationRuleset.bannerRequiredAtLocation == false)\n{\nreturn;\n}\n\nif (status.shouldCollectConsent)\n{ // Collect Consent\n} else\n{\n// Apply Consent with status.consents\n}\n\n},(errorMessage) =&gt; {\n// Failure: Returns non-localized error\n});    </code></pre> <p>Handling <code>status.shouldCollectConsent</code></p> <p><code>shouldCollectConsent</code> will let you know if you should present the banner. e.g If consent has never been collected, or if the banner needs to be shown again do to changes on your configuration.</p> <p>If consent has already been collected, you can simply apply the consent given, which will be available in <code>status.consent</code></p> <p>Present the Consent Banner when <code>status.shouldCollectConsent</code> is TRUE or apply consent if <code>status.shouldCollectConsent</code> is FALSE. </p> <p>Handle init errors</p> <p>In case of an error on init (most likely caused by connection issues), please catch this error and continue the user flow as expected. We recommend to treat this as if the user did not give consent. The next time the SDK is initialized correctly you should collect consent normally.</p>"},{"location":"games/integration/initialize/#presenting-the-consent-banner","title":"Presenting the Consent Banner","text":"<p>In order to present the banner, we offer different options depending on your needs:</p>"},{"location":"games/integration/initialize/#usercentricsui","title":"UsercentricsUI","text":"<p>Use our out-of-the-box UI component, that owns all the complexity of compliance, and can be customized via our Configuration Dashboard. Continue to Collecting Consent with UsercentricsUI.</p> <p></p>"},{"location":"games/integration/initialize/#build-you-own-banner","title":"Build you own Banner","text":"<p>Build a Banner that fits your game design language, and let us take care of the rest. Continue to Build your own UI.</p> <p></p> <p>Only for IAB TCF 2.2 certified customers</p> <p>Currently you can only use this solution if you are building a Banner that adheres to the IAB's TCF 2.2 Standard. For this you will need to be certified as a CMP by the IAB.</p>"},{"location":"games/integration/initialize/#hybrid","title":"Hybrid","text":"<p>If you need a \"in between\" solution, we encourage you to mix these two approaches to get the best of both worlds. e.g. Create your own first layer banner, and let UsercentricsUI take care of the complexity on a second layer.</p>"},{"location":"games/integration/install/","title":"Installing the Usercentrics Unity Package","text":""},{"location":"games/integration/install/#download","title":"Download","text":"<p>Download the latest release of our Unity Package.</p> Static Linkage Support for iOS <p>Because we use ExternalDependencyManager, the project output when building for iOS, will be a CocoaPods workspace, which offers an option to Link frameworks statically. If you need support for Static Linkage on iOS, please download the latest package with the <code>-static</code> suffix. *e.g. <code>Usercentrics-2.X.X-static.unitypackage</code>.</p>"},{"location":"games/integration/install/#install","title":"Install","text":"<p>Prerequisites</p> <ul> <li>Android 5.0 (API 21), or higher, for the Minimum API Level and Android 12 (API 31) for the Target API Level</li> </ul> <ul> <li>Java version 8 or 11 depending on the Unity Version</li> <li>Kotlin 1.7 or higher</li> <li>iOS 11 or higher</li> </ul>"},{"location":"games/integration/install/#on-unity-ide","title":"On Unity IDE","text":"<ol> <li> <p>Drag and drop <code>Usercentrics.unitypackage</code> into your Unity project. Alternatively, you can select the package from the menu <code>Assets &gt; Import Package &gt; Custom Package</code></p> <p>ExternalDependencyManager</p> <p>If you have already imported ExternalDependencyManager for Unity in your project, you can deselect it in the pop-up, to keep your previous configuration.</p> <p></p> </li> <li> <p>Click on \"Import\".</p> </li> <li>From <code>Usercentrics/Prefabs</code>, drag <code>Usercentrics</code> prefab into your Scene, this will represent the Game Object for our Banner.</li> </ol> <p></p> <p>The name of this object needs to be <code>Usercentrics</code>.</p> <p>Usercentrics Package is now installed, lets continue to Configure! \ud83d\ude80</p>"},{"location":"games/integration/install/#troubleshooting","title":"Troubleshooting","text":"UnityiOS SetupAndroid Setup <p>Unity Editor is NOT Supported</p> <p>The Unity Editor is not supported at the moment. In order to test and debug the CMP you will need to run the project on a simulator or real device.</p> <p>Supporting iOS &amp; Xcode</p> <p>Cocoapods must be installed for iOS builds to work, check their installation guide.</p> <p>When opening the project built by Unity, you should always select the .xcworkspace file created by Cocoapods.</p> <p>Dependencies</p> <p>When Android is selected as Build Platform, the dependency manager will ask you to download the dependencies that Usercentrics needs. We recommend enabling Android Auto-resolution to handle this. Make sure you have downloaded all Android Build Support Modules including OpenJDK.</p> <p>Internet Access is Required</p> <p>The Usercentrics SDK needs internet in order to initialize. Make sure you enable a required connection in your Android Player Settings. File &gt; Build Settings &gt; Android (selected) &gt; Player Settings &gt; Other Settings &gt; Internet Access &gt; Required</p> <p>ExternalDependencyManager and Building</p> <p>When using this plugin for the first time, a popup will appear asking if you want to enable \"Android Auto-resolution\", we highly recommend to enable, since it's natural for some Android libraries have conflicting dependencies. Enabling this \"auto-resolution\", the plugin will take care of everything for you.</p> <p></p> <p>Dependency conflicts (Duplicate classes) or ExternalDependencyManager fails to resolve dependencies</p> <p>If the auto-resolution process fails to resolve any conflicts, we advise you to modify your project's build configuration for Android. By doing so, you will not depend solely on the ExternalDependencyManager to download all dependencies. Instead, you allow Gradle to handle the resolution of dependencies and any emerging conflicts.</p> <p>To do that you just need to follow these steps:</p> <ul> <li> <p>Go to File -&gt; Build Settings -&gt; Switch platform to Android</p> </li> <li> <p>Go to Player Settings</p> </li> <li> <p>Scroll to the last section \"Publishing Settings\"</p> </li> <li> <p>Enable \"Custom Main Gradle Template\"</p> </li> <li> <p>Enable \"Custom Gradle Properties File\"</p> </li> <li> <p>Save &amp; close</p> </li> <li> <p>Go to Assets -&gt; External Dependency Manager -&gt; Android Resolver -&gt; Settings</p> </li> <li> <p>Make sure \"Patch mainTemplate.gradle\" &amp; \"Patch gradleTemplate.properties\" are both enabled</p> </li> </ul>"},{"location":"games/optimization/ab-testing/","title":"A/B Testing","text":"<p>BETA</p> <p>This feature is currently in beta, and only available starting v2.10.0. Please make sure you validate the functionality before pushing to production.</p> <p>In order to optimize the performance of your Consent Banner, we have enabled A/B Testing capabilities, to make your life easier.</p>"},{"location":"games/optimization/ab-testing/#enabling-ab-testing","title":"Enabling A/B Testing","text":"<p>Go to the Implementation section in your Configuration Dashboard and select the A/B Testing tab. Here you will find a toggle to enable the feature.</p> <p></p> <p>Once enabled, you will see the the A/B Testing configuration options.</p>"},{"location":"games/optimization/ab-testing/#using-usercentrics","title":"Using Usercentrics","text":"<p>Activate with Usercentrics</p> <p>To use the Usercentrics tools for A/B Testing, please select the checkbox at the bottom of the A/B Testing configuration options: \"Activate with Usercentrics\".</p>"},{"location":"games/optimization/ab-testing/#defining-variants","title":"Defining Variants","text":"<p>Using the JSON input field, define the variants names with an empty values.</p> <pre><code>{\n\"variantA\": {},\n\"variantB\": {}\n}\n</code></pre> <p>Now, in your project, fetch the variant names programmatically, and return a Banner Configuration for each one using the BannerSettings object:</p> <pre><code>string variant = Usercentrics.Instance.getABTestingVariant();\n\nvar bannerSettings = new BannerSettings(variantName: variant);\n\nswitch(variant) {\ncase \"variantA\":\nUsercentrics.Instance.ShowFirstLayer(bannerSettings, (userResponse) =&gt; {\n// Handle userResponse\n});\nbreak;\ncase \"variantB\":\nUsercentrics.Instance.ShowFirstLayer(bannerSettings, (userResponse) =&gt; {\n// Handle userResponse\n});\nbreak;\ndefault:\nUsercentrics.Instance.ShowFirstLayer(bannerSettings, (userResponse) =&gt; {\n// Handle userResponse\n});\nbreak;\n}\n</code></pre> <p>Always fallback to a Default</p> <p>Always have a fallback default configuration. This will allow you to turn off, or change the variants you are testing dynamically.</p> <p>Even distribution</p> <p>The distribution between variants will be even. e.g. 50:50 for two variants, 33:33:33 for three variants.</p>"},{"location":"games/optimization/ab-testing/#tracking-results","title":"Tracking Results","text":"<p>Once you have generated variant interactions, all results will be available in the Analytics section of your Usercentrics Dashboard.</p> <p>Interaction Analytics</p> <p>Overview your Interaction and Acceptance rates by filtering for specific Variants.</p> <p></p> <p>Comparison Analytics</p> <p>Get a direct comparison of interactions and acceptance rates for each variant.</p> <p></p> <p>Download Raw Data</p> <p>For in-depth insights and custom analysis, we recommend downloading a raw-data report available at the bottom of the Interaction Analytics section. In this report, an additional \"variant\" column will tell you which variant was used for each entry in the data.</p> <p></p> <p>Keep A/B Testing feature ON</p> <p>To see variant analytics data, the A/B Testing feature needs to be ON. If you wish to stop running specific variants. Just delete the variants in the JSON input field.</p>"},{"location":"games/optimization/ab-testing/#using-a-third-party-tool","title":"Using a Third Party Tool","text":"<p>Activate with third-party tool</p> <p>To use a third-party tool for A/B Testing, please select the checkbox at the bottom of the A/B Testing configuration options: \"Activate with third-party tool\".</p>"},{"location":"games/optimization/ab-testing/#defining-variants_1","title":"Defining Variants","text":"<p>When using a third-party tool, you may pass variant names directly via the Customization API as such:</p> <pre><code>string variant = AnyABTestTool.aBTestingVariant;\n\nvar bannerSettings = new BannerSettings(variantName: variant);\n\nswitch(variant) {\ncase \"variantA\":\nUsercentrics.Instance.ShowFirstLayer(bannerSettings, (userResponse) =&gt; {\n// Handle userResponse\n});\nbreak;\ncase \"variantB\":\nUsercentrics.Instance.ShowFirstLayer(bannerSettings, (userResponse) =&gt; {\n// Handle userResponse\n});\nbreak;\ndefault:\nUsercentrics.Instance.ShowFirstLayer(bannerSettings, (userResponse) =&gt; {\n// Handle userResponse\n});\nbreak;\n}\n</code></pre> Supporting your self-built UI <p>If you have your own UI and you want Usercentrics to know which A/B Testing variant from your Third-Party Tool you are using, so that the events you track in the Usercentrics analytics API (<code>track()</code>) have the variant data. Then you have to inject the variant programmatically with this API: <pre><code>Usercentrics.Instance.setABTestingVariant(variant: &lt;VariantName&gt;)\n</code></pre></p>"},{"location":"games/optimization/ab-testing/#tracking-results_1","title":"Tracking Results","text":"<p>Implement the tracking mechanism of your third-party tool, when processing the <code>UsercentricsConsentUserResponse</code>, available in the callback of the banner presentation.</p>"},{"location":"games/optimization/customization/","title":"Customization","text":"<p>User experience is a relevant variable when collecting consent. We highly encourage you to take advantage of our customization features, in order to provide a branded and user friendly banner to your users.</p>"},{"location":"games/optimization/customization/#remote-customization","title":"Remote Customization","text":"<p>Use our Remote Customization options, for a quick out-of-the-box branding that covers all the basics.</p> <p></p> <p>In the Appearance section of our Admin Interface, you will find the Layout and Styling tabs:</p> LayoutStyling <p>Under Display Options, you will find the following options:</p> <ul> <li>Hide \"Deny All\" button</li> <li>Hide Language switch</li> </ul> <p>Showing the Language Switch</p> <p>The language switch will only be shown in the Second Layer, and both of the following requirements need to be fulfilled:</p> <ul> <li>Multiple visible languages are added in the Configuration section of the Admin Interface.</li> <li>The \"Hide language switch\" option is disabled in the Appearance section of the Admin Interface, under the \"Layout\" tab.</li> </ul> <p>Colors: Set individual colors by providing a specific HEX or using our color picker for the following banner elements:</p> <ul> <li>Background Color</li> <li>Text Color</li> <li>Links Color</li> <li>Tab Color</li> <li>Accent Color</li> <li>Button Colors</li> <li>Tabs Color</li> <li>Toggle Colors</li> </ul> <p></p> <p>Text Font and Size: Only supported via Programmatic Customization.</p> <p>Logo: Set an image to appear at the top of your banner by providing a URL, as well as it's position:</p> <p></p> Supported URL Image Formats <p>When passing a URL to fetch an image, the SDK supports: iOS: PNG and JPEG. Android: PNG, JPEG, BMP, GIF and WebP.</p> <p></p> <p>Any changes to the properties available here, will only take effect with a new init of the SDK and clean/updated cache.</p> <p>Forcing configuration updates during Testing</p> <p>You may force a configuration update by using the reset() function, or by deleting the app and installing it again. We only recommend doing this when integrating and testing the SDK.</p> <p>Configuration updates in Production</p> <p>The SDK caches essential data on device after the first successful init, in order to be efficient with resources and provide offline capabilities. This cache is kept for several days, depending on app usage. Which means user's will not get \"Published\" changes from the Admin Interface immediately, but we can guaranty changes will take effect for 100% of your user base latest within a week.</p>"},{"location":"games/optimization/customization/#programmatic-customization","title":"Programmatic Customization","text":"<p>Use our Programmatic Customization API, to create advance banner designs and run-time variants. Using this API unlocks features like A/B Testing.</p> Compliance Note <p>Because the Programmatic API enables many customization options, it is important that your DPO (Data Protection Officer) reviews and approves the compliance of your design:</p> <p>e.g.</p> <ul> <li>A user should always have clear options to accept, deny or save granular choices available as call to actions in the 1<sup>st</sup> or 2<sup>nd</sup> layer.</li> <li>The First Layer should always allow a path to the Second Layer.</li> <li>Calls to action should be equally prominent.</li> </ul> <p></p> <p>When creating the UsercentricsUI banner, a <code>BannerSettings</code> property will be available for you to customize any element of the banner.</p> C# <pre><code>var bannerSettings = BannerSettings(generalStyleSettings: new GeneralStyleSettings(),\nfirstLayerStyleSettings: new FirstLayerStyleSettings(),\nsecondLayerStyleSettings: new SecondLayerStyleSettings());\n</code></pre>"},{"location":"games/optimization/customization/#general-style-settings","title":"General Style Settings","text":"<p>Style Settings values overwrite Remote Style values</p> Properties Type Notes androidDisableSystemBackButton Bool Disable Android system back button. androidStatusBarColor String Android status bar color represented in HEX. textColor Color Edit the text color for both First Layer and Second Layer. layerBackgroundColor Color Edit the color of the First Layer, and Header and Footer of the Second Layer. layerBackgroundSecondaryColor Color Edit the color of the background in the content section. linkColor Color Edit the color of all available links. tabColor Color Edit the color of the Category and Services Tabs. bordersColor Color Edit the color for the borders of the Category and Services content section, Category and Service components and Service Information Tags. toggleStyleSettings Object Edit the toggle colors for: Active, Inactive and Disabled states. logoImageUrl String Pass an image URL to be rendered as a logo in both First Layer and Second Layer. links Enum Customize the visibility of the legal links: .both (default), .firstLayerOnly, .secondLayerOnly and .hidden."},{"location":"games/optimization/customization/#first-layer-style-settings","title":"First Layer Style Settings","text":"Properties Type Notes layout Enum Select the Layout of the First Layer: Sheet, Popup Center, Popup Bottom, Full. headerImage Object Customize the layout of the image at the top of your banner: .logo (default), .extended or .hidden. title Object Customize the appearance of the title label: Text Size, Text Color and Text Alignment. message Object Customize the appearance of the message label: Text Size, Text Color, Text Alignment, Link Text Color and Link Text Underline. buttonLayout Object Customize the layout of the action buttons: .column (default), .grid, .row. You may also pass an array of [ButtonSettings] to define the order and appearance of the buttons. backgroundColor String Edit the color of the First Layer background in HEX. cornerRadius Float Edit the corner radius of the banner. overlayColor String Edit the color of the First Layer overlay in HEX. overlayAlpha Float Edit the alpha of the overlay color."},{"location":"games/optimization/customization/#second-layer-style-settings","title":"Second Layer Style Settings","text":"Properties Type Notes showCloseButton Bool Show a close button in the Second Layer to allow users to dismiss the banner without editing consent."},{"location":"tv/config/","title":"Configuring the Banner","text":""},{"location":"tv/config/#remote-customization","title":"Remote Customization","text":""},{"location":"tv/config/#logo","title":"Logo","text":"<p>Set an image to appear at the top of your banner by providing a URL:</p> <p></p> <p>Supported URL Image Formats</p> <p>When passing a URL to fetch an image, the SDK supports: iOS: PNG and JPEG. Android: PNG, JPEG, BMP, GIF and WebP.</p>"},{"location":"tv/config/#programmatic-customization","title":"Programmatic Customization","text":""},{"location":"tv/config/#bannersettings","title":"BannerSettings","text":""},{"location":"tv/config/#logo_1","title":"Logo","text":"tvOSAndroidTV <pre><code>import UsercentricsUI\n\nlet bannerSettings = BannerSettings(logo: &lt;UIImage?&gt;)\nlet banner = UsercentricsBanner(bannerSettings: bannerSettings)\n</code></pre> <pre><code>import com.usercentrics.sdk.ui.tv.BannerSettings\nimport com.usercentrics.sdk.ui.tv.UsercentricsBanner\nimport com.usercentrics.sdk.UsercentricsImage\n\nval image1 = UsercentricsImage.ImageDrawableId(&lt;Int&gt;)\nval image2 = UsercentricsImage.ImageDrawable(&lt;Drawable&gt;)\nval image3 = UsercentricsImage.ImageBitmap(&lt;Bitmap&gt;)\nval image4 = UsercentricsImage.ImageUrl(&lt;String&gt;)\n\nval bannerSettings = BannerSettings(\nlogo = image,\n)\n\nval banner = UsercentricsBanner(\ncontext = &lt;Context&gt;,\nsettings = bannerSettings\n)\n</code></pre>"},{"location":"tv/config/#font","title":"Font","text":"AndroidTV <pre><code>import com.usercentrics.sdk.ui.tv.BannerSettings\nimport com.usercentrics.sdk.ui.tv.UsercentricsBanner\n\nval font1 = Typeface.createFromAsset(&lt;Context&gt;.assets, &lt;String&gt;)\nval font2 = ResourcesCompat.getFont(&lt;Context&gt;, &lt;Int&gt;)\n\nval bannerSettings = BannerSettings(\nfont = font1,\n)\n\nval banner = UsercentricsBanner(\ncontext = &lt;Context&gt;,\nsettings = bannerSettings\n)\n</code></pre>"},{"location":"tv/install/","title":"Installing the TV SDK","text":"tvOSAndroidTV"},{"location":"tv/install/#requirements","title":"Requirements","text":"<ul> <li>tvOS 11.0 or higher</li> </ul>"},{"location":"tv/install/#using-cocoapods","title":"Using CocoaPods","text":"<ol> <li> <p>On your Podfile, add the following line:     <pre><code>platform :tvos, '11.0'\nuse_frameworks!  \n\npod 'UsercentricsUI'\n</code></pre></p> </li> <li> <p>On the root directory of your project, run the following command to install the pod.     <pre><code>pod install\n</code></pre></p> </li> <li> <p>Open your .xcworkspace file.</p> </li> <li>\ud83d\ude80 You are ready to start the SDK integration.</li> </ol>"},{"location":"tv/install/#using-swift-package-manager-spm","title":"Using Swift Package Manager (SPM)","text":"<ol> <li> <p>On Xcode, Select File &gt; Swift Packages &gt; Add Package Dependency.</p> </li> <li> <p>Enter the package repository URLs:     <pre><code>https://bitbucket.org/usercentricscode/usercentrics-spm-ui\n</code></pre></p> </li> <li> <p>Select the version you would like to use. We recommend sticking to \"Up to Next Major\" with the latest release as minor version.</p> </li> <li>\ud83d\ude80 You are ready to start the SDK integration.</li> </ol>"},{"location":"tv/install/#requirements_1","title":"Requirements","text":"<ul> <li>Android 4.1 (API 16) and higher</li> </ul> <p>Android minimum SDK Version</p> <p>Support for versions lower than Android 5.0 (API Level 20) is planned to be removed in releases starting from end of March/24</p>"},{"location":"tv/install/#using-gradle","title":"Using Gradle","text":"<ol> <li> <p>Add the dependency to your app's build.gradle:     <pre><code>dependencies {\nimplementation \"com.usercentrics.sdk:usercentrics-tv\"\n}\n</code></pre></p> </li> <li> <p>\ud83d\ude80 You are ready to start the SDK integration. </p> </li> </ol>"},{"location":"tv/intro/","title":"The Usercentrics TV SDK","text":"<p>We have officially launched Consent Management Platform support for TV platforms: tvOS and AndroidTV.</p> <p>Support for Tizen (Samsung), webOS Smart TV (LG) and Roku will be coming next.</p> <p></p> <p>Taking advantage of the native design language of each platform, our new TV SDK brings all the features of our CMP to a bigger screen. With a really simple integration and out-of-the-box solution, we are confident we are continuing our high standard of developer experience and ease of integration.</p> <p>Please note that there are some differences when integrating the TV CMP, and we have highlighted them in this section. For the rest, please follow our standard documentation.</p>"},{"location":"tv/present/","title":"Presenting the TV Banner","text":"<p>You can decide to present the First Layer or Second Layer as you deem necessary for your user experience. However, we recommend to:</p> <ul> <li>Use the First Layer when collecting consent for the first time. Remember that user's will be able to navigate from the First Layer to the Second Layer.</li> <li>Use the Second Layer for when customers want to review their choices. e.g. In your app's settings.</li> </ul>"},{"location":"tv/present/#presenting-the-first-layer","title":"Presenting the First Layer","text":"tvOSAndroidTV <pre><code>import UsercentricsUI\n\nlet banner = UsercentricsBanner()\nbanner.showFirstLayer(hostView: self // Host UIViewController) { userResponse in\n// Handle userResponse\n}\n</code></pre> <pre><code>import com.usercentrics.sdk.ui.tv.BannerSettings\nimport com.usercentrics.sdk.ui.tv.UsercentricsBanner\n\nval banner = UsercentricsBanner(\ncontext = &lt;Context&gt;,\nsettings = &lt;BannerSettings?&gt;\n)\nbanner.showFirstLayer { userResponse -&gt;\n// Handle userResponse\n}\n</code></pre> <p>Use a valid Context</p> <p>We are using the <code>Dialog</code> Android API for the Banner implementation.  It is recommended to use a <code>Context</code> that is an <code>Activity</code> or derived/wrapper from it. Note that the <code>Activity</code> has to be alive for the dialog to be displayed.</p>"},{"location":"tv/present/#presenting-the-second-layer","title":"Presenting the Second Layer","text":"tvOSAndroidTV <pre><code>import UsercentricsUI\n\nlet banner = UsercentricsBanner()\nbanner.showSecondLayer(hostView: self // Host UIViewController) { userResponse in\n// Handle userResponse\n}\n</code></pre> <pre><code>import com.usercentrics.sdk.ui.tv.BannerSettings\nimport com.usercentrics.sdk.ui.tv.UsercentricsBanner\n\nval banner = UsercentricsBanner(\ncontext = &lt;Context&gt;,\nsettings = &lt;BannerSettings?&gt;\n)\nbanner.showSecondLayer { userResponse -&gt;\n// Handle userResponse\n}\n</code></pre> <p>Use a valid Context</p> <p>We are using the <code>Dialog</code> Android API for the Banner implementation.  It is recommended to use a <code>Context</code> that is an <code>Activity</code> or derived/wrapper from it. Note that the <code>Activity</code> has to be alive for the dialog to be displayed.</p>"},{"location":"tv/present/#handling-user-response","title":"Handling User Response","text":"<p>After a user provides their consent choices, you will receive a UsercentricsConsentUserResponse object in the banner presentation callback. This object will provide you with all the information you need in order to apply consent, make decisions based on the user's interaction or store the user's ControllerID if you wish to support Cross-Device Consent Sharing.</p>"},{"location":"web/browsers-specifications/","title":"Browser Support Specifications","text":"<p>Loader.js supports desktop &amp; mobile browsers starting from the following versions:</p>"},{"location":"web/browsers-specifications/#desktop-browsers","title":"Desktop Browsers","text":"Browser Version  Chrome 80  Edge 79  Firefox 78  Safari 13"},{"location":"web/browsers-specifications/#mobile-browsers","title":"Mobile Browsers","text":"Operating System Browser Version  Android Google ChromeFirefox Android 7+  Android 7+  iOS SafariChromeFirefox iOS 13.0iOS 13.0iOS 13.0"},{"location":"web/intro/","title":"Usercentrics Web CMP v3 coming soon...","text":"<p>We are working on something special for you.</p> <p>In the meanwhile, please continue to our Web CMP v2 documentation.</p>"},{"location":"web/releases/","title":"Releases","text":""},{"location":"web/releases/#release-history","title":"Release History","text":"<p>The following table lists the details of the latest Usercentrics Web releases:</p> Version Release Date Release Notes 1.0.0 TBD <ul><li>First V3 release</li></ul>"},{"location":"web/v3/","title":"Why V3?","text":"<p>V2 was created with the Browser SDK and minimal package size in mind. While the SDK proved to be a good idea, the package size of both UI &amp; SDK increased over time.</p> <p>This creates performance issues and makes it difficult to achieve good Core Web Vitals / Lighthouse results.</p> <p>The CMP V3 addresses and solves these problems.</p>"},{"location":"web/v3/#how-are-the-improvements-achieved","title":"How are the improvements achieved?","text":""},{"location":"web/v3/#v2","title":"V2","text":"<p>All business logic reside within the Browser SDK.</p> <p>The information is spread across multiple files, representing multiple domains of business logic (core, dps, settings, translation, tcf vendors list, etc.).</p>"},{"location":"web/v3/#v3","title":"V3","text":"<p>Critical parts of the above-mentioned business logic have been moved to a backend API, which produces tailored responses for all of our customers.</p> <p>This API returns many of the actual properties that were previously calculated on the SDK, in one cacheable JSON response. </p>"},{"location":"web/v3/#performance-metrics","title":"Performance Metrics","text":"<p>V3 shows great improvements in all business-critical areas: In comparison with V2, V3 reduces the kB transferred in the client by ~70% and the amount of network requests performed by ~60%. The smaller fingerprint of this CMP, results in better Lighthouse scores &amp; Core Web Vitals.</p>"},{"location":"web/features/a-b-testing/available-events/","title":"Available Events","text":"<p>This section is most likely only relevant for setting up your A/B test with an external tool. No additional events need to be defined when using our predefined UI in combination with the internal A/B testing feature.</p> <p>As previously described, the UC_UI_CMP_EVENT was created to be triggered by the most important actions through the Consent Management Platform, enabling you to listen to user interactions and compare the different variants.</p> <p>Within this new Custom Event, you can add an object that will specify one event type that you need to test. You can do this by using one of these:</p> <pre><code>{ type: event_type,\nsource: \u2018FIRST_LAYER\u2019 | \u2018SECOND_LAYER' | 'PRIVACY_BUTTON \u2026 }\n</code></pre> <p>Where the <code>event_type</code> can be:</p> Event Name Description <code>CMP_SHOWN</code> Event triggered when the CMP is shown <code>ACCEPT_ALL</code> Event triggered by clicking the Accept All button <code>DENY_ALL</code> Event triggered by clicking the Deny All button <code>SAVE</code> Event triggered by clicking the Save button <code>MORE_INFORMATION_LINK</code> Event triggered by clicking the More Information button or link <code>IMPRINT_LINK</code> Event triggered by clicking the Imprint link <code>PRIVACY_POLICY_LINK</code> Event triggered by clicking the Privacy Policy link <code>CCPA_TOGGLES_ON</code> Event triggered by turning on the CCPA toggle <code>CCPA_TOGGLES_OFF</code> Event triggered by turning off the CCPA toggle <p>We\u2019ve created a code example to make these custom events easy to understand and access.</p> <pre><code>window.addEventListener('UC_UI_CMP_EVENT', (data) =&gt; {\nconsole.log(`TEST: source =&gt; ${data.detail.source} &amp;&amp; type =&gt; ${data.detail.type}`) });\n</code></pre> <p>For kameleoon, the Custom event would follow this approach where we listen to the event \u201ca user clicked on the Accept All button\u201d and then forward information to the AB Testing Tool Kameleoon (here called a goal, may differ between tools).</p> <pre><code>//Example for Kameleoon\nwindow.addEventListener('UC_UI_CMP_EVENT', (data) =&gt; {\nconsole.log(`TEST: source =&gt; ${data.detail.source} &amp;&amp; type =&gt; ${data.detail.type} &amp;&amp; Variant =&gt; ${data.detail.abTestVariant}`) if (data.detail.type === \"ACCEPT_ALL\") Kameleoon.API.Goals.processConversion(goalID)\n});\n</code></pre> <p>In case you want to test the different user interactions only for a specific layer, you can achieve this by adding an additional condition in the code. Please add <code>&amp;&amp; data.detail.source == 'FIRST_LAYER'</code> after your event type for the first layer or <code>&amp;&amp; data.detail.source == 'SECOND_LAYER'</code> for interactions on the second layer.</p> <pre><code>//Example for Kameleoon\nwindow.addEventListener(\u2018UC_UI_CMP_EVENT\u2019, (data) =&gt; {\nconsole.log(`TEST: source =&gt; ${data.detail.source} &amp;&amp; type =&gt; ${data.detail.type} &amp;&amp; Variant =&gt; ${data.detail.abTestVariant}`)\nif (data.detail.type === \u201cACCEPT_ALL\u201d &amp;&amp; data.detail.source == \u2018FIRST_LAYER\u2019) Kameleoon.API.Goals.processConversion(goalID)\n});\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/","title":"Available Properties","text":"<p>In the following table, you will have all the available properties that we offer for the A/B testing:</p> <p>Case sensitive</p> <p>Every single property is case sensitive, so an incorrect input may lead to an unwanted result.</p> <p>TCF</p> <p>For your TCF 2.0 CMP only the specific TCF 2.0 properties can be used for A/B testing.</p>"},{"location":"web/features/a-b-testing/available-properties/#layout-style","title":"Layout style","text":"Label Property Option Example Background Color <code>customization.color.layerBackground</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{ \"variant1\": { \"customization\": { \"color\": { \"layerBackground\": \"0045A5\" } } } }</code> Text Color <code>customization.color.text</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{ \"variant1\": { \"customization\": { \"color\": { \"text\": \"000000\" } } } }</code> Link Color <code>customization.color.linkFont</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{ \"variant1\": { \"customization\": { \"color\": { \"linkFont\": \"000000\" } } } }</code> Tab Color <code>customization.color.secondLayerTab</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{ \"variant1\": { \"customization\": { \"color\": { \"secondLayerTab\": \"FAFAFA\" } } } }</code> Accent Color <code>customization.color.tabsBorderColor</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{ \"variant1\": { \"customization\": { \"color\": { \"tabsBorderColor\": \"0045A5\" } } } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"customization\": {\n\"color\": {\n\"layerBackground\": \"0045A5\",\n\"text\": \"000000\",\n\"linkFont\": \"000000\",\n\"secondLayerTab\": \"FAFAFA\",\n\"tabsBorderColor\": \"0045A5\"\n}\n}\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#first-layer-properties","title":"First Layer Properties","text":"Label Property Option Example First Layer Layout <code>firstLayer.variant</code> <code>\u201cWALL\u201d</code> (Privacy Wall) OR <code>\u201cBANNER\u201d</code> (Privacy Banner) <code>{  \"variant1\": {   \"firstLayer\": {     \"variant\": \"WALL\"   } }</code> Display Categories <code>firstLayer.isCategoryTogglesEnabled</code> <code>true or false</code> <code>{  \"variant1\": {   \"firstLayer\": {     \"isCategoryTogglesEnabled\": true   } }</code> Hide Language Switch <code>firstLayer.hideLanguageSwitch</code> <code>true or false</code> <code>{  \"variant1\": {   \"firstLayer\": {     \"hideLanguageSwitch\": true   }  } }</code> Show \"Deny All\" Button <code>firstLayer.hideButtonDeny</code> <code>true or false</code> <code>{  \"variant1\": {   \"firstLayer\": {     \"hideButtonDeny\": false   }  } }</code> More Information Trigger <code>firstLayer.secondLayerTrigger</code> <code>\"LINK\"</code> (More Information Link) or <code>\"BUTTON\"</code>(More Information Button) or <code>\"MORE_LINK_BUTTON\"</code> (More Information Link in Banner Message) <code>{  \"variant1\": {   \"firstLayer\": {     \"secondLayerTrigger\": \"BUTTON\"   }  } }</code> First Layer Background Overlay <code>firstLayer.isOverlayEnabled</code> <code>true or false</code> <code>{  \"variant1\": {   \"firstLayer\": {     \"isOverlayEnabled\": true   }  } }</code> First Layer Wall Button Alignment <code>customization.buttonAlignment</code> <code>\"VERTICAL\" or \"HORIZONTAL\"</code> <code>{ \"variant1\": { \"customization\": { \"buttonAlignment\": \"HORIZONTAL\" } } }</code> First Layer Short Message <code>firstLayer.shortMessage</code> Any Text <code>{  \"variant1\": {   \"firstLayer\": {     \"shortMessage\": \"short message example\"  } }</code> Close CMP without accepting <code>firstLayer.closeOption</code> <code>\"LINK\"</code> (Close Link) or <code>\"ICON\"</code>(Close Button) <code>{  \"variant1\": {   \"firstLayer\": {     \"closeOption\": \"LINK\"  } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example_1","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"firstLayer\": {\n\"variant\": \"WALL\",\n\"isCategoryTogglesEnabled\": true,\n\"hideLanguageSwitch\": true,\n\"hideButtonDeny\": false,\n\"secondLayerTrigger\": \"BUTTON\",\n\"isOverlayEnabled\": false,\n\"shortMessage\": \"short message example\",\n\"closeOption\": \"LINK\"\n},\n\"customization\": {\n\"buttonAlignment\": \"HORIZONTAL\"\n}\n}\n} </code></pre>"},{"location":"web/features/a-b-testing/available-properties/#first-layer-content-properties","title":"First Layer Content Properties","text":"Label Property Option Example First Layer Title <code>labels.firstLayerTitle</code> Any Text <code>{  \"variant1\": {  \"labels\": {     \"firstLayerTitle\": \"First Layer\",   }  } }</code> Banner Message <code>bannerMessage</code> Any Text <code>{  \"variant1\": {   \"bannerMessage\": \"Banner Message for First Layer&lt;br&gt;\"  } }</code> Show Short Description on Mobile and Tablet Devices <code>bannerMobileDescriptionIsActive</code> <code>true or false</code> <code>{  \"variant1\": {   \"bannerMobileDescriptionIsActive\": true  } }</code> Short Description <code>bannerMobileDescription</code> Any Text <code>{  \"variant1\": {   \"bannerMobileDescription\": \"Short Description for First Layer\"  } }</code> Read More Label <code>labels.btnBannerReadMore</code> Any Text <code>{  \"variant1\": {   \"labels\": {     \"btnBannerReadMore\": \"Read More\"   }  } }</code> Imprint URL <code>imprintUrl</code> Valid URL <code>{  \"variant1\": {   \"imprintUrl\": \"www.example.com/imprint\"  } }</code> Imprint Link Text <code>labels.imprintLinkText</code> Any Text <code>{  \"variant1\": {   \"labels\": {     \"imprintLinkText\": \"Imprint\"   }  } }</code> Privacy Policy URL <code>privacyPolicyUrl</code> Valid URL <code>{  \"variant1\": {   \"privacyPolicyUrl\": \"www.example.com/privacy-policy\"  } }</code> Privacy Policy Link Text <code>labels.privacyPolicyLinkText</code> Any Text <code>{  \"variant1\": {   \"labels\": {     \"privacyPolicyLinkText\": \"Privacy Policy\"   }  } }</code> First Layer Use Short Message <code>firstLayer.useShortMessage</code> <code>true or false</code> <code>{ \"variant1\": {   \"firstLayer\": {   \"useShortMessage\": true } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example_2","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"bannerMessage\": \"Banner Message for First Layer&lt;br&gt;\",\n\"bannerMobileDescriptionIsActive\": true,\n\"bannerMobileDescription\": \"Short Description for First Layer\",\n\"imprintUrl\": \"www.example.com/imprint\",\n\"privacyPolicyUrl\": \"www.example.com/privacy-policy\",\n\"labels\": {\n\"firstLayerTitle\": \"First Layer\",\n\"btnBannerReadMore\": \"Read More\",\n\"imprintLinkText\": \"Imprint\",\n\"privacyPolicyLinkText\": \"Privacy Policy\"\n},\n\"firstLayer\": {\n\"useShortMessage\": true\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#second-layer-properties","title":"Second Layer Properties","text":"Label Property Option Example Second Layer Layout <code>secondLayer.variant</code> <code>\"CENTER\"</code> (Privacy Settings Center) or <code>\"SIDE\"</code> (Privacy Settings Side) <code>{  \"variant1\": {   \"secondLayer\": {     \"variant\": \"CENTER\"   }  } }</code> Privacy Settings Side Position <code>secondLayer.side</code> <code>\"LEFT\"</code>(Position: Left) or <code>\"RIGHT\"</code>(Position: Right) <code>{  \"variant1\": {   \"secondLayer\": {     \"side\": \"LEFT\"   }  } }</code> Hide Language Switch <code>secondLayer.hideLanguageSwitch</code> <code>true or false</code> <code>{  \"variant1\": {   \"secondLayer\": {     \"hideLanguageSwitch\": true   }  } }</code> Show \u2018Deny All\u2019 Button <code>secondLayer.hideButtonDeny</code> <code>true or false</code> <code>{  \"variant1\": {   \"secondLayer\": {     \"hideButtonDeny\": false   }  } }</code> Second Layer Background Overlay <code>secondLayer.isOverlayEnabled</code> <code>true or false</code> <code>{  \"variant1\": {   \"secondLayer\": {     \"isOverlayEnabled\": true   }  } }</code> Second Layer Default View <code>secondLayer.defaultView</code> <code>\"SRV\"</code> (Show Service Tab) or <code>\"CAT\"</code> (Show Categories Tab) <code>{  \"variant1\": {   \"secondLayer\": {     \"defaultView\": \"CAT\"   }  } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example_3","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"secondLayer\": {\n\"variant\": \"CENTER\",\n\"side\": \"LEFT\",\n\"hideLanguageSwitch\": true,\n\"hideButtonDeny\": false,\n\"isOverlayEnabled\": true,\n\"defaultView\": \"CAT\"\n}\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#second-layer-content","title":"Second Layer Content","text":"Label Property Option Example Second Layer Title <code>labels.headerCorner</code> Any Text <code>{  \"variant1\": {   \"labels\": {     \"headerCorner\": \"Second Layer Title\"   }  } }</code> Second Layer Description <code>labels.titleCorner</code> Any Text <code>{  \"variant1\": {   \"labels\": {     \"titleCorner\": \"Second Layer Description Message\"   }  } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example_4","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"labels\": {\n\"headerCorner\": \"Second Layer Title\",\n\"titleCorner\": \"Second Layer Description Message\"\n}\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#privacy-trigger-properties","title":"Privacy Trigger Properties","text":"Label Property Option Example Privacy Button Trigger <code>privacyButtonIsVisible</code> <code>true or false</code> <code>{ \"variant1\": { \"privacyButtonIsVisible\": true } }</code> Privacy Button Allowed URLs <code>privacyButtonUrls</code> <code>{ \"contains\": [string] }</code> <code>{ \"variant1\": { \"privacyButtonUrls\": { \"contains\": [\"/path\"] } } }</code> Privacy Button Icon <code>buttonPrivacyOpenIconUrl</code> <code>\"https://img.usercentrics.eu/misc/icon-fingerprint@2X.png\"</code> (Fingerprint),  <code>\"https://img.usercentrics.eu/misc/icon-settings-2X.png\"</code> (Settings),  <code>\"https://img.usercentrics.eu/misc/icon-shield-2X.png\"</code> (Security) or a Valid URL for Custom Icon <code>{ \"variant1\": { \"buttonPrivacyOpenIconUrl\": \"https://img.usercentrics.eu/misc/icon-fingerprint@2X.png\" } }</code> Custom Icon for Privacy Button <code>buttonPrivacyOpenIconUrl</code> Valid URL <code>{ \"variant1\": {   \"buttonPrivacyOpenIconUrl\": \"https://wwww.example.com/icon.png\" } }</code> Choose Button Position <code>buttonDisplayLocation</code> <code>\"bl\"</code> (Bottom Left) or <code>\"br\"</code> (Bottom Right) <code>{ \"variant1\": { \"buttonDisplayLocation\": \"bl\" } }</code> Background Color <code>customization.color.privacyButtonBackground</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{ \"variant1\": { \"customization\": { \"color\": { \"privacyButtonBackground\": \"0045A5\" }} } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example_5","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"customization\": {\n\"color\": {\n\"privacyButtonBackground\": \"0045A5\"\n}\n},\n\"privacyButtonIsVisible\": true,\n\"privacyButtonUrls\": {\n\"contains\": [\"/path\"]\n},\n\"buttonPrivacyOpenIconUrl\": \"https://img.usercentrics.eu/misc/icon-fingerprint@2X.png\",\n\"buttonDisplayLocation\": \"bl\"\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#logo-properties","title":"Logo Properties","text":"Label Property Option Example Logo URL <code>customization.logoUrl</code> Valid URL <code>{  \"variant1\": {   \"customization\": {     \"logoUrl\": \"https://www.example.com/logo.png\"   }  } }</code> Logo Position (First Layer) <code>firstLayer.logoPosition</code> <code>\"LEFT\"</code> (Left), <code>\"CENTER\"</code> (Center) or <code>\"RIGHT\"</code> (Right) <code>{  \"variant1\": {   \"firstLayer\": {     \"logoPosition\": \"LEFT\"   }  } }</code> Logo Alt-Tag <code>customization.logoAltTag</code> Any Text <code>{  \"variant1\": {   \"customization\": {     \"logoAltTag\": \"Alternative Tag\"   }  } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example_6","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"firstLayer\": {\n\"logoPosition\": \"LEFT\",\n},\n\"customization\": {\n\"logoUrl\": \"https://www.example.com/logo.png\",\n\"logoAltTag\": \"Alternative Tag\"\n}\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#fonts-properties","title":"Fonts Properties","text":"Label Property Option Example Font-Family <code>customization.font.family</code> \u201cSystem fonts (Default)\u201d, \u201cHelvetica\u201d, \u201cVerdana\u201d, \u201cGeorgia\u201d, \u201cArial\u201d or \u201cCustom font\u201d <code>{  \"variant1\": {   \"customization\": {     \"font\": {       \"family\": \"Helvetica\"     }   }  } }</code> Font-Family Custom Field <code>customization.font.family</code> Any Custom Font that you want to add  (Note: those fonts must be included in your website to make it work) <code>{  \"variant1\": {   \"customization\": {     \"font\": {       \"family\": \"Source Sans Pro\"     }   }  } }</code> Font-Size <code>customization.font.size</code> 12, 14, 16, 18 <code>{  \"variant1\": {   \"customization\": {     \"font\": {       \"size\": 16     }   }  } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example_7","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"customization\": {\n\"font\": {\n\"family\": \"Helvetica\",\n\"size\": 16\n}\n}\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#buttons-properties","title":"Buttons Properties","text":"Label Property Option Example Accept Button (Background) <code>customization.color.acceptBtnBackground</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"acceptBtnBackground\": \"FAFAFA\"     }   }  } }</code> Accept Button (Text) <code>customization.color.acceptBtnText</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"acceptBtnText\": \"0045A5\"     }   }  } }</code> Deny Button (Background) <code>customization.color.denyBtnBackground</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"denyBtnBackground\": \"0045A5\"     }   }  } }</code> Deny Button (Text) <code>customization.color.denyBtnText</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"denyBtnText\": \"FAFAFA\"     }   }  } }</code> Save Button (Background) <code>customization.color.saveBtnBackground</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"saveBtnBackground\": \"0045A5\"     }   }  } }</code> Save Button (Text) <code>customization.color.saveBtnText</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"saveBtnText\": \"FAFAFA\"     }   }  } }</code> More Button (Background) <code>customization.color.moreBtnBackground</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"moreBtnBackground\": \"FAFAFA\"     }   }  } }</code> More Button (Text) <code>customization.color.moreBtnText</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"moreBtnText\": \"0045A5\"     }   }  } }</code> Rounded corners (px) <code>customization.borderRadiusButton</code> Enter Any Number <code>{  \"variant1\": {   \"customization\": {     \"borderRadiusButton\": 4   }  } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example_8","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"customization\": {\n\"borderRadiusButton\": 4,\n\"color\": {\n\"acceptBtnBackground\": \"0045A5\",\n\"acceptBtnText\": \"FAFAFA\",\n\"denyBtnBackground\": \"0045A5\",\n\"denyBtnText\": \"FAFAFA\",\n\"moreBtnBackground\": \"0045A5\",\n\"moreBtnText\": \"FAFAFA\",\n\"saveBtnBackground\": \"0045A5\",\n\"saveBtnText\": \"FAFAFA\"\n}\n}\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#toggles-properties","title":"Toggles Properties","text":"Label Property Option Example Active Toggle (Background) <code>customization.color.toggleActiveBackground</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"toggleActiveBackground\": \"0045A5\"     }   }  } }</code> Active Toggle (Icon) <code>customization.color.toggleActiveIcon</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"toggleActiveIcon\": \"FAFAFA\",     }   }  } }</code> Disabled Toggle (Background) <code>customization.color.toggleDisabledBackground</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"toggleDisabledBackground\": \"FA0000\"     }   }  } }</code> Disabled Toggle (Icon) <code>customization.color.toggleDisabledIcon</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"toggleDisabledIcon\": \"FAFAFA\"     }   }  } }</code> Inactive Toggle (Background) <code>customization.color.toggleInactiveBackground</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"toggleInactiveBackground\": \"989898\",     }   }  } }</code> Inactive Toggle (Icon) <code>customization.color.toggleInactiveIcon</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{  \"variant1\": {   \"customization\": {     \"color\": {       \"toggleInactiveIcon\": \"FAFAFA\"     }   }  } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example_9","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"customization\": {\n\"color\": {\n\"toggleActiveBackground\": \"0045A5\",\n\"toggleActiveIcon\": \"FAFAFA\",\n\"toggleInactiveBackground\": \"989898\",\n\"toggleInactiveIcon\": \"FAFAFA\",\n\"toggleDisabledBackground\": \"FA0000\",\n\"toggleDisabledIcon\": \"FAFAFA\"\n}\n}\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#tcf-20-properties","title":"TCF 2.0 Properties","text":"Label Property Option Example TCF2 Accept All Button Label <code>tcf2.buttonsAcceptAllLabel</code> Any Text <code>{  \"variant1\": {   \"tcf2\": {     \"buttonsAcceptAllLabel\": \"Accept All\"   }  } }</code> TCF2 Deny All Button Label <code>tcf2.buttonsDenytAllLabel</code> Any Text <code>{  \"variant1\": {   \"tcf2\": {     \"buttonsDenyAllLabel\": \"Deny All\"   }  } }</code> TCF2 Save Button Label <code>tcf2.buttonsSaveLabel</code> Any Text <code>{  \"variant1\": {   \"tcf2\": {     \"buttonsSaveLabel\": \"Save Settings\"   }  } }</code> TCF2 Manage Settings Label <code>tcf2.linksManageSettingsLabel</code> Any Text <code>{  \"variant1\": {   \"tcf2\": {     \"linksManageSettingsLabel\": \"More Settings\"   }  } }</code> TCF2 Data Shared Outside Europe Text <code>tcf2.dataSharedOutsideEUText</code> Any Text <code>{  \"variant1\": {   \"tcf2\": {     \"dataSharedOutsideEUText\": \"Outside EU Text\"   }  } }</code> TCF2 First Layer Description <code>tcf2.firstLayerDescription</code> Any Text <code>{  \"variant1\": {   \"tcf2\": {     \"firstLayerDescription\": \"description\"   }  } }</code> TCF2 First Layer Hide Deny Button <code>tcf2.firstLayerHideButtonDeny</code> <code>true or false</code> <code>{  \"variant1\": {   \"tcf2\": {     \"firstLayerHideButtonDeny\": false   }  } }</code> TCF2 First layer Hide Toggles <code>tcf2.firstLayerHideToggles</code> <code>true or false</code> <code>{  \"variant1\": {   \"tcf2\": {     \"firstLayerHideToggles\": false   }  } }</code> TCF2 First layer Show Descriptions <code>tcf2.firstLayerShowDescriptions</code> <code>true or false</code> <code>{  \"variant1\": {   \"tcf2\": {     \"firstLayerShowDescriptions\": false   }  } }</code> TCF2 First Layer Title <code>tcf2.firstLayerTitle</code> Any Text <code>{  \"variant1\": {   \"tcf2\": {     \"firstLayerTitle\": \"Privacy Information\"   }  } }</code> TCF2 Hide Legitimate Interest Toggles <code>tcf2.hideLegitimateInterestToggles</code> <code>true or false</code> <code>{  \"variant1\": {   \"tcf2\": {     \"hideLegitimateInterestToggles\": false   }  } }</code> TCF2 Second Layer Hide Deny Button <code>tcf2.secondLayerHideButtonDeny</code> <code>true or false</code> <code>{  \"variant1\": {   \"tcf2\": {     \"secondLayerHideButtonDeny\": true   }  } }</code> TCF2 Second Layer Hide Toggles <code>tcf2.secondLayerHideToggles</code> <code>true or false</code> <code>{  \"variant1\": {   \"tcf2\": {     \"secondLayerHideToggles\": false   }  } }</code> TCF2 Second Layer Title <code>tcf2.secondLayerTitle</code> Any Text <code>{  \"variant1\": {   \"tcf2\": {     \"secondLayerTitle\": \"Privacy Settings\"   }  } }</code> TCF2 Hide Non IAB Vendors on First Layer <code>tcf2.hideNonIabOnFirstLayer</code> <code>true or false</code> <code>{  \"variant1\": {   \"tcf2\": {     \"hideNonIabOnFirstLayer\": false   }  } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example_10","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"tcf2\": {\n\"buttonsAcceptAllLabel\": \"Accept all\",\n\"buttonsDenyAllLabel\": \"Deny all\",\n\"buttonsSaveLabel\": \"Save Settings\",\n\"linksManageSettingsLabel\": \"More Settings\"\n\"dataSharedOutsideEUText\": \"Outside EU Text\",\n\"firstLayerDescription\": \"description\",\n\"firstLayerHideButtonDeny\": false,\n\"firstLayerHideToggles\": false,\n\"firstLayerShowDescriptions\": false,\n\"firstLayerTitle\": \"Privacy Information\",\n\"hideLegitimateInterestToggles\": false,\n\"secondLayerHideButtonDeny\": true,\n\"secondLayerHideToggles\": false,\n\"secondLayerTitle\": \"Privacy Settings\",\n\"hideNonIabOnFirstLayer\": false\n}\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#ccpa-first-layer-properties","title":"CCPA First Layer Properties","text":"Label Property Option Example CCPA First Layer Layout <code>ccpa.firstLayerVariant</code> <code>\"BANNER\"</code> (CCPA Privacy Banner) or <code>\"WALL\"</code> (CCPA Privacy Wall) <code>{  \"variant1\": {   \"ccpa\": {     \"firstLayerVariant\": \"BANNER\"   }  } }</code> CCPA Hide Language Switch <code>ccpa.firstLayerHideLanguageSwitch</code> <code>true or false</code> <code>{  \"variant1\": {   \"ccpa\": {     \"firstLayerHideLanguageSwitch\": true   }  } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example_11","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"ccpa\": {\n\"firstLayerVariant\": \"BANNER\",\n\"firstLayerHideLanguageSwitch\": true\n}\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#ccpa-second-layer-properties","title":"CCPA Second Layer Properties","text":"Label Property Option Example CCPA Second Layer Layout <code>ccpa.secondLayerVariant</code> <code>\"CENTER\"</code> (CCPA Privacy Settings Center) or <code>\"SIDE\"</code> (CCPA Privacy Settings Side) <code>{  \"variant1\": {   \"ccpa\": {     \"secondLayerVariant\": \"CENTER\"   }  } }</code> CCPA Hide Language Switch <code>ccpa.secondLayerHideLanguageSwitch</code> <code>true or false</code> {  \"variant1\": {   \"ccpa\": {     \"secondLayerHideLanguageSwitch\": true   }  } }"},{"location":"web/features/a-b-testing/available-properties/#example_12","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"ccpa\": {\n\"secondLayerVariant\": \"CENTER\",\n\"secondLayerHideLanguageSwitch\": true\n}\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#ccpa-button-properties","title":"CCPA Button Properties","text":"Label Property Option Example Okay Button CCPA Background Color <code>customization.color.ccpaButtonColor</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{ \"variant1\": { \"customization\": { \"color\": { \"ccpaButtonColor\": \"0045A5\" } } } }</code> Okay Button CCPA Text Color <code>customization.color.ccpaButtonTextColor</code> Hexadecimal Color Code (On the Admin Interface, For A/B Testing remove the # ) <code>{ \"variant1\": { \"customization\": { \"color\": { \"ccpaButtonTextColor\": \"FFFFFF\" } } } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example_13","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"customization\": {\n\"color\": {\n\"ccpaButtonColor\": \"0045A5\",\n\"ccpaButtonTextColor\": \"FFFFFF\",\n}\n}\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#labels-properties","title":"Labels Properties","text":"<p>Warning</p> <p>These Labels are affected by different translations. This Property table is ENGLISH-only.</p> Label Property Option Example Button: Save <code>labels.btnSave</code> Any Text <code>{  \"variant0\": {},  \"variant1\": {   \"labels\": {     \"btnSave\": \"Save Services\"   }  } }</code> Button: Deny All <code>labels.btnDeny</code> Any Text <code>{  \"variant1\": {   \"labels\": {     \"btnDeny\": \"Deny\"     \"btnMore\": \"More\",   }  } }</code> Button: More <code>labels.btnMore</code> Any Text <code>{  \"variant1\": {   \"labels\": {     \"btnMore\": \"More\"   }  } }</code> Button: Accept All <code>labels.btnAcceptAll</code> Any Text <code>{  \"variant1\": {   \"labels\": {     \"btnAcceptAll\": \"Accept All\"   }  } }</code> History (Title) <code>labels.history</code> Any Text <code>{  \"variant1\": {   \"labels\": {     \"history\": \"History\"   }  } }</code>"},{"location":"web/features/a-b-testing/available-properties/#example_14","title":"Example","text":"<pre><code>{\n\"variant0\": {},\n\"variant1\": {\n\"labels\": {\n\"btnSave\": \"Save Services\",\n\"btnDeny\": \"Deny\",\n\"btnMore\": \"More\",\n\"btnAcceptAll\": \"Accept All\",\n\"history\": \"History\"\n}\n}\n}\n</code></pre>"},{"location":"web/features/a-b-testing/available-properties/#links-in-banner-message","title":"Links in Banner Message","text":"<p>In case you want to add links to your variant's banner message property on the first layer, you can use the following links:</p> Type Link Accept All <code>&lt;a href=\\\"javascript:UC_UI.acceptAllConsents().then(UC_UI.closeCMP);\\\"&gt;Accept all&lt;/a&gt;</code> Deny All <code>&lt;a href=\\\"javascript:UC_UI.denyAllConsents().then(UC_UI.closeCMP);\\\"&gt;Deny all&lt;/a&gt;</code> More Information <code>&lt;a href=\\\"javascript:UC_UI.showSecondLayer();\\\"&gt;More information&lt;/a&gt;</code> Regular Link <code>&lt;a href=\\\"https://www.yourlink.com\\\"&gt;Your text&lt;/a&gt;</code>"},{"location":"web/features/a-b-testing/introduction/","title":"Introduction","text":"<p>A/B testing refers to a randomized experimentation process that includes two or more versions of a variable (web page, element, etc.), which are shown to different users at different times to determine which version performs best with users and drives the best business metrics.</p> <p>We now offer A/B Testing functionality via the Usercentrics Consent Management Platform, by enabling changing specific values of the Consent Management Platform, such as color, text, and UI elements. This allows you to identify the best version of your Consent Management Platform to maximize the impact of your website on your business.</p> <p>In this documentation, we will explain in detail how to enable A/B Testing in the Admin Interface and how to configure the different variants you want to test. We will also show you how to perform A/B Testing with our internal feature or how to set it up in your preferred external A/B testing tools, such as Kameleoon, Trbo or Optimizely. Additionally, we provide recommendations to make your A/B testing simpler and more efficient.</p>"},{"location":"web/features/a-b-testing/setup/","title":"Setup","text":""},{"location":"web/features/a-b-testing/setup/#step-1-admin-interface-setup","title":"Step 1: Admin Interface Setup","text":""},{"location":"web/features/a-b-testing/setup/#enabling-ab-testing-in-admin-interface","title":"Enabling A/B Testing in Admin Interface","text":"<p>The first step to enable A/B Testing is to enable it in your Admin Interface. We added the option to enable it via the Implementation tab (in the left menu in the Admin Interface). After opening the Implementation tab, click on A/B Testing and you will be presented with the following page.</p> <p>On this page, click on the toggle to enable A/B Testing and a popup will appear. Please read the information shown there carefully and then click Enable a/B Testing to enable the functionality.</p> <p></p>"},{"location":"web/features/a-b-testing/setup/#defining-the-variants","title":"Defining the Variants","text":"<p>After enabling the A/B testing tools you will be shown a page with the Configuration tab. On it, you can add your different Variants into JSON. Variants are the different versions of the Consent Management Platform that you want to test against each other on your page.</p> <p>To understand this better, we provide the following example with two different variants, Variant0 and Variant1:</p> <pre><code>  {\n\"variant0\": {},\n\"variant1\": {\n\"firstLayer\": {\n\"variant\": \"BANNER\"\n}\n}\n}\n</code></pre> <p><code>variant0</code> shows empty JSON, meaning that it is not modified and represents the Consent Management Platform that you configured inside the Admin Interface. In this case, we assume you have enabled the Privacy Wall in the Admin Interface.</p> <p><code>variant1</code> shows JSON with a rule for the First Layer Layout, determining that in Variant1 the First Layer Layout will be a BANNER instead of a WALL.</p>"},{"location":"web/features/a-b-testing/setup/#preview","title":"Preview","text":"<p>You can use the preview in the Admin Interface, to compare and test the Variants you defined. To use the preview, please click on the preview button in the bottom left corner of the Admin Interface. </p> <p>Once you decided if the Draft or Live version should be displayed, a drop down menu in the preview allows you to switch between the different variants.</p> <p></p>"},{"location":"web/features/a-b-testing/setup/#step-2-performing-the-ab-test","title":"Step 2: Performing the A/B Test","text":"<p>After you have set up the A/B test in your admin interface, we offer two ways to deploy the different variants.</p> <p>You can use our internal feature or you can use all common third party A/B testing tools.</p> <p></p>"},{"location":"web/features/a-b-testing/setup/#usercentrics-internal-ab-testing","title":"Usercentrics Internal A/B Testing","text":"<p>You can enable the internal A/B testing by selecting the \"Activate with Usercentrics\" option in the Admin Interface under Implementation / A/B Testing. When using Usercentrics to display your variants, they are always evenly distributed (e.g. 50:50 in case of two variants).</p> <p>Note</p> <p>Make sure the toggle \"Enable results for AbVariant\" is enabled to display the data from your A/B test at the top right corner under Interaction Analytics Overview.</p> <p>To get insights into the performance of the different variants, different options are provided within the Analytics section in the Admin Interface:</p> <p>Option 1: Interaction Analytics Overview</p> <p>Filter the analytics data for one of the variants under Interaction Analytics Overview. To do this, select the respective variant in the \"variant\" dropdown at the top right corner.</p> <p></p> <p>Option 2: Interaction Analytics Comparison</p> <p>Directly compare the interaction and accept rates for the variants under Interaction Analytics Comparison / Variant Analytics.</p> <p></p> <p>Option 3: Interaction Analytics Reporting</p> <p>Download and use the Interaction Analytics Reporting to get in-depth insights. An additional \"variant\" column will tell you which variant was used for each entry in the data.</p>"},{"location":"web/features/a-b-testing/setup/#ab-testing-with-third-party-tool","title":"A/B Testing with Third-Party Tool","text":"<p>To get even more detailed insights into your A/B test, we also offer the possibility to perform it with third-party A/B testing tools. Before diving into the different setups, we would like to give some general technical insights and recommendations.</p> <p>UC_AB_VARIANT</p> <p>This variable defines what A/B variant you will be testing on. As this variable will be delivered by the Usercentrics Consent Management Platform to the A/B testing tool to display the different variants, it needs to be set before the Consent Management Platform is loaded.</p> <p>Script Order</p> <p>We recommend that you add your A/B testing tool script in the <code>&lt;head&gt;</code> section of your code before the Usercentrics Consent Management Platform, since the A/B testing tool needs to be loaded before the Consent Management Platform to do the splitting properly.</p> <p>UC_UI_CMP_EVENT</p> <p>We defined various UI events that can be used in your A/B testing tool to track the interactions of your users with the different variants. For example, these events include ACCEPT_ALL (user clicks on accept all) or SAVE (user clicks on the save button).</p> <p>Currently, we provide a setup guide for Optimizely and Kameleoon. Soon we will add guides for various other tools, like Google Optimize, Optimizely, and trbo.</p> <ul> <li>Optimizely</li> <li>Kameleoon</li> <li>trbo</li> <li>Dynamic Yield</li> <li>Google Optimize</li> </ul>"},{"location":"web/features/a-b-testing/third-party-tool-guides/dynamic-yield/","title":"Dynamic Yield","text":"<p>When using an A/B Testing Tool (eg. Kameleoon, Optimizely, ...), please check if you made any script adjustments on A/B testing tool script. If so, you will need to remove these adjustments on A/B testing tool script, because they break the functionality of the A/B Testing Tool.</p>"},{"location":"web/features/a-b-testing/third-party-tool-guides/dynamic-yield/#setup-guide","title":"Setup Guide","text":"<p>Before approaching Dynamic Yield, we would suggest you take a look into its documentation.</p> <p>For this guide, you will need to have an Dynamic Yield account.</p> <p>Assuming that you followed all the steps mentioned before in the A/B Testing Documentation, you can move to the Dynamic Yield configuration.</p> <p>Login into your Dynamic Yield account. After logging in you will be sent to the main dashboard:</p> <p></p> <p>To create an A/B Testing campaign, click on Site Personalization, which will redirect you to this page:</p> <p></p> <p>To proceed with the creation of the campaign click \"+ Create Campaign\u201d, which will open a modal showing the different campaign types. Now click on the type \u201cCustom Code\u201d to define the variants. After clicking, a new page will load, where you can edit the Campaign as you like. We suggest the following settings:</p> <p></p> <p>Click \u201cNext\u201d and then we will define our Experience. Give it a suitable name, and define Targeting for All Users (default values). After that click Next to define the Variants</p> <p></p> <p>Click \u201cNew Variation\u201d, this will open a pop-up that will guide you through the creation of your Variation</p> <ul> <li>For the Template, choose Custom Code</li> <li>For the Code, enter the following JavaScript (make sure you choose JS) snippet for the first Variation - <code>window.UC_AB_VARIANT=\"variant0\";</code> - , the name of the first variant is based on the variant name defined in the first steps of the A/B Testing documentation.</li> </ul> <p></p> <p>Repeat the same process for the \u201cvariant1\u201d and all the other A/B testing variants you have defined in the Admin Interface.</p> <p>Hit Next and then save the changes as a Draft for further testing or hit Publish. Your A/B Testing Campaign is now created and published. You can preview the current campaign by clicking on the \u201ceye\u201d icon right beside the campaign:</p> <p></p> <p>The preview of the variants looks something like this:</p> <ul> <li> <p>For <code>variant0</code>: </p> </li> <li> <p>For <code>variant1</code>: </p> </li> </ul> <p>The command that was used to call the Banner was <code>UC_UI.showFirstLayer()</code></p>"},{"location":"web/features/a-b-testing/third-party-tool-guides/dynamic-yield/#track-usercentrics-cmp-events","title":"Track Usercentrics CMP Events","text":"<p>The only missing step now is to track the Usercentrics CMP Events. For this step you will need to add a small piece of code to your source code. This code will add a new event to track on your campaign, so you will need first to add the code, use the page for then Dynamic Yield to detect these new events.</p> <ul> <li>Go to your Source Code and add this code snippet</li> </ul> <pre><code>&lt;script type=\"text/javascript\"&gt;\nwindow.addEventListener('UC_UI_CMP_EVENT', (data) =&gt; {\nDY.API(\"event\", {\nname: data.detail.type,\nproperties: {\ndata:{\ndetail:{\nsource: data.detail.source,\ntype: data.detail.type\n}\n}\n}\n});\n});\n&lt;/script&gt;\n</code></pre> <ul> <li>This code will trigger every time a <code>UC_UI_CMP_EVENT</code> is fired (read more here)</li> <li>Every time one of those events is fired, we will send to Dynamic Yield a call to store that event on our campaign and track it</li> </ul> <ul> <li>After using the page with this new code added, go to your Campaign</li> <li>Hit view report</li> <li>On the Variation Performance, hit Choose Metrics, and here Dynamic Yield will show all of the triggered Usercentrics Events. This however may take some time to show, since the tracking will need some time to load the recent visits to your page.</li> </ul> <p></p> <p>If you cannot add any kind of code to your page, because of any limitations regarding your code and/or platform, you can add this code snippet to all of your campaign variants, that you\u2019ve defined before:</p> <p></p> <pre><code>window.UC_AB_VARIANT=\"xxxxx\"\nwindow.addEventListener('UC_UI_CMP_EVENT', (data) =&gt; {\nDY.API(\"event\", {\nname: data.detail.type,\nproperties: {\ndata:{\ndetail:{\nsource: data.detail.source,\ntype: data.detail.type\n}\n}\n}\n});\n});\n</code></pre> <p>Learn more</p> <p>You can read more about Dynamic Yield in the DY Knowledge Base.</p>"},{"location":"web/features/a-b-testing/third-party-tool-guides/google-optimize/","title":"Google Optimize","text":"<p>When using an A/B Testing Tool (eg. Kameleoon, Optimizely, ...), please check if you made any script adjustments on A/B testing tool script. If so, you will need to remove these adjustments on A/B testing tool script, because they break the functionality of the A/B Testing Tool.</p>"},{"location":"web/features/a-b-testing/third-party-tool-guides/google-optimize/#setup-guide","title":"Setup Guide","text":"<p>Before approaching Google Optimize, we would suggest you take a look into Google Optimize Resource Hub and Google developers page about Google Optimize. We also suggest to read the Google Analytics documentation, since we will need to work with it for this guide.</p> <p>For this guide, you will need to have an Google account, to access both Google Optimize and Google Analytics.</p> <p>Assuming that you followed all the steps mentioned before in the A/B Testing documentation, you can move to the Google Optimize configuration.</p>"},{"location":"web/features/a-b-testing/third-party-tool-guides/google-optimize/#create-experience","title":"Create Experience","text":"<p>Login into your Google Optimize account. After logging in you will be sent to the main dashboard:</p> <p></p> <p>Click \"Let's Go\" to start your first Experience. If you already have one Experience, click \"Create Experience\".</p> <p></p> <p>After clicking, this modal will appear and ask you to fill the required fields - Name, URL of the page you'd like to use and the type of Experience would you would like to create. Define both Name and URL to suit your needs and choose A/B Test as the Experience type. Click \"Create\".</p> <p>This is your Experience dashboard:</p> <p></p> <p>First step will be adding the Variants. Click \"Add Variant\" and name it based on the given names for the first part of the A/B testing documentations. In this guide we will suggest \"Variant 0\" for the first Variant. Click \"Done\" and repeat the process to create another Variant called \"Variant 1\".</p> <p>Now your dashboard should look like this:</p> <p></p> <p>Since we only want to work with our defined Variants 0 &amp; 1 and cannot change the \"Original\" Variant that is automatically defined by Google Optimize, we need to change the weight of the Variants. To do so click on one of the \"33% weight\" links. This will open the following modal:</p> <p></p> <p>We now want to change the weight of the \"Original\" Variant to 0% and the other two Variants to 50%. Click on \"Evenly Split\" and change to \"Custom Percentages\". Define the \"Original\" variant with 0% weight and the other two with 50% weight. Hit \"Done\".</p> <p>After changing the weight, the next step will be to edit those Variants. Click \"Edit\" on \"Variant 0\". This will open the URL that you defined before with the Google Optimize editor.</p> <p></p> <p>On the top menu bar, click on the \u201cAdd Code\u201d button (the \u201c&lt; &gt;\u201d button) and then click \u201cGlobal JavaScript\u201d. Here add the following line of code:</p> <pre><code>window.UC_AB_VARIANT=\"variant0\";\n</code></pre> <p>Hit \"Apply\" and then click \"Done\". Repeat this process on the \"Variant 1\" with the following piece of code:</p> <pre><code>window.UC_AB_VARIANT=\"variant1\";\n</code></pre>"},{"location":"web/features/a-b-testing/third-party-tool-guides/google-optimize/#create-objectives","title":"Create Objectives","text":"<p>The next step will be to create the Objectives.</p> <p>Objectives</p> <p>Objectives are metrics or activities that your variants are measured against. Your experience objective determines your experience\u2019s status and which variant is the leader. You can create more than one objective, but additional objectives do not affect status or leader declarations.</p> <p>Before you can add any Objective that will be defined by our CMP Events, you need to make two different steps:</p> <ol> <li>Link your Google Analytics account to your Google Optimize Experience </li> </ol> <p>Click \"Link to Analytics\" and link it to an existing property - or in Google Analytics, create a new Property to link with this one. You can read more here.</p> <p>Then after linking your Google Analytics Property with your Google Optimize Experience, you will need to install your Google Analytics code before your Google Optimize code. Your code will look something like this:</p> <pre><code>&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;\n&lt;script async src=\"[https://www.googletagmanager.com/gtag/js?id=UA-XXXXXXXX](https://www.googletagmanager.com/gtag/js?id=UA-XXXXXXXX)-X\u201d&gt;&lt;/script&gt;\n&lt;script&gt;\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', '[UA-XXXXXXXX](https://www.googletagmanager.com/gtag/js?id=UA-XXXXXXXX)-X');\n&lt;/script&gt;\n</code></pre> <ol> <li>Track and send Usercentrics Events to Google Analytics</li> </ol> <p>To add any event as an objective, you need Google Analytics to track them. For this you need the following code snippet added to your <code>&lt;body&gt;</code> tag, before anything else:</p> <pre><code>&lt;script type=\"text/javascript\"&gt;\nwindow.addEventListener('UC_UI_CMP_EVENT', (data) =&gt; {\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('event', `${data.detail.type.toLowerCase()} in ${data.detail.source.toLowerCase()}`, {\n'event_category': `${data.detail.source.toLowerCase()} event`,\n'event_label': `${data.detail.type.toLowerCase()}`,\n})\n});\n&lt;/script&gt;\n</code></pre> <p>This Event listener will fire whenever an event from the banner fires (Read more about the available UI events) and then it will run that gtag event to the  <code>dataLayer</code>. This gtag event follows the syntax for Google Analytics Events (see the documentation about measuring Google Analytics events) and will track this event on the associated GA measurement page (which you can see it above the Objectives Tab).</p> <p>Explanation</p> <p>To Explain some of the values of this event (read more here): - <code>data.detail.source</code> - Shows in what layer does the event happen (<code>FIRST_LAYER</code>,  <code>SECOND_LAYER</code>,  <code>PRIVACY_BUTTON</code>) - <code>data.detail.type</code> - Shows the type of event</p> <p>After adding this code snippet, you need to render all the Available UI Events, for them to show up in Google Analytics. After testing all of them, we can finally add them as objectives to Google Optimize.</p> <p>After adding the code snippet and linking your Google Analytics, you should be able to see the Usercentrics Events just like this in Google Analytics (this was tested on a low traffic test environment):</p> <p></p> <p>In the Objectives, you need to create an Primary Objective, which determines your experience\u2019s status and which variant is the leader. Click \u201cAdd Experience Objective\u201d and then click \u201cCreate Custom\u201d</p> <p></p> <p>In the Objectives modal, click \"Events\" and for the rules you can define them with what suits your needs, but following our code example, we will write the following rule:</p> <ul> <li>Event Action - Equals - (Insert the event that you want for main Objective, for example <code>cmp_shown in first_layer</code>)</li> </ul> <p>For the counting method, choose \u201cOnce per Session\u201d and hit \u201cSave\u201d. Give a suitable name to your Objective and save.</p> <p>After this step, you can proceed to add the Google Optimize code if you still didn't added it (add it after the Google Analytics code)</p> <pre><code>&lt;script src=\"https://www.googleoptimize.com/optimize.js?id=OPT-XXXXX\"&gt;&lt;/script&gt;\n</code></pre> <p>Click \"Check Installation\" and you are all set up!</p>"},{"location":"web/features/a-b-testing/third-party-tool-guides/kameleoon/","title":"Kameleoon","text":"<p>When using an A/B Testing Tool (eg. Kameleoon, Optimizely, ...), please check if you made any script adjustments on A/B testing tool script. If so, you will need to remove these adjustments on A/B testing tool script, because they break the functionality of the A/B Testing Tool.</p> <p>For Kameleoon, you will need to know:</p> <ul> <li> <p>basic knowledge about the tool</p> </li> <li> <p>creating an account</p> </li> <li> <p>setting up the Kameleoon Script on your page</p> </li> </ul>"},{"location":"web/features/a-b-testing/third-party-tool-guides/kameleoon/#prerequisite-creating-a-new-site-in-kameleoon","title":"Prerequisite (Creating a new site in Kameleoon)","text":"<p>To create a new site in Kameleoon, go to Administrate in the left menu and click Sites. You will be presented with this dashboard.</p> <p></p> <p>Click New Site to start creation on Kameleoon. You will be presented with a popup with two text fields: URL of Website and Description (which is optional).</p> <p>Fill in the fields and proceed to the next step, which will present you with this page.</p> <p></p> <p>You will have to fill in a series of drop-down menus, starting with \u201cAre you installing Kameleoon via a Tag Manager?\u201d and ending with \u201cDo you want to self-host Kameleoon public resources?\u201d</p> <p>For Select an installation tag, we strongly advise selecting the Asynchronous Loading with Anti-Flickering (recommended) option. You can find more information about this Installation tag here: Advanced Implementation Guide - Kameleoon Developer Documentation</p> <p>After filling in all the options, click Continue</p> <p>You will receive instructions to install Kameleoon on your page. In these instructions, you will find how to install the Kameleoon code into your code, and you will also receive your Site ID</p> <p>The Code follows this structure</p> <pre><code>  &lt;script type=\"text/javascript\"&gt;\n// Duration in milliseconds to wait while the Kameleoon application file is loaded\nvar kameleoonLoadingTimeout = 1000;\n\nwindow.kameleoonQueue = window.kameleoonQueue || [];\nwindow.kameleoonStartLoadTime = new Date().getTime();\nif (! document.getElementById(\"kameleoonLoadingStyleSheet\") &amp;&amp; ! window.kameleoonDisplayPageTimeOut)\n{\nvar kameleoonS = document.getElementsByTagName(\"script\")[0];\nvar kameleoonCc = \"* { visibility: hidden !important; background-image: none !important; }\";\nvar kameleoonStn = document.createElement(\"style\");\nkameleoonStn.type = \"text/css\";\nkameleoonStn.id = \"kameleoonLoadingStyleSheet\";\nif (kameleoonStn.styleSheet)\n{\nkameleoonStn.styleSheet.cssText = kameleoonCc;\n}\nelse\n{\nkameleoonStn.appendChild(document.createTextNode(kameleoonCc));\n}\nkameleoonS.parentNode.insertBefore(kameleoonStn, kameleoonS);\nwindow.kameleoonDisplayPage = function(fromEngine)\n{\nif (!fromEngine)\n{\nwindow.kameleoonTimeout = true;\n}\nif (kameleoonStn.parentNode)\n{\nkameleoonStn.parentNode.removeChild(kameleoonStn);\n}\n};\nwindow.kameleoonDisplayPageTimeOut = window.setTimeout(window.kameleoonDisplayPage, kameleoonLoadingTimeout);\n}\n&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"//YOUR_SITE_ID.kameleoon.eu/kameleoon.js\" async=\"true\"&gt;&lt;/script&gt;\n</code></pre> <p>Add this code BEFORE Usercentrics' Consent Management Platform code, since your A/B testing tools MUST be loaded before the Consent Management Platform to do splitting properly.</p> <p>You can find your site ID in the final piece of your script</p> <pre><code>  &lt;script type=\"text/javascript\" src=\"//YOUR_SITE_ID.kameleoon.eu/kameleoon.js\" async=\"true\"&gt;&lt;/script&gt;\n</code></pre> <p>After adding your code and committing these changes to your Live/Test Environment, click Validate. After that a popup will appear, displaying \u201cPlease wait, our chameleon is touring your website.\u201d</p> <p>After Kameleoon validates your page, the popup will close, displaying the message \u201cKameleoon is well detected on your website.\u201d</p>"},{"location":"web/features/a-b-testing/third-party-tool-guides/kameleoon/#ab-testing-experiment","title":"A/B Testing Experiment","text":"<p>After taking a quick read through their Quick Start Guide, you can start creating your first A/B Testing Experiment.</p> <p>An Experiment is the group of variants/versions of the variants that you want to try out with the various users.</p> <p>We recommend to run only one Consent Experiment per site</p> <p>After you login into Kameleoon, you will be presented with the following dashboard</p> <p></p>"},{"location":"web/features/a-b-testing/third-party-tool-guides/kameleoon/#create-a-new-goal","title":"Create a new goal","text":"<p>First, create a New goal. A Goal measures the efficiency of an Experiment and this Goal is what you want to improve with your campaign.</p> <p>To create a Goal, go to Configure in the left menu and then click Goals. You will be presented with another dashboard.</p> <p></p> <p>Click New goal in the top right corner. A popup will appear with two fields: Website Selection and Type of Goal.</p> <ul> <li>In Website Selection, choose the website that you defined when you created the account.</li> <li>In Type of Goal, for this guide, choose Custom Goal. Currently, we support several custom events for custom goals. You can read more about them here</li> </ul> <p></p> <p>Click Next, and a new popup will appear with the fields Goal name and Description. </p> <p>Give it an appropriate name and copy the aforementioned function on the text underneath the Description field \u2192 Kameleoon.API.Goals.processConversion (and the Unique ID inside). Find this ID on the New goal popup at the end of the function text.</p> <p></p>"},{"location":"web/features/a-b-testing/third-party-tool-guides/kameleoon/#create-an-experiment","title":"Create an Experiment","text":"<p>After creating the new Goal, you will need to create an Experiment.</p> <ul> <li>To start a new Experiment, use the Existing Experiment \u201cExperiment1\u201d or create a new Experiment. To create a new Experiment, click \u201cNew Experiment\u201d in the top right corner. A new popup will appear asking what type of experiment you want to create. For testing purposes, create a Classic A/B Experiment by clicking on \u201cClassic A/B\u201d.</li> <li>After clicking \u201cClassic A/B\u201d, a popup with the text fields \u201cName\u201d, \u201cSite Web\u201d, and \u201cURL of the page where you want to launch your experiment\u201d will appear. Complete them with the correct information and then you can associate a tag if you want this Experiment to have more context. Click Validate and your Experiment is created.</li> <li>To make your Experiment test the variants defined in your A/B test inside the Admin Interface, you will need to click on the three vertical dots next to your Experiment and click \u201cEdit it in the Code Editor\u201d.</li> </ul> <p></p> <ul> <li>This will open a new page for the Code Editor inside Kameleoon. You will be greeted with this page.</li> </ul> <p></p> <ul> <li>Before adding the Variations, go to Experiment (just above Variations on the left menu) and click Test specific code in the menu on the right. Add the following code:</li> </ul> <pre><code> window.UC_AB_VARIANT = \"variant0\";\n\nwindow.addEventListener('UC_UI_CMP_EVENT', function (data) {\nconsole.log(\"TEST: source =&gt;\", data.detail.source);\nconsole.log(\"TEST: type =&gt;\", data.detail.type);\nconsole.log(\"TEST: Variant =&gt;\", data.detail.abTestVariant);\n//These are our custom events for each basic action\n//in our Consent Management Platform\nif (data.detail.type === \"CMP_SHOWN\") Kameleoon.API.Goals.processConversion(Your Unique ID);\nif (data.detail.type === \"ACCEPT_ALL\") Kameleoon.API.Goals.processConversion(Your Unique ID);\nif (data.detail.type === \"DENY_ALL\") Kameleoon.API.Goals.processConversion(Your Unique ID);\nif (data.detail.type === \"SAVE\") Kameleoon.API.Goals.processConversion(Your Unique ID);\nif (data.detail.type === \"MORE_INFORMATION_LINK\") Kameleoon.API.Goals.processConversion(Your Unique ID);\nif (data.detail.type === \"IMPRINT_LINK\") Kameleoon.API.Goals.processConversion(Your Unique ID);\nif (data.detail.type === \"PRIVACY_POLICY_LINK\") Kameleoon.API.Goals.processConversion(Your Unique ID);\n});\n</code></pre> <p>The \u201cvariant0\u201d is the default variant that we\u2019ve defined as the empty variant, meaning that it doesn't make any changes to the Consent Management Platform. If your default variant has another name, change it accordingly. By using <code>window.UC_AB_VARIANT=\"variant0\"</code>, you will go to your default variant.</p> <p>The Event Listener will be triggered every time you fire one of our Custom Events. Find extra information regarding Custom Events for A/B Testing here</p> <p>The three <code>console.log</code> will return important information regarding your event. For example, to track <code>ACCEPT_ALL</code> as the code shows, you will be presented with these logs:</p> <pre><code>TEST: source =&gt; FIRST_LAYER\nTEST: type =&gt; ACCEPT_ALL\nTEST: Variant =&gt; variant1\n</code></pre> <p>You can add more Goals to this Experiment if needed. To add a new Goal just add the following code underneath the last \u201cif\u201d statement.</p> <pre><code>if (data.detail.type === \"Consent Management Platform event here\") Kameleoon.API.Goals.processConversion(goalID)\n</code></pre> <ul> <li>Go back to Variations and inside Variation 1 add the following code</li> </ul> <pre><code> window.UC_AB_VARIANT = \"variant1\";\n</code></pre> <p>Replace <code>variant1</code> if you gave your variant another name.</p> <ul> <li> <p>Click Finalize under Variations in the menu. In the Finalize tab, select your Traffic Distribution (% for each variation), your Targeting (where is the target of this test), and your Tracking and Goals. Here you will add the Goal that you have created and you can search for Goal\u2019s Unique ID. If you have any issues searching, try using only the first digits of the Goal ID.</p> </li> <li> <p>After completing these three steps, click Publish to finalize the Experiment setup. Go back to the Experiments dashboard to see the results of the experiment by clicking in Results.</p> </li> </ul>"},{"location":"web/features/a-b-testing/third-party-tool-guides/optimizely/","title":"Optimizely","text":"<p>When using an A/B Testing Tool (eg. Kameleoon, Optimizely, ...), please check if you made any script adjustments on A/B testing tool script. If so, you will need to remove these adjustments on A/B testing tool script, because they break the functionality of the A/B Testing Tool.</p> <p>Before approaching Optimizely, we would suggest you take a look into its documentation Developer Documentation - Optimizely Full Stack.</p> <p>Optimizely is simple and easy to learn and use. For this guide, you will need to have an Optimizely account.</p> <p>Assuming that you\u2019ve followed all the steps mentioned before in the A/B Testing Documentation and you have configured the Admin Interface completed you can move to the Optimizely configuration:</p> <ul> <li>Log in to your account. After logging in, you will find the following page - the Experiments Page</li> </ul> <p></p> <ul> <li> <p>Click Create New\u2026 and then click A/B Test. A pop-up window will show with the following fields - Name, Description, Target By, and URL. Fill all the fields with the correct information and click Create Experiment</p> </li> <li> <p>After creating the Experiment, you will be sent to the Experiment page, on this page, you will find the following variants: <code>Original</code> and <code>Variant #1</code>.</p> </li> </ul> <p></p> <ul> <li> <p>Click Edit on the Original variant, and you will be forwarded to your URL Target Page (The one that you\u2019ve added before on the creation of the Experiment). When you reach to your testing page, you will see an editor surrounding it.</p> </li> <li> <p>Click on the following icon on the editor</p> </li> </ul> <p></p> <ul> <li>In the JavaScript tab you will add the following code</li> </ul> <pre><code>window.UC_AB_VARIANT  =  \"variant0\";\n</code></pre> <p>The \u201cvariant0\u201d is the default variant that we\u2019ve defined as the empty variant, meaning that it doesn't make any changes to the Consent Management Platform. If your default variant has another name, change it accordingly. By using <code>window.UC_AB_VARIANT=\"variant0\"</code>, you will go to your default variant.</p> <ul> <li>Click Save &amp; Apply</li> <li>On the left menu, click on the dropdown menu (where Original is selected) and change to <code>Variation #1</code>.</li> <li>Click on the same code icon as before and in the JavaScript Tab add the following code:</li> </ul> <pre><code>window.UC_AB_VARIANT = \"variant1\";\n</code></pre> <p>Replace \u201cvariant1\u201d if you gave your variant another name. This is for the test variant that we\u2019ve defined on the steps before the Optimizely configuration.</p> <ul> <li>Click Save &amp; Apply and on the left menu click &lt; Variations</li> </ul> <p>After this, you will want to define your Targeting, Audiences, and Integrations as you wish.</p> <p>Once you reach the Metrics Page, you can define here the metrics related to the events of our CMP. To see these events we suggest taking a look at our events documentation</p> <ul> <li> <p>To define a CMP Event Metric, click Create New Event\u2026</p> </li> <li> <p>Select Custom, give it a name, description and for the API name, give one of the event names present on the UC_UI_CMP_EVENT documentation. In this example, you can use CMP_SHOWN, which will trigger every time that the CMP is shown.</p> </li> <li> <p>After this, copy the API Call that Optimizely shows into your code. If you want to add it directly on the HTML add it like this:</p> </li> </ul> <pre><code>&lt;script&gt;\nwindow['optimizely'] = window['optimizely'] || [];\nwindow['optimizely'].push({\ntype: \"event\",\neventName: \"CMP_SHOWN\",\ntags: {\nrevenue: 0, // Optional in cents as integer (500 == $5.00)\nvalue: 0.00 // Optional as float\n}\n});\n&lt;/script&gt;\n</code></pre> <ul> <li>After defining all the wanted metrics, go to Shared Code. In the Shared Code you will add the following Event Listener:</li> </ul> <pre><code>window.addEventListener('UC_UI_CMP_EVENT', function (data) {\nconsole.log(\"TEST: source =&gt;\", data.detail.source);\nconsole.log(\"TEST: type =&gt;\", data.detail.type);\nconsole.log(\"TEST: Variant =&gt;\", data.detail.abTestVariant);\n});\n</code></pre> <p>This Event Listener will trigger every time that one of our Custom Events is fired.</p> <p>The three <code>console.log</code> will return important information regarding your event. For example, to track CMP_SHOWN as the code shows, you will be presented with these logs:</p> <pre><code>TEST: source =&gt; FIRST_LAYER\nTEST: type =&gt; CMP_SHOWN\nTEST: Variant =&gt; variant1\n</code></pre> <ul> <li>After this, define your Traffic Allocation per Variant and your schedule, and you are good to go! You can still go to Variations to test your changes, or else you can publish your Experiment.</li> </ul>"},{"location":"web/features/a-b-testing/third-party-tool-guides/trbo/","title":"TRBO","text":"<p>Prerequisites</p> <ul> <li>You have a trbo account.</li> <li>There are no script adjustments done on the A/B testing tool script itself. In case there are adjustments, please remove them to not break the functionality of the A/B testing tool.</li> <li>AB Testing was already set up in the Usercentrics Admin Interface and the different variants to be tested were defined (see here).</li> </ul>"},{"location":"web/features/a-b-testing/third-party-tool-guides/trbo/#setup","title":"Setup","text":"<p>Assuming that you followed all the steps mentioned before in the A/B testing documentation, you can move to the trbo configuration.</p> <p>Login into your trbo account. After logging in you will be sent to the main dashboard:</p> <p></p> <p>Click on the menu icon on the top left corner. On the menu, underneath Setup, click on Usercentrics. You will be redirected to the following page:</p> <p></p> <p>On this page, you will see the Setup Steps which need to be followed in order to successfully implement an Usercentrics trbo campaign on your page.</p> <p>Within the trbo interface create and set up the variants that you want to test and assign each variant to a bucket share of your traffic.</p> <ul> <li>Click on the \u201c+\u201d on the top of the page. This will open a side modal with the creation steps for the Usercentrics Campaign</li> </ul> <p></p> <ul> <li>Give it a Testname, Start Date and if needed an End Date.</li> <li>Open the Split tab. Here you will create your Variant Layers. They must have the same name as your variants on Usercentrics A/B Test. You defined these variants within the Admin Interface.</li> <li>After naming your Variants correctly, you will need to define the Bucket Distribution. We suggest having an even distribution between variants. </li> </ul> <p></p> <ul> <li>To verify your setup, read through the setup explanation for Usercentrics A/B testing on the Admin Interface, provided by trbo:</li> </ul> <p></p> <ul> <li>Hit Save Settings</li> </ul>"},{"location":"web/features/a-b-testing/third-party-tool-guides/trbo/#testing","title":"Testing","text":"<p>Once you have set up the variants within the Usercentrics interface, you can test the variants by applying the Live-Test toggle. If you have questions about how to test the display of the selected variants via buckets, please reach out to your Client Success Manager at trbo.</p> <p>Your testing was successful? Feel free to set the test to live any time.</p> <p>After following these steps, you have successfully set up your A/B testing for the Usercentrics CMP with trbo.</p> <p></p>"},{"location":"web/features/a-b-testing/third-party-tool-guides/trbo/#performance-analysis","title":"Performance / Analysis","text":"<p>To see the results of your A/B test, go to Menu and underneath Performance, click Variation Comparison. On Variation Comparison, you will see the following Dashboard, where you can check all of the Impressions and Clicks from the available click events from Usercentrics:</p> <p></p> <p>To check these click events, click Click-Type, and then scroll down the list. After choosing the Click-Type, hit Apply, to apply the new filter</p> <p></p> <p>On the Usercentrics Setup Page you can check the full table containing all the Click Events:</p> <p></p> <p></p>"},{"location":"web/features/api/control-functionality/","title":"Control Functionality","text":""},{"location":"web/features/api/control-functionality/#introduction","title":"Introduction","text":"<p>The following methods can be accessed on the following object that the CMP registers on the window object in the browser:</p> <pre><code>  window.__ucCmp\n</code></pre>"},{"location":"web/features/api/control-functionality/#acceptallconsents","title":"acceptAllConsents","text":"<p>Programmatic way to accept all consents</p> <pre><code>  window.__ucCmp.acceptAllConsents()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-functionality/#changelanguage","title":"changeLanguage","text":"<p>Programmatic way to change the language in the CMP</p> <p>Two character country code, e.g. \"en\" = set language to English</p> <pre><code>  window.__ucCmp.changeLanguage(language)\n</code></pre> Input Input Type Return Type language string <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-functionality/#denyallconsents","title":"denyAllConsents","text":"<p>Programmatic way to deny all consents</p> <pre><code>  window.__ucCmp.denyAllConsents()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-functionality/#getactivelanguage","title":"getActiveLanguage","text":"<p>Programmatic way to get the currently selected language in the CMP </p> <pre><code>  window.__ucCmp.getActiveLanguage()\n</code></pre> Input Return Type - <code>Promise&lt;string&gt;</code>"},{"location":"web/features/api/control-functionality/#getconsentdetails","title":"getConsentDetails","text":"<p>Retrieves all the Consent Details </p> <pre><code>  window.__ucCmp.getConsentDetails()\n</code></pre> Input Return Type - <code>Promise&lt;ConsentDetails&gt;</code>"},{"location":"web/features/api/control-functionality/#getcontrollerid","title":"getControllerId","text":"<p>Programmatic way to get the Controller ID</p> <pre><code>  window.__ucCmp.getControllerId()\n</code></pre> Input Return Type - <code>Promise&lt;string&gt;</code>"},{"location":"web/features/api/control-functionality/#isconsentrequired","title":"isConsentRequired","text":"<p>Programmatic way to to check if consent is required (no consent given or resurface). Return value is only available after UI has initialized.</p> <pre><code>  function customConsentHandler(consentIsRequired) {\nconsole.log('consentIsRequired', consentIsRequired);\n}\n\nif (!window.__ucCmp || !__ucCmp.isInitialized()) {\nwindow.addEventListener('UC_UI_INITIALIZED', function() {\ncustomConsentHandler(__ucCmp.isConsentRequired());\n});\n} else {\nconst isConsentRequired = await __ucCmp.isConsentRequired()\ncustomConsentHandler(isConsentRequired);\n}\n</code></pre> Input Return Type - <code>Promise&lt;boolean&gt;</code>"},{"location":"web/features/api/control-functionality/#isinitialized","title":"isInitialized","text":"<p>Programmatic way to check if the app is initialized</p> <pre><code>  const isInitialized = await window.__ucCmp.isInitialized()\nif (isInitialized) {\nconsole.log('CMP is already initialized');\n} </code></pre> Input Return Type - <code>Promise&lt;boolean&gt;</code>"},{"location":"web/features/api/control-functionality/#saveconsents","title":"saveConsents","text":"<p>Saves the consents after being updated.</p> <pre><code>  window.__ucCmp.saveConsents()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-functionality/#updatecategoriesconsents","title":"updateCategoriesConsents","text":"<p>Updates consents for whole categories of services</p> <pre><code>const categoriesConsents = [\n{id: 'marketing', consent: true}, // Marketing Category\n{id: 'functional', consent: false}, // Functional Category\n]\n\nwindow.__ucCmp.updateCategoriesConsents(categoriesConsents)\n</code></pre> Input Input Type Return Type categoriesConsents CategoriesConsents <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-functionality/#updateservicesconsents","title":"updateServicesConsents","text":"<p>Updates consents for individual or multiple services</p> <pre><code>const serviceConsents = [\n{id: 'HkocEodjb7', consent: true}, // Google Analytics\n{id: 'S1_9Vsuj-Q', consent: false}, // Google Ads\n]\n\nawait __ucCmp.updateServicesConsents(serviceConsents);\n</code></pre> Input Input Type Return Type servicesConsents ServicesConsents <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-functionality/#updatetcfconsents","title":"updateTcfConsents","text":"<p>Programmatic way to update TCF consents</p> <pre><code>  window.__ucCmp.updateTcfConsents(tcfConsents)\n</code></pre> Input Input Type Return Type tcfConsents TCFConsents <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-ui/","title":"Control UI","text":""},{"location":"web/features/api/control-ui/#introduction","title":"Introduction","text":"<p>The following methods can be accessed through the window function that should be present:</p> <pre><code>  window.__ucCmp\n</code></pre> <p>To check Interfaces, Types, ENUMS, please refer to the Interfaces page.</p>"},{"location":"web/features/api/control-ui/#closecmp","title":"closeCmp","text":"<p>Programmatic way to close the CMP</p> <pre><code>  window.__ucCmp.closeCmp()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-ui/#refreshscripts","title":"refreshScripts","text":"<p>Programmatic way to recheck the unblocking of scripts e.g. for Single Page Applications that add script tags dynamically</p> <pre><code>  window.__ucCmp.refreshScripts()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-ui/#showfirstlayer","title":"showFirstLayer","text":"<p>Programmatic way to show the First Layer</p> <pre><code>  window.__ucCmp.showFirstLayer()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-ui/#showsecondlayer","title":"showSecondLayer","text":"<p>Programmatic way to show the Second Layer</p> <pre><code>  window.__ucCmp.showSecondLayer()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-ui/#showservicedetails","title":"showServiceDetails","text":"<p>Programmatic way to show the details of a service</p> <pre><code>  window.__ucCmp.showServiceDetails(serviceId)\n</code></pre> Input Input Type Return Type serviceId string <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-ui/#suppress-the-cmp-uc_ui_suppress_cmp_display","title":"Suppress the CMP (UC_UI_SUPPRESS_CMP_DISPLAY)","text":"<p>Programmatic way to suppress the CMP via JavaScript. Add it before the CMP Script.</p> <pre><code>  &lt;script type=\"application/javascript\"&gt;\nvar UC_UI_SUPPRESS_CMP_DISPLAY=true;\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/api/control-ui/#updatethemes","title":"updateThemes","text":"<p>Programmatic way to update the Themes</p> <pre><code>  window.__ucCmp.updateThemes(themeData)\n</code></pre> Input Input Type Return Type themeData ThemeData <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/enums/","title":"Enums","text":""},{"location":"web/features/api/enums/#enums","title":"ENUMS","text":""},{"location":"web/features/api/enums/#close_option","title":"CLOSE_OPTION","text":"<pre><code>enum CLOSE_OPTION {\nICON = \"ICON\",\nLINK = \"LINK\"\n}\n</code></pre>"},{"location":"web/features/api/interfaces/","title":"Interfaces","text":""},{"location":"web/features/api/interfaces/#interfaces","title":"Interfaces","text":""},{"location":"web/features/api/interfaces/#themedata","title":"ThemeData","text":"<pre><code>interface ThemeData {\nbreakPoints?: {\ndesktop: number;\ntablet: number;\nmobile: number;\n};\nlayers?: ScreenTypes&lt;LayerTheme&gt;;\nprivacyButton?: ScreenTypes&lt;Partial&lt;PrivacyButtonTheme&gt;&gt;;\nembeddings?: ScreenTypes&lt;EmbeddingsTheme&gt;;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#screentypes","title":"Screentypes","text":"<pre><code>interface ScreenTypes&lt;ThemeType&gt; {\ndesktop?: ThemeType;\ntablet?: ThemeType;\nmobile?: ThemeType;\nxs?: ThemeType;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#layertheme","title":"LayerTheme","text":"<pre><code>interface LayerTheme {\nbase?: Partial&lt;CmpTheme&gt;;\nfirst?: Partial&lt;CmpTheme&gt;;\nsecond?: Partial&lt;CmpTheme&gt;;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#cmptheme","title":"CmpTheme","text":"<pre><code>interface CmpTheme {\nborder: {\nradius: string;\n};\nborderRadiusLayer: OptionalSettingsData;\nborderRadiusButton: OptionalSettingsData;\nbuttons: CmpButtonsType[][];\ncolors: {\nacceptBg?: OptionalSettingsData;\nacceptTxt?: OptionalSettingsData;\nbackground?: OptionalSettingsData;\nborder?: OptionalSettingsData;\ndenyBg?: OptionalSettingsData;\ndenyTxt?: OptionalSettingsData;\nlink?: OptionalSettingsData;\nmoreBg?: OptionalSettingsData;\nmoreTxt?: OptionalSettingsData;\nneutral?: OptionalSettingsData;\noverlay?: OptionalSettingsData;\nprimary?: OptionalSettingsData;\nprivacyBg?: OptionalSettingsData;\nprivacyIcon?: OptionalSettingsData;\nsaveBg?: OptionalSettingsData;\nsaveTxt?: OptionalSettingsData;\ntabActive?: OptionalSettingsData;\ntabInactive?: OptionalSettingsData;\ntoggleActive?: OptionalSettingsData;\ntoggleInactive?: OptionalSettingsData;\ntoggleDisabled?: OptionalSettingsData;\ntoggleActiveIcon?: OptionalSettingsData;\ntoggleInactiveIcon?: OptionalSettingsData;\ntoggleDisabledIcon?: OptionalSettingsData;\ntertiary?: OptionalSettingsData;\ntext?: OptionalSettingsData;\nccpaButtonColor?: OptionalSettingsData;\nccpaButtonTextColor?: OptionalSettingsData;\n};\nscrollbar: {\nthumbColor?: OptionalSettingsData;\n};\ndirection: 'ltr' | 'rtl';\nfonts: {\nfamily: string;\n};\nhideDenyBtn: boolean;\nhideLanguageSwitch: boolean;\nlogo: {\nurl: string;\nalt: string;\nposition: 'left' | 'center' | 'right';\n};\nfooter: {\nisCentered: boolean;\n};\nmaxBannerWidth: string;\nname: string;\noverlayOpacity: string;\nposition: 'left' | 'center' | 'right' | 'bottom';\nremoveCcpaToggle?: boolean;\nsecondLayerTrigger: string;\nspacing: Spacing;\ntypography: {\ncolor?: OptionalSettingsData;\nfont?: OptionalSettingsData;\nsize?: number | undefined;\n};\nuseBackgroundShadow: boolean;\nuseOverlay?: boolean;\ncloseOption?: CLOSE_OPTION | null;\ntcf?: {\nshowDescriptions?: boolean;\nhideNonIab?: boolean;\nhideToggles?: boolean;\nshowSharedOutsideEu?: boolean;\n};\nshowCategoriesToggles: boolean;\nshowMoreInformationLink?: boolean;\nhideDataProcessingServices?: boolean;\nhideServicesToggles?: boolean;\ndefaultTab: 'FIRST' | 'SECOND';\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#privacybuttontheme","title":"PrivacyButtonTheme","text":"<pre><code>interface PrivacyButtonTheme {\nposition: 'left' | 'right';\nsize: number;\nbackgroundColor: string;\npages: string[];\niconUrl: string;\niconColor: string;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#consentdetails","title":"ConsentDetails","text":"<pre><code>interface ConsentDetails {\nconsent: ConsentData;\nservices: Record&lt;string, ServiceData&gt;;\ncategories: Record&lt;string, CategoryData&gt;;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#consentdata","title":"ConsentData","text":"<pre><code>interface ConsentData {\nstatus: 'ALL_ACCEPTED' | 'ALL_DENIED' | 'SOME_ACCEPTED' | 'SOME_DENIED';\nserviceIds?: string[];\nrequired: boolean;\nversion: number;\ncontrollerId: string;\nlanguage: string;\ncreatedAt: number;\nupdatedAt: number;\nupdatedBy: ConsentActionType;\nsetting: SettingData;\ntype: ConsentType;\nhash: string;\ngpcSignal?: boolean;\nisBot?: true;\nisOutsideEu?: true;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#settingdata","title":"SettingData","text":"<pre><code>interface SettingData {\nid: string;\ntype: SettingType;\nversion: string;\nabVariant?: string;\nsandbox?: true;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#servicedata","title":"ServiceData","text":"<pre><code>interface ServiceData {\nname: string;\nversion: string;\ncategory: string;\nessential: boolean;\nconsent?: {\ngiven: boolean;\ntype: 'IMPLICIT' | 'EXPLICIT';\n};\ngcm?: {\nanalyticsStorage?: true;\nadStorage?: true;\n};\nsubservices?: Record&lt;string, ServiceData&gt;;\nthirdCountryDataTransfer?: boolean;\nstatus?: 'added';\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#categorydata","title":"CategoryData","text":"<pre><code>interface CategoryData {\nessential?: boolean;\nstate: 'ALL_DENIED' | 'SOME_ACCEPTED' | 'ALL_ACCEPTED';\ndps: Record&lt;string, boolean&gt; | null;\nhidden?: boolean;\n}\n</code></pre>"},{"location":"web/features/api/types/","title":"Types","text":""},{"location":"web/features/api/types/#types","title":"Types","text":""},{"location":"web/features/api/types/#themetype","title":"ThemeType","text":"<pre><code>type ThemeType = {\ncolors: {\nblack: string,\nwhite: string,\nlayout: {\nmainPage: {\nleft: {\nbackground: string,\n},\nright: {\nbackground: string,\n},\n},\nmanagePage: {\nleft: {\nbackground: string,\n},\nright: {\nbackground: string,\n},\n},\nqrCode: {\nleft: {\nbackground: string,\n},\nright: {\nbackground: string,\n},\n},\n},\ntoggle: {\non: {\nbackground: string,\n},\noff: {\nbackground: string,\n},\n},\ntext: {\ncolor: string,\ncolor95: string,\ncolor90: string,\ncolor08: string,\n},\n},\npadding: {\nleftContainer: {\nmainPage: {\nvertical: number,\nhorizontal: number,\n},\nmanagePage: {\nvertical: number,\nhorizontal: number,\n},\nqrCode: {\nvertical: number,\nhorizontal: number,\n},\n},\nrightContainer: {\nmainPage: {\nvertical: number,\nhorizontal: number,\n},\nmanagePage: {\nvertical: number,\nhorizontal: number,\n},\nqrCode: {\nvertical: number,\nhorizontal: number,\n},\n},\ncard: {\nvertical: number,\nhorizontal: number,\n},\ndpsInfoCard: {\nvertical: number,\nhorizontal: number,\n},\nqrCodeModal: {\nvertical: number,\nhorizontal: number,\n},\n},\nfont: {\nsize: {\nlayout: {\nlarge: number,\nmedium: number,\n},\nbutton: {\nlarge: number,\nmedium: number,\n},\ncard: {\nlarge: number,\nmedium: number,\n},\ncardList: {\nlarge: number,\nmedium: number,\n},\ndpsInfoCard: {\nlarge: number,\nmedium: number,\n},\nqrCodeModal: {\nlarge: number,\nmedium: number,\n},\n},\nweight: {\nregular: number,\nsemiBold: number,\n},\n},\nmetrics: {\nmainPage: {\nleftContainer: {\nwidth: string,\n},\nrightContainer: {\nwidth: string,\n},\n},\nmanagePage: {\nleftContainer: {\nwidth: string,\n},\nrightContainer: {\nwidth: string,\n},\n},\n},\n};\n</code></pre>"},{"location":"web/features/api/types/#cmpbuttonstype","title":"CmpButtonsType","text":"<pre><code>type CmpButtonsType = 'accept' | 'deny' | 'more' | 'save' | 'ok';\n</code></pre>"},{"location":"web/features/api/types/#optionalsettingsdata","title":"OptionalSettingsData","text":"<pre><code>type OptionalSettingsData = string | null | undefined;\n</code></pre>"},{"location":"web/features/api/types/#embeddingstheme","title":"EmbeddingsTheme","text":"<pre><code>type EmbeddingsTheme = CmpTheme;\n</code></pre>"},{"location":"web/features/api/types/#consentactiontype","title":"ConsentActionType","text":"<pre><code>export type ConsentActionType = 'onAcceptAllServices' | 'onDenyAllServices' | 'onEssentialChange' | 'onInitialPageLoad' | 'onNonEURegion' | 'onSessionRestored' | 'onTcfStringChange' | 'onUpdateServices' | 'onMobileSessionRestore';\n</code></pre>"},{"location":"web/features/api/types/#settingtype","title":"SettingType","text":"<pre><code>type SettingType = 'TCF' | 'GDPR' | 'CCPA';\n</code></pre>"},{"location":"web/features/api/types/#consenttype","title":"ConsentType","text":"<pre><code>type ConsentType = 'IMPLICIT' | 'EXPLICIT';\n</code></pre>"},{"location":"web/features/custom-css/configuration/","title":"Custom CSS usage","text":"<p>To offer the utmost degree of customization, V3 allows direct addressing of all elements within the Consent Management Platform (CMP) using custom CSS.</p>"},{"location":"web/features/custom-css/configuration/#applying-css-changes","title":"Applying CSS changes","text":"<p>To enable the utilization of custom CSS, it is necessary to input your CSS code into the 'Custom CSS' field. This field is accessible within the Usercentrics Admin Interface under the 'Appearance' -&gt; 'Styling' section. It is noteworthy that a key distinction between V2 and V3 lies in their handling of custom CSS. In V2, styling was limited to a predefined set of classes, while in V3, custom CSS is not parsed in any way, but is directly embedded within a <code>&lt;style&gt;</code> tag in the Shadow DOM housing the CMP.</p> <p>Disclaimer</p> <p>By using Custom CSS, you will be in control of your custom UI. Please be aware that your CSS adjustments will affect the layout of your CMP and possibly also of your website. You'll make these adjustments at your own risk and outside of the sphere of the Usercentrics support.</p>"},{"location":"web/features/custom-css/configuration/#entry-points","title":"Entry points","text":"<p>To enhance the usability of custom CSS, user-friendly selectors have been introduced for the most frequently requested elements that can be modified within the CMP. Presented below is a list of these selectors. </p>"},{"location":"web/features/custom-css/configuration/#cmp","title":"CMP","text":"CSS Selector Description Visual Guide Link <code>#uc-main-dialog</code> References the main CMP container Visual Guide <code>#uc-privacy-title</code> References the title in the main CMP text area Visual Guide <code>#uc-privacy-description</code> References the description in the main CMP text area Visual Guide <code>#more</code> References the \"More\" action button Visual Guide <code>#deny</code> References the \"Deny\" action button Visual Guide <code>#accept</code> References the \"Accept\" action button Visual Guide <code>#save</code> References the \"Save\" action button Visual Guide <code>.uc-button-link</code> References every link under the CMP text area Visual Guide <code>.uc-toggle</code> References every toggle in the CMP Visual Guide <code>#uc-[identifier]-[id]-toggle</code> References a specific toggle in the CMP Visual Guide <code>#uc-tabs-header</code> References the second layer tab header Visual Guide <code>.uc-expandable-card</code> References every expandable card in the CMP Visual Guide <code>#controller-id-item</code> References the Controller ID specific expandable card Visual Guide <code>.uc-details-title</code> References every title for every service section inside the expandable cards Visual Guide <code>.uc-details-description</code> References every description in every service section inside the expandable cards Visual Guide <code>.uc-details-tag</code> References every tag in every service section inside the expandable cards Visual Guide"},{"location":"web/features/custom-css/configuration/#service-modal","title":"Service modal","text":"<p>When a service (or a subservice) is opened in a standalone view, a modal is generated for this specific purpose. Multiple modals can be open at the same time and they share their internal structure with the expandable cards within the CMP. As a result, <code>.uc-details-[..]</code> namespaced selectors such as <code>.uc-details-title</code> and <code>.uc-details-description</code> are also applicable within this context. The modal-specfic entry points are:</p> CSS Selector Description Visual Guide Link <code>.uc-modal-overlay</code> References every modal wrapper Visual Guide <code>.uc-modal</code> References every modal main container Visual Guide <code>.uc-modal-header</code> References every modal header element Visual Guide <code>.uc-modal-footer</code> References every modal footer element Visual Guide <p>Info</p> <p>Read more about how to style both the CMP and modals conditionally under Conditional Styling</p> <p>Tip</p> <p>It is important to emphasize that custom CSS can technically be applied to any element; however, these predefined entry points are provided to streamline the customization process for your convenience.</p>"},{"location":"web/features/custom-css/configuration/#conditional-styling","title":"Conditional styling","text":"<p>The selector <code>#uc-main-dialog</code> designates the primary container within the CMP. </p> <p>Illustration</p> <p> </p> <p>This container may have additional classes that allow for the targeting of elements on specific CMP layers or under specific device and configuration conditions. To apply CSS targeting based on devices or layers, these classes can be concatenated with the selector for the main container. The following classes represent various device-related criteria, layer distinctions, language direction, and framework indicators available for customization on the main dialog container.</p>"},{"location":"web/features/custom-css/configuration/#devices","title":"Devices","text":"Class Screen size Breakpoint <code>.xs</code> Extra small &lt; 360 px <code>.mobile</code> Small &gt; 360 px <code>.tablet</code> Medium &gt; 768 px <code>.desktop</code> Large &gt; 1024 px"},{"location":"web/features/custom-css/configuration/#layers","title":"Layers","text":"Class Layer name <code>.first</code> First layer <code>.second</code> Second layer"},{"location":"web/features/custom-css/configuration/#language-direction","title":"Language direction","text":"Class Language Direction <code>.ltr</code> Left-to-Right <code>.rtl</code> Right-to-Left"},{"location":"web/features/custom-css/configuration/#framework-indicator","title":"Framework indicator","text":"Class Legal Framework <code>.gpdr</code> General Data Protection Regulation (GDPR) <code>.tcf</code> Transparency and Consent Framework (TCF) <code>.ccpa</code> California Consumer Privacy Act (CCPA)"},{"location":"web/features/custom-css/configuration/#examples-cmp","title":"Examples (CMP)","text":"<pre><code>#uc-main-dialog.mobile.second {\n/* Custom CSS styles for the cmp container on the second layer on mobile devices */\n/* Add your styles here */\n}\n</code></pre> <p>If you intend to direct your styling towards a specific element within the CMP on a particular device, you can utilize the device modifier by attaching it to the main container as the root targeting element.</p> <pre><code>#uc-main-dialog.tablet .uc-expandable-card {\n/* Custom CSS styles for expandable cards on tablet */\n/* Add your styles here */\n}\n</code></pre>"},{"location":"web/features/custom-css/configuration/#service-modal_1","title":"Service modal","text":"<p>The selector <code>.uc-modal-overlay</code> designates every primary modal wrapper. </p> <p>Illustration</p> <p> </p> <p>The service modal elements exist as standalone components outside the primary CMP container. As a result, the device-related classes are also present on the modal wrappers.</p>"},{"location":"web/features/custom-css/configuration/#examples-modal","title":"Examples (Modal)","text":"<pre><code>.uc-modal-wrapper.desktop .uc-details-title {\n/* Custom CSS styles for modal service section titles on desktop */\n/* Add your styles here */\n}\n\n.uc-modal-footer button {\n/* Custom CSS styles for the modal footer button */\n/* Add your styles here */\n}\n</code></pre> <p>Tip</p> <p>It is worth noting that the utilization of our device modifier is optional, as you can place your own media queries for precise screen targeting within Custom CSS if this is more suitable.</p>"},{"location":"web/features/custom-css/configuration/#visual-guide","title":"Visual guide","text":""},{"location":"web/features/custom-css/configuration/#cmp-first-layer","title":"CMP First Layer","text":"<p>Illustration</p> <p> </p>"},{"location":"web/features/custom-css/configuration/#cmp-second-layer","title":"CMP Second Layer","text":"<p>Illustration (1 / 2)</p> <p> </p> <p>Illustration (2 / 2)</p> <p> </p>"},{"location":"web/features/custom-css/configuration/#service-modal_2","title":"Service Modal","text":"<p>Illustration</p> <p> </p>"},{"location":"web/features/embeddings/embeddings/","title":"Embeddings","text":"<p>Design your privacy policy page with our embeddings so you don't have to maintain the difference between your privacy policy and your CMP. Keep your legally required information easily up to date, instead of extracting the information from our CMP and manually integrate it into your privacy policy page.</p>"},{"location":"web/features/embeddings/embeddings/#coming-from-v2","title":"Coming from V2?","text":"<p>If you already have an implementation for Embeddings on your website using our CMP V2, please refer to the Migration Guide.</p>"},{"location":"web/features/embeddings/embeddings/#embedding-all-dps","title":"Embedding all DPS","text":"<p>In order to simplify the Embeddings usage, in this new version, the embeddings were streamlined to be a reflection of the CMP itself. That means that all the information present on the CMP will also be present on the Embeddings.</p>"},{"location":"web/features/embeddings/embeddings/#example","title":"Example","text":"GDPRTCF <pre><code>&lt;div class=\"uc-embed\"&gt;&lt;/div&gt;\n</code></pre> <pre><code>&lt;div class=\"uc-embed-tcf\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"web/features/embeddings/embeddings/#gdpr","title":"GDPR","text":""},{"location":"web/features/embeddings/embeddings/#embedding-a-specific-dps","title":"Embedding a specific DPS","text":"<p>You can also choose to only embed one single DPS instead, for that you should use the properties <code>uc-embed-type</code> and <code>uc-embed-service-id</code> for both the type of embed and the ID of the service, respectively.</p>"},{"location":"web/features/embeddings/embeddings/#example_1","title":"Example","text":"<pre><code>    &lt;div \n      class=\"uc-embed\"\n      uc-embed-type=\"service-specific\"\n      uc-embed-service-id=\"BJz7qNsdj-7\"&gt;\n    &lt;/div&gt;\n</code></pre> Illustration"},{"location":"web/features/embeddings/embeddings/#embedding-categories","title":"Embedding Categories","text":"<p>You can choose to either display all Categories information (that includes their respective services) or choose to only display Categories (without their respective services).</p>"},{"location":"web/features/embeddings/embeddings/#example_2","title":"Example","text":"Categories (with Service information)Categories only <pre><code>&lt;div\n  class=\"uc-embed\"\n  uc-embed-type=\"category\"&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>&lt;div\n  class=\"uc-embed\"\n  uc-embed-type=\"category-only\"&gt;\n&lt;/div&gt;\n</code></pre> Illustration uc-embed-type=\"category\"uc-embed-type=\"category-only\""},{"location":"web/features/embeddings/embeddings/#tcf","title":"TCF","text":""},{"location":"web/features/embeddings/embeddings/#embedding-purposes","title":"Embedding Purposes","text":"<p>When using the TCF option, you can embed Purposes using the following example.</p>"},{"location":"web/features/embeddings/embeddings/#example_3","title":"Example","text":"<pre><code>    &lt;div\n      class=\"uc-embed-tcf\"\n      uc-embed-type=\"purposes\"&gt;\n    &lt;/div&gt;\n</code></pre> Illustration"},{"location":"web/features/embeddings/embeddings/#embedding-vendors","title":"Embedding Vendors","text":"<p>When using the TCF option, you can embed Vendors using the following example.</p>"},{"location":"web/features/embeddings/embeddings/#example_4","title":"Example","text":"<pre><code>    &lt;div\n      class=\"uc-embed-tcf\"\n      uc-embed-type=\"vendors\"&gt;\n    &lt;/div&gt;\n</code></pre> Illustration"},{"location":"web/features/embeddings/embeddings/#other-properties","title":"Other properties","text":"<p>The following properties are applicable to any configuration, regardless of the legislation (GDPR and/or TCF), unless stated otherwise.</p>"},{"location":"web/features/embeddings/embeddings/#showhide-toggles","title":"Show/Hide Toggles","text":"<p>In order to show or hide all toggles, you should use the property <code>uc-embed-show-toggle</code>. By default this is set to false, meaning no toggles will be shown.</p> Illustration uc-embed-show-toggle=\"true\"uc-embed-show-toggle=\"false\" <p></p> <p></p>"},{"location":"web/features/embeddings/embeddings/#properties","title":"Properties","text":""},{"location":"web/features/embeddings/embeddings/#class","title":"class","text":"<p>Can be either <code>uc-embed</code> if you are on GDPR and <code>uc-embed-tcf</code> if you are on TCF.</p> Value Description uc-embed Embeddings for GDPR uc-embed-tcf Embeddings for TCF"},{"location":"web/features/embeddings/embeddings/#uc-embed-show-toggle","title":"uc-embed-show-toggle","text":"<p>You can choose to show or hide toggles on the Embeddings. Its value is <code>false</code> by default.</p> Value Description true Shows all toggles false (default) Hides all toggles"},{"location":"web/features/embeddings/embeddings/#uc-embed-service-id","title":"uc-embed-service-id","text":"<p>This property is only applicablen when <code>class=\"uc-embed\"</code></p> <p>To be used together with <code>uc-embed-type=\"service-specific\"</code>. It should hold the Service ID to be displayed.</p>"},{"location":"web/features/embeddings/embeddings/#uc-embed-type","title":"uc-embed-type","text":"<p>Choose what type of information is to be displayed on the Embeddings. Its value is <code>all</code> by default.</p> Value Description all (default) Embeds all the DPS information category Embeds categories with their respective services category-only Embeds only categories service-specific Embeds a single service (used together with <code>uc-embed-service-id</code>) purposes Embeds only purposes (TCF specific) vendors Embeds only vendors (TCF specific)"},{"location":"web/features/events/consent-events/","title":"consent_status","text":"<p>This is an event that serves as a retrocompatibility if you're coming from V2, we suggest to use UC_CONSENT event if you're not migrating from V2.</p> <p>Usercentrics provides Data Layer and Window events that specifically fire on consent changes.</p> <p>You can check the contents of the dataLayer by using <code>window.dataLayer</code></p> <p>Below the structure of the <code>consent_status</code> is represented:</p> <pre><code>{\n\"action\": \"onInitialPageLoad\",\n\"event\": \"consent_status\",\n\"type\": \"EXPLICIT\",\n\"Service One\": true,\n\"Usercentrics Consent Management Platform\": true,\n\"Service Two\": false,\n\"ucCategory\": {\n\"essential\": true,\n\"functional\": false,\n\"marketing\": null,\n},\n(...)\n}\n</code></pre> Property Description action The action that triggered the event event Name of the event (<code>consent_status</code>) type Type of the event ucCategory Object containing the identifier of all the categories and their consent status <code>SERVICE_NAME</code> Entry that contains the status of the service"},{"location":"web/features/events/consent-events/#action","title":"action","text":"<p>The action that triggered the event. Below are all the possible values for this property:</p> Value Description onAcceptAllServices Triggered once you click \u201cAccept All\u201d onDenyAllServices Triggered once you click \u201cDeny All\u201d onEssentialChange onInitialPageLoad Triggered on page load onNonEURegion onSessionRestored Triggered in one of these three situations: <ul><li>When you replace current consents by using a given Controller ID </li><li>When you use Cross Domain Consent Sharing </li><li>Via WebView User Session Continuity</li></ul> onTcfStringChange onUpdateServices Triggered once you edit a specific set of services or a single service and these choices are saved. onMobileSessionRestore"},{"location":"web/features/events/consent-events/#type","title":"type","text":"<p>Type of the event. Below are all the possible values for this property:</p> Value Description <code>IMPLICIT</code> When the user didn't interact with the banner <code>EXPLICIT</code> When the user actively gives any type of consent"},{"location":"web/features/events/consent-events/#uccategory","title":"ucCategory","text":"<p>Object containing the identifier of all the categories and their consent status. The consent status in this object can either be:</p> Value Description <code>true</code> If all services belonging to this category have the state <code>true</code> <code>false</code> If all services belonging to this category have the state <code>false</code> <code>null</code> If services belonging to this category have mixed consent states: e.g. Marketing: null if one service is false while other services in this category are true"},{"location":"web/features/events/uc-consent/","title":"UC_CONSENT","text":"<p>This event gets triggered when consent changes.</p>"},{"location":"web/features/events/uc-consent/#event-detail-structure","title":"Event Detail Structure","text":"<p>The <code>event.detail</code> that is returned will contain a ConsentDetails object</p>"},{"location":"web/features/events/uc-consent/#example","title":"Example","text":"Example<pre><code>window.addEventListener('UC_CONSENT', function (event) {\nconsole.log('UC_CONSENT event detail', event.detail)\n});\n</code></pre>"},{"location":"web/features/events/uc-ui-cmp-event/","title":"UC_UI_CMP_EVENT","text":"<p>The <code>UC_UI_CMP_EVENT</code> event is triggered by the most important actions that can be performed in the CMP, enabling you to listen to user interactions.</p> <p>This event might prove useful when trying to compare the different variants when using the AB testing feature</p> <p>The structure of the detail (<code>event.detail</code>) is the following: <pre><code>{\nabTestVariant: undefined,\nsource: \"second\",\ntype: \"CMP_SHOWN\"\n}\n</code></pre></p>"},{"location":"web/features/events/uc-ui-cmp-event/#abtestvariant","title":"abTestVariant","text":"<p>String that identifies the AB Test Variant currently in use, if none, the value will be <code>undefined</code>.</p>"},{"location":"web/features/events/uc-ui-cmp-event/#source","title":"source","text":"<p>Where the event was triggered, it can be:</p> Source Description \"none\" Triggered when the CMP was not being shown \"button\" Triggered when the Privacy Button was being shown \"first\" Triggered when the First Layer was being shown \"second\" Triggered when the Second Layer was being shown \"embeddings\" Triggers when the Embeddings were being shown \"__ucCmp\" Triggered by the <code>__ucCmp</code> window object"},{"location":"web/features/events/uc-ui-cmp-event/#type","title":"type","text":"Event Name Description CMP_SHOWN Triggered when the CMP is shown ACCEPT_ALL Triggered by clicking the Accept All button DENY_ALL Triggered by clicking the Deny All button SAVE Triggered by clicking the Save button MORE_INFORMATION_LINK Triggered by clicking the More Information button IMPRINT_LINK Triggered by clicking the Imprint link PRIVACY_POLICY_LINK Triggered by clicking the Privacy Policy link"},{"location":"web/features/events/uc-ui-cmp-event/#example","title":"Example","text":"Example<pre><code>window.addEventListener('UC_UI_CMP_EVENT', function(event) {\nconsole.log('UC_UI_CMP_EVENT event detail', event.detail)\n});\n</code></pre>"},{"location":"web/features/events/uc-ui-initialized/","title":"UC_UI_INITIALIZED","text":"<p>This is an example of how to wait for the CMP to initialise before executing code</p>"},{"location":"web/features/events/uc-ui-initialized/#example","title":"Example","text":"Example<pre><code>window.addEventListener('UC_UI_INITIALIZED', function(event) {\n// Initialized\n});\n</code></pre>"},{"location":"web/features/events/uc-ui-view-changed/","title":"UC_UI_VIEW_CHANGED","text":"<p>This event gets triggered when the user:</p> <ul> <li>Opens a layer</li> <li>Switches from layer one to layer two</li> <li>Switches from layer two to layer one</li> <li>Closes all layers</li> </ul> <p>The event also holds additional information with more details about the user behaviour. It is possible to know the current and previous layer displayed to the user.</p> <p>Possible values for the additional data:</p> Value Description FIRST_LAYER The first layer NONE No layer is/was shown PRIVACY_BUTTON The Privacy Button SECOND_LAYER The second Layer"},{"location":"web/features/events/uc-ui-view-changed/#example","title":"Example","text":"Example<pre><code>window.addEventListener('UC_UI_VIEW_CHANGED', function(event) {\nconsole.log('Current view is: ' + event.detail.view);\nconsole.log('Previous view is: ' + event.detail.previousView);\n});\n</code></pre>"},{"location":"web/features/events/examples/add-script-to-head/","title":"Add a script to the head via Event Listener","text":""},{"location":"web/features/events/examples/add-script-to-head/#example-1","title":"Example 1","text":"<p>This example shows how to inject the script tag of a service into the <code>&lt;head&gt;</code> element of the page when a user gives consent. If the user gave consent in the past, the iframe will be loaded after the page loads.</p> <pre><code>&lt;script&gt;\nwindow.addEventListener('ucEvent', function (e) {\nif (e.detail.type == 'EXPLICIT' &amp;&amp; e.detail['SERVICE_NAME']) {\nconst sc = eval(document.createElement('script'));\nsc.setAttribute('src', 'SCRIPT_SRC');\nsc.setAttribute('type', 'text/javascript');\ndocument.head.appendChild(sc);\n}\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/add-script-to-head/#example-2","title":"Example 2","text":"<p>This example shows how to inject script tags for services that consent has previously been given for, i.e. on page re-visit or reload.</p> <pre><code>&lt;script&gt;\nwindow.addEventListener('UC_UI_INITIALIZED', function (event) {\n// initialized\nif (__ucCmp.getServices().filter((data) =&gt; (data.id === 'SERVICE_ID') &amp; (data.consent.status === true)).length == 1) {\nconst sc = eval(document.createElement('script'));\nsc.setAttribute('src', 'SCRIPT_SRC');\nsc.setAttribute('type', 'text/javascript');\ndocument.head.appendChild(sc);\n}\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/first-visit/","title":"Detecting first-time visits by listening to the consent status in dataLayer","text":"<pre><code>&lt;script&gt;\nvar page = 0;\nwindow.addEventListener('uc-event', function (e) {\nif (e.detail.event == 'consent_status' &amp;&amp; e.detail.type == 'implicit' &amp;&amp; page == 0) {\npage = 1;\ndataLayer.push('FirstUserVisit');\n} else {\nif (e.detail.event == 'consent_status' &amp;&amp; e.detail.type == 'explicit' &amp;&amp; page == 0) {\npage = 1;\ndataLayer.push('UserAlreadyConsented');\n} else {\nif (e.detail.event == 'consent_status' &amp;&amp; e.detail.type == 'explicit' &amp;&amp; page == 1) {\ndataLayer.push('UserChangedConsents');\n}\n}\n}\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/hide-iframes/","title":"Hide iframes when the banner is shown","text":"<p>Requirements</p> <p>In both examples it is necessary to add a <code>&lt;div&gt;</code> in the place where you want to add the iframe <pre><code>&lt;div id=\"log\"&gt;&lt;/div&gt;\n</code></pre></p> <pre><code>&lt;script&gt;\nwindow.addEventListener(\"CMP_SHOWN\", function (e) {\ndocument.getElementById('log').innerHTML = '';\n}\n});\nwindow.addEventListener(\"SAVE\", function (e) {\ndocument.getElementById('log').innerHTML = '&lt;iframe id=\"IFRAME_ID\" src=\"IFRAME_SRC\"&gt;&lt;/iframe&gt;';\n}\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/load-iframe/","title":"Load iframe via Event Listener","text":"<p>You can load iframes for services via an event listener. Below are two different examples, one with the <code>consent_status</code> event, and another with the <code>UC_UI_INITIALIZED</code> event.</p> <p>Requirements</p> <p>In both examples it is necessary to add a <code>&lt;div&gt;</code> in the place where you want to add the iframe <pre><code>&lt;div id=\"log\"&gt;&lt;/div&gt;\n</code></pre></p>"},{"location":"web/features/events/examples/load-iframe/#consent_status","title":"<code>consent_status</code>","text":"<p>In this example, the iframe is injected when the user gives consent. If the user gave consent in the past the iframe will be injected after page load.</p> <p>If during the session a user decides to deny consent, the iframe will also be removed without the need of refreshing the page.</p> <pre><code>&lt;script&gt;\nwindow.addEventListener('ucEvent', function (e) {\nif (e.detail.type == 'EXPLICIT' &amp;&amp; e.detail['SERVICE_NAME']) {\ndocument.getElementById('log').innerHTML =\n'&lt;iframe frameborder=\"0\" height=\"200\" width=\"200\" src=\"IFRAME_SRC\"&gt;&lt;/iframe&gt;';\n} else {\ndocument.getElementById('log').innerHTML = '';\n}\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/load-iframe/#uc_ui_initialized","title":"<code>UC_UI_INITIALIZED</code>","text":"<p>This example only works if the user gave consent in the past, or by reloading after consent is given.</p> <pre><code>&lt;script&gt;\nwindow.addEventListener('UC_UI_INITIALIZED', function (event) {\nif (__ucCmp.getServices().filter((data) =&gt; (data.id === 'SERVICE_ID') &amp; (data.consent.status === true)).length == 0) {\ndocument.getElementById('log').innerHTML = '';\n} else {\ndocument.getElementById('log').innerHTML =\n'&lt;iframe id=\"IFRAME_ID\" src=\"IFRAME_SCR\"&gt;&lt;/iframe&gt;';\n}\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/reload-page/","title":"Reload page after customer gives or changes consents","text":"<p>This script will perform a page refresh when a user gives or changes their consents.</p> <p>This script sets a variable to differentiate between the page load and the consent change</p> <pre><code>&lt;script&gt;\nvar page = 0;\nwindow.addEventListener('uc-event', function (e) {\nif (e.detail.event == 'consent_status' &amp;&amp; e.detail.type == 'implicit' &amp;&amp; page == 0) {\npage = 1;\n} else {\nif (e.detail.event == 'consent_status' &amp;&amp; e.detail.type == 'explicit' &amp;&amp; page == 0) {\npage = 1;\n} else {\nif (e.detail.event == 'consent_status' &amp;&amp; e.detail.type == 'explicit' &amp;&amp; page == 1) {\nlocation.reload();\n}\n}\n}\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/window-events/","title":"Listening to Window Event dispatches","text":"<p>It is also possible to listen to events that we dispatch with Window Event.</p> <p>The window event name can be configured in the admin interface under Implementation -&gt; Data Layer and Events -&gt; Window Event.</p> <p>In the following example we assume that you configured the Window Event events that we dispatch, with the name \"ucEvent\" in your admin interface.</p> <pre><code>window.addEventListener(\"ucEvent\", function (e) {    if(e.detail &amp;&amp; e.detail.event == \"consent_status\") {\n// check for consent status of service \"Google Ads Remarketing\"\nif(e.detail['Google Ads Remarketing'] === true) {\nconsole.log('Google Ads Remarketing has consent');\n}\nelse {\nconsole.log('Google Ads Remarketing has no consent');\n}\n}\n});\n</code></pre>"},{"location":"web/features/extensions/smart-data-protector/","title":"Smart Data Protector","text":""},{"location":"web/features/extensions/smart-data-protector/#smart-data-protector","title":"Smart Data Protector","text":""},{"location":"web/features/extensions/smart-data-protector/#introduction","title":"Introduction","text":"<p>The Usercentrics Smart Data Protector is a service that blocks third-party technologies you added to your website and activates them only for customers that gave their consent to do so. This service is not limited to cookies and can prevent multiple types of resources from being loaded, thus preventing data to be sent to the third-party service.</p> <p>For example, for a visual service like an embedded YouTube Video, the Smart Data Protector will not only prevent any data from being sent to the YouTube server but also provide your users with a preview image of the video, provided by our server. Similarly for a non-visual service like Google Analytics, it will block the scripts and prevent data from being sent to the servers of the service provider.</p>"},{"location":"web/features/extensions/smart-data-protector/#installation","title":"Installation","text":"<p>Important</p> <p>Add the following elements before all other script in your header. Do not set the asynchronous flag for the Smart Data Protector script, or else other scripts may load in parallel and are activated before the Smart Data Protector can block them.</p> <p>1: If not done already, add the Usercentrics CMP script tag to the <code>&lt;head&gt;</code> section of your website.</p> Settings-IDRuleset-ID Add the Settings-ID Javascript tag<pre><code>&lt;script\n    id=\"usercentrics-cmp\"\n    data-settings-id=\"YOUR_SETTINGS_ID\"\n    src=\"https://web.cmp.usercentrics.eu/ui/loader.js\"\n&gt;\n&lt;/script&gt;\n</code></pre> Add the Ruleset-ID Javascript tag<pre><code>&lt;script\n    id=\"usercentrics-cmp\"\n    data-ruleset-id=\"YOUR_RULESET_ID\"\n    src=\"https://web.cmp.usercentrics.eu/ui/loader.js\"\n&gt;\n&lt;/script&gt;\n</code></pre> <p>2: Add the templates of used Data Processing Services (e.g. YouTube) to your Settings in the Admin Interface. This step is required for the Smart Data Protector to be able to unblock the technologies after the user consented.</p> <p>3: Add the Smart Data Protector script in the <code>&lt;head&gt;</code> section as well.</p> Add the latest SDP Javascript tag<pre><code>&lt;script \n    type=\"application/javascript\"\n    src=\"https://privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\"\n&gt;\n&lt;/script&gt;\n</code></pre> <p>The script must load synchronously to block technologies before they are executed. Do not add attributes like <code>async</code>, <code>defer</code> or <code>type=\"module\"</code>.</p> <p>4: To improve performance, it is recommended to add the following statements at the top of your <code>&lt;head&gt;</code> section</p> Preload the latest SDP Javascript code<pre><code>&lt;link \n    rel=\"preconnect\" \n    href=\"//privacy-proxy.usercentrics.eu\"\n&gt;\n&lt;link \n    rel=\"preload\"\n    href=\"//privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\"\n    as=\"script\"\n&gt;\n</code></pre> <p>Finally, your <code>&lt;head&gt;</code> section should have a structure similar to this</p> Final head section structure<pre><code>&lt;head&gt;\n    &lt;title&gt;Page title&lt;/title&gt;\n    &lt;meta name=\"description\" content=\"Description\"&gt;\n    &lt;!-- [...] other meta tags --&gt;\n\n    &lt;!-- BEGIN Usercentrics related code --&gt;\n    &lt;link rel=\"preconnect\" href=\"//privacy-proxy.usercentrics.eu\"&gt;\n    &lt;link rel=\"preload\" href=\"//privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\" as=\"script\"&gt;\n    &lt;script id=\"usercentrics-cmp\" data-settings-id=\"XXXXXXX\" src=\"https://web.cmp.usercentrics.eu/ui/loader.js\" async&gt;&lt;/script&gt;\n    &lt;script type=\"application/javascript\" src=\"https://privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n// (optional) additional configs for the Smart Data Protector \nuc.reloadOnOptIn('BJz7qNsdj-7'); // reload page on YouTube opt-in\n&lt;/script&gt;\n    &lt;!-- END Usercentrics related code --&gt;\n\n    &lt;!-- IMPORTANT: all other scripts are added **after** the Smart Data Protector --&gt;\n    &lt;script type=\"application/javascript\" src=\"//...\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"web/features/extensions/smart-data-protector/#noscript-protection","title":"Noscript protection","text":"<p>If a user visits your website with JavaScript disabled in the browser, the Usercentrics Smart Data Protector can not prevent that data is loaded from the iframe source (e.g. Youtube Video). To be GDPR compliant for this case, replace the <code>src</code> attribute in your iframe with <code>uc-src</code>.</p> <p>Example: A Youtube Video iframe with adjusted attribute <code>&lt;iframe uc-src=\"https://www.youtube.com/embed/XXX\" /&gt;</code> will not be loaded even when JavaScript is disabled in the browser of the visitor.</p>"},{"location":"web/features/extensions/smart-data-protector/#known-limitations","title":"Known limitations","text":"<p>Due to how modern web browsers work, the Usercentrics Smart Data Protector currently has the following limitations:</p> <ul> <li> <p>The Usercentrics technology is based on JavaScript. If your customers have JavaScript deactivated in their web browser and you have a <code>&lt;noscript&gt;</code> tag added to your website, transferring data to a third party can not be blocked. We suggest not using <code>&lt;noscript&gt;</code> tags at all.</p> </li> <li> <p>Although the execution of JavaScript code is blocked, the Smart Data Protector cannot prevent the download of the referenced JavaScript files. Because the IP address is sent during such a request, a third party company will still receive the IP address of your visitors.</p> </li> <li> <p>The previous statement also holds true for CSS code. The Smart Data Protector cannot prevent the download of CSS files. A complete blocking is only possible for iframes.</p> </li> <li> <p>References to third party servers inside CSS files using the <code>@import</code> statement can not be blocked.</p> </li> <li> <p>The support for entire JavaScript libraries is not possible, as this would block or unblock all services implemented via the respective library and prevent a granular choice by the users.</p> </li> </ul>"},{"location":"web/features/extensions/smart-data-protector/#support-for-tcf-22","title":"Support for TCF 2.2","text":"<p>The Smart Data Protector (SDP) is a stand-alone product and works independently of the CMP version. When implemented on your website, the SDP will automatically block all supported technologies and replace them with a placeholder, regardless of whether the technology is part of the TCF 2.2 Global Vendor List or not. In order to respect the TCF 2.2 logic, the scripts of TCF 2.2 vendors should however not be blocked automatically. As a user, you must therefore ensure that the Smart Data Protector only blocks technologies / vendors that you do not wish to manage via TCF 2.2. We therefore do not recommend using the Smart Data Protector in combination with TCF 2.2.</p>"},{"location":"web/features/extensions/smart-data-protector/#support-for-custom-service-templates","title":"Support for custom service templates","text":"<p>The Smart Data Protector only recognizes the predefined service templates by default. Custom service templates can be supported by mapping the template ID of the custom template with the respective predefined template. Please add the following script under your Smart Data Protector script.</p> <p>Service template mapping<pre><code>&lt;script&gt;\nuc.setServiceAlias({'BJz7qNsdj-7': 'XXXXX'}) // XXXXX needs to be the templateId of custom Youtube service template\n// ... you can also map more service IDs similarly\n&lt;/script&gt;\n</code></pre> Please note that custom service templates must be mapped to the correct predefined service template in order for this feature to work correctly.</p>"},{"location":"web/features/extensions/smart-data-protector/#deactivate-smart-data-protector-for-specific-services","title":"Deactivate Smart Data Protector for specific services","text":"<p>The following scripts help to deactivate or activate Smart Data Protector for specific services.</p> <p>Important</p> <p>The Smart Data Protector will ignore deactivated Services completely. Whereas, when using <code>blockOnly</code> SDP will only block/unblock the mentioned services and ignore the rest.</p> <p>The methods <code>deactivateBlocking</code> and <code>blockOnly</code> should not be used together.</p> <p>Deactivate specific Services:</p> Deactivating a specific service<pre><code>&lt;script&gt;\nuc.deactivateBlocking([\n'BJz7qNsdj-7', // YouTube is not blocked\n'HkocEodjb7', // Google Analytics is not blocked\n// ... you can also add more service IDs similarly\n]);\n&lt;/script&gt;\n</code></pre> <p>Only activate specific Services:</p> Ignore non-defined services<pre><code>&lt;script&gt;\nuc.blockOnly([\n'BJz7qNsdj-7', // YouTube is blocked\n'HkocEodjb7', // Google Analytics is blocked\n// ... all other technologies will be ignored!\n]);\n&lt;/script&gt;\n</code></pre> <p>Please note, this script is only relevant for pre-defined Data Processing Services. If you want to use a custom service, kindly use the service ID for the corresponding pre-defined service</p>"},{"location":"web/features/extensions/smart-data-protector/#display-overlay-for-custom-elements","title":"Display overlay for custom elements","text":"<p>For visually-supported services, the Smart Data Protector provides overlays with contextual opt-ins for iframe elements by default, in case consent is not given. For non-iframe or custom elements that have a visual component, an overlay can be displayed using the following script:</p> Custom overlay implementation<pre><code>&lt;script&gt;\nuc.blockElements({\n'BJz7qNsdj-7': '#custom-container', // Show youtube overlay over the element with ID 'custom-container'\n'SJFe9NousWX': '.another-example' // Show Adition overlay over the element with class 'another-example'\n});\n&lt;/script&gt;\n</code></pre> <p>Example - if Google Maps is injected under a div tag <code>&lt;div id=\"12345\"&gt;&lt;/div&gt;</code> then the SDP script would be as follows:</p> Show Google Maps overlay on specific selector<pre><code>&lt;script&gt;\nuc.blockElements({\n'S1pcEj_jZX': '#12345' // Show google maps overlay over the element with ID '12345'\n});\n&lt;/script&gt;\n</code></pre> <p>Please note: This will still be applicable only for the currently supported technologies listed below.</p>"},{"location":"web/features/extensions/smart-data-protector/#set-custom-texts-on-sdp-overlays","title":"Set custom texts on SDP overlays","text":"<p>For the currently supported technologies, you can change the text displayed on the overlay by using the <code>uc.setCustomTranslations()</code> method. There are two ways to use this method, either with JavaScript variables or hosting files remotely.</p> <p>To enable the method via Javascript variables, add the following code to your html:</p> Configuring custom translations<pre><code>&lt;script&gt;\nuc.setCustomTranslations({\nen: {\nACCEPT: \"Custom EN Accept\",\nDEFAULT_DESCRIPTION: \"Custom EN Description\",\nDEFAULT_TITLE: \"Custom EN Title\"\n},\nde: {\nACCEPT: \"Custom DE Accept\",\nDEFAULT_DESCRIPTION: \"Custom DE Description\",\nDEFAULT_TITLE: \"Custom DE Title\"\n}\n});\n&lt;/script&gt;\n</code></pre> <p>To enable the method via remote files, you need to host the files with the custom translations on your server and provide the Smart Data Protector with the host. For example, to set custom English texts, follow the steps mentioned below:</p> <p>1: Create a file with English version and name it <code>en.json</code></p> <p>2: Fill it with following content:</p> en.json<pre><code>{\n\"ACCEPT\": \"Accept\",\n\"DEFAULT_DESCRIPTION\": \"We use %TECHNOLOGY_NAME% to embed content that may collect data about your activity. Please review the details and accept the service to see this content.\",\n\"DEFAULT_TITLE\": \"We need your consent to load the %TECHNOLOGY_NAME% service!\"\n}\n</code></pre> <p>3: Host this file on your server (e.g. https://website.com/translations/en.json)</p> <p>4: Repeat these steps for each language you want to change. Use the supported language ISO codes mentioned here.</p> <p>5: Add this script to your website:</p> Linking remote custom translations<pre><code>&lt;script&gt;\nuc.setCustomTranslations('https://website.com/translations');\n&lt;/script&gt;\n</code></pre> <p>Note</p> <p>The value in function should point to the directory where the language json file is stored.</p> <p>The Smart Data Protector will then try to fetch the custom translations for the selected language. In case some texts are missing for some languages, the default text provided by us will be displayed.</p> <p>List of all available text options: <code>ACCEPT</code>, <code>DEFAULT_DESCRIPTION</code>, <code>DEFAULT_TITLE</code>, <code>FACEBOOK_DESCRIPTION</code>, <code>MAP_DESCRIPTION</code>, <code>MIXCLOUD_DESCRIPTION</code>, <code>MORE_INFO</code>, <code>NOT_PERMITTED_TEXT</code>, <code>PAYPAL_DESCRIPTION</code>, <code>POWERED_BY</code>, <code>RECAPTCHA_ALERT</code>, <code>RECAPTCHA_DESCRIPTION</code>, <code>VIDEO_DESCRIPTION</code>, <code>XING_DESCRIPTION</code></p> <p>The following diagram shows some of above options:</p> <p>Illustration - Overlay labels</p> <p> </p> <p>In case if something is wrong with CMP <code>NOT_PERMITTED_TEXT</code> is shown instead of <code>DEFAULT_DESCRIPTION</code>.</p> <p>In order to provide more context, some technologies use different texts instead of the default ones. Find the list of these technologies below</p> Option Template Id Description <code>FACEBOOK_DESCRIPTION</code> XYQZBUojc Facebook <code>MAP_DESCRIPTION</code> S1pcEj_jZX Google Maps <code>MIXCLOUD_DESCRIPTION</code> 4UGBLUJUN Mixcloud <code>PAYPAL_DESCRIPTION</code> JiFH1ubU PayPal <code>RECAPTCHA_DESCRIPTION</code> Hko_qNsui-Q Recaptcha overlay description <code>RECAPTCHA_ALERT</code> Hko_qNsui-Q For recaptcha 3 we have to use some specific functionality (alert is shown instead of overlay). So above text option is used for this alert description <code>VIDEO_DESCRIPTION</code> BJz7qNsdj-7, HyEX5Nidi-m, SJ1aqNjOs-m For some services (YouTube, Vimeo, Wistia) we use another type of embedding - video embedding. This option is used for the overlay description of above technologies <code>XING_DESCRIPTION</code> BJREqEiOiZQ Xing <p>Examples of custom translations:</p> <p>en.json</p> <p>de.json</p>"},{"location":"web/features/extensions/smart-data-protector/#reload-page-on-consent-changes","title":"Reload Page on Consent Changes","text":"<p>After implementing all the necessary installation steps, certain technologies (especially implemented via Javascript libraries, like Lightbox) might still not be enabled correctly after the consent is given. In such cases, we provide the fallback option to trigger a page reload in order to restore the technologies correctly.</p> <p>Please add the following script to your website to trigger a page reload, after the consent is given.</p> Reloading when opting in to specific service<pre><code>&lt;script type=\"application/javascript\" src=\"https://privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\"&gt;\n&lt;/script&gt;\n&lt;script&gt;\nuc.reloadOnOptIn('BJz7qNsdj-7'); // reload page on YouTube opt-in\n// ... you can also add more service IDs similarly\n&lt;/script&gt;\n</code></pre> <p>Similarly, in case the consent is revoked, we also provide the fallback option to trigger a page reload in order to block the technologies correctly.</p> <p>Please add the following script to your website to trigger a page reload, after the consent is revoked.</p> Reloading when opting out of specific service<pre><code>&lt;script type=\"application/javascript\" src=\"https://privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\"&gt;\n&lt;/script&gt;\n&lt;script&gt;\nuc.reloadOnOptOut('BJz7qNsdj-7'); // reload page on YouTube opt-out\n// ... you can also add more service IDs similarly\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/extensions/smart-data-protector/#styling-customization-css","title":"Styling Customization (CSS)","text":"<p>In case the overlay is not displayed correctly on your website or the design does not fit, the layout of the overlays can be customized with your individual CSS code. We recommend to use the descendant combinator to make your rules more specific, for example to change the accept button color use the parent container as a reference:</p> Targeting the accept button<pre><code>.uc-embedding-container .uc-embedding-buttons .uc-embedding-accept {\nbackground-color: green;\n}\n</code></pre> <p>The following diagram shows all available CSS classes:</p> <p>Illustration - Overlay CSS classes</p> <p> </p>"},{"location":"web/features/extensions/smart-data-protector/#currently-supported-technologies","title":"Currently supported technologies","text":"<p>We support as many implementations as possible of the technologies listed below. Technologies are sorted alphabetically.</p> <ul> <li>Add This (ByOJZ54odjW7)</li> <li>Adition (SJFe9NousWX)</li> <li>Adobe Experience Cloud (f6nkjdUL)</li> <li>Adobe Typekit (HJy4c4s_jbX)</li> <li>Airtable (IdaQw5cVN)</li> <li>Amazon advertising (N2spyFPL)</li> <li>anchor.fm (6znewg1hW)</li> <li>ArcGIS Map (aXnTc_Y3n)</li> <li>AT Internet (fiQX6mqi)</li> <li>Audioboom (c6lt-aZ0)</li> <li>Audiocon (mdM6tHJ4s)</li> <li>Bing Maps (abGHajF1)</li> <li>Bitmovin (SkdccNsdj-X)</li> <li>Bookingkit (Ewb9uz1Rp)</li> <li>Bryter (A91MHlBY6)</li> <li>Calendly (vdUe2GDtm)</li> <li>Civey (xI9qM4Yhk)</li> <li>Criteo (HyeqVsdjWX)</li> <li>Dailymotion (VJNO26pZe)</li> <li>DataWrapper (8Nxb4ZtSa)</li> <li>Discord (hvWNhpF0T)</li> <li>Disqus (r1rX94i_iZX)</li> <li>eKomi (MEXztGXoM)</li> <li>Facebook Audience (rkUcEjuoWm)</li> <li>Facebook Pixel (ko1w5PpFl)</li> <li>Facebook Social Plugin (XYQZBUojc)</li> <li>Facebook Videos (r5-Z_erQ0)</li> <li>Flickr (X0wJtpzqX)</li> <li>Flockler (uJyv6-Nm)</li> <li>Flourish (kbmJpLAUf)</li> <li>Giphy (RuWQqICz)</li> <li>Glomex (BySu54sOjZQ)</li> <li>Google Ads (S1_9Vsuj-Q)</li> <li>Google AdWords Remarketing (S1_9Vsuj-Q)</li> <li>Google Analytics (HkocEodjb7)</li> <li>Google Analytics 4 (87JYasXPF)</li> <li>Google Calendar (n1jiXg1v)</li> <li>Google Forms (wgTnPe7i1)</li> <li>Google Maps (S1pcEj_jZX)</li> <li>Google Syndication (SkPc5EjOsWm)</li> <li>Google Tag Manager (BJ59EidsWQ)</li> <li>Google Fonts (HkPBYFofN)</li> <li>Here (0V-E5N_GQ)</li> <li>HubSpot (ry0QcNodoWQ)</li> <li>HubSpot forms (r1Fhc4iOoWX)</li> <li>Instagram (SyUQ54odobQ)</li> <li>Intercom (ryDQcVoOoZQ)</li> <li>Issuu (dwkRM0PG)</li> <li>JotForm (J9V5VBp3y)</li> <li>Juicer (-ONUgPRHp)</li> <li>Juris (YiVeMG4Ma)</li> <li>JW Player (ppPIzs4e)</li> <li>Klaviyo (m5uB6gnoW)</li> <li>Leadinfo (eSE_HHXnI)</li> <li>LinkedIn Plugin (Hkx754i_iWm)</li> <li>Livestorm.io (KpU9UXKjc)</li> <li>Machineseeker (ukU5jpn0K)</li> <li>Mapbox (U8QkTd2W)</li> <li>Matomo (zqWojrT0P)</li> <li>Matomo (self hosted) (u6fxocwTs)</li> <li>Matterport (7bFNv7DLf)</li> <li>Media Math (SJ6xqVidi-X)</li> <li>Mixcloud (4UGBLUJUN)</li> <li>News Anwaltblatt (SJ_6Qo9DJ)</li> <li>Outdooractive (15h3IBCa8)</li> <li>Open as App (nTiHcYnDd)</li> <li>Open Street Map (j7Igy6o8D)</li> <li>Opinion Stage (pNOkVRbV6)</li> <li>Paypal (JiFH1ubU)</li> <li>Pinterest (9Q2qrmB3)</li> <li>Piwik Pro - Duda (ze3Iyetr)</li> <li>Playbuzz (cv9bw3QAq)</li> <li>Podigee (nhLMP6qX)</li> <li>Prescreen (Sy1naC5nN)</li> <li>PriceHubble (FB_cLNwjQ)</li> <li>reCAPTCHA v1/v2 (Hko_qNsui-Q)</li> <li>reCAPTCHA v3 automatically bind variant (Hko_qNsui-Q)</li> <li>ShareThis (B1639EiOs-7)</li> <li>Shore (W0apH00t)</li> <li>Site Analytics - Duda (wkt-Vgmf7)</li> <li>Site Personalization - Duda (8u-otMeLg)</li> <li>Slideshare (jhJqRRPUe)</li> <li>Smart-rechner (lr0gmwVMY)</li> <li>Snatchbot (t-J9SUrOD)</li> <li>SoundCloud (HyP_q4sdobm)</li> <li>Sovendus (Di_NMaFOX)</li> <li>Splicky (1dU2WuKlq)</li> <li>Spotify (CguMb4Rq)</li> <li>Taboola (HkMucNoOjWX)</li> <li>Taggbox (RyDAUe7cq)</li> <li>Thinglink (T7-yEXGyq)</li> <li>TikTok (Z0TcXjY0P)</li> <li>TwentyThree (1rXAPWvo)</li> <li>Twitch (FPZz1xJI)</li> <li>Twitter Plugin (BJTzqNi_i-m)</li> <li>Typeform (r1PkZcEs_iWQ)</li> <li>Videoask (VtnVCeUzx)</li> <li>Videolyser (SDFUIfvK_)</li> <li>Vidyard (KRDJ6FLgY)</li> <li>Vimeo (HyEX5Nidi-m)</li> <li>Walls.io (FtE1AC6zU)</li> <li>Mapp Intelligence Full Feature Tracking (Ouzxu26Rv)</li> <li>Wetter (rerXlW9h2)</li> <li>Wigeogis (uJRRy9uiQ)</li> <li>Wistia (SJ1aqNjOs-m)</li> <li>Xing Plugin (BJREqEiOiZQ)</li> <li>Yelp (5qKtc_BS)</li> <li>YouTube Video (BJz7qNsdj-7)</li> <li>Yumpu (6LdBYXdAl)</li> <li>Zoho SalesIQ (sKBym34ck)</li> <li>3Q Video (qxiCD5aN_)</li> </ul> <p>In addition to the above, we support Fancybox 3 implementation of Lightbox JavaScript library.</p> <p>Disclaimers</p> <ul> <li> <p>Service providers might update implementations of services that we already support. Please contact us if a specific implementation needs to be supported, we will evaluate and get back to you as soon as possible.</p> </li> <li> <p>Except the above mentioned services, technologies implemented via JavaScript libraries are not supported out of the box. When using a JavaScript library, it might be required to reload the page after consent changes or build your own solution with our API (see known limitations).</p> </li> </ul>"},{"location":"web/features/extensions/smart-data-protector/#browser-support-for-the-smart-data-protector","title":"Browser Support for the Smart Data Protector","text":"<p>The number always states the minimum version supported by Usercentrics.</p>"},{"location":"web/features/extensions/smart-data-protector/#desktop-browsers","title":"Desktop Browsers","text":"Browser Version  Chrome 80  Edge 79  Firefox 78  Safari 13"},{"location":"web/features/extensions/smart-data-protector/#mobile-browsers","title":"Mobile Browsers","text":"Operating System Browser Version  Android Google ChromeFirefox Android 7+  Android 7+  iOS SafariChromeFirefox iOS 13.0iOS 13.0iOS 13.0"},{"location":"web/features/extensions/smart-data-protector/#examples","title":"Examples","text":"<p>For some technologies the Smart Data Protector provides an overlay, allowing users to accept the correspondant services directly. In the following section you can find various examples of such supported technologies.</p> <p>Already consented?</p> <p>If you have already accepted services in the CMP on this website, you can open the CMP by clicking the privacy button in the lower left corner of this website. You can then withdraw your consent for the individual services that are listed here, which will block the iFrames below and allow you to inspect the overlay feature of the Smart Data Protector.</p>"},{"location":"web/features/extensions/smart-data-protector/#youtube-iframe","title":"Youtube iFrame","text":"<p>Block the Youtube iframe <code>&lt;iframe src=\"https://www.youtube.com/embed/XXX\" /&gt;</code></p>"},{"location":"web/features/extensions/smart-data-protector/#vimeo-iframe","title":"Vimeo iFrame","text":"<p>Block the Vimeo iframe <code>&lt;iframe src=\"https://player.vimeo.com/video/XXX\" /&gt;</code></p>"},{"location":"web/features/extensions/smart-data-protector/#google-maps","title":"Google Maps","text":"<p>Block the Google Map iframe <code>&lt;iframe src=\"https://maps.google.com/maps?q=Munich&amp;...\" /&gt;</code></p> <p>Block the Google Map iframe (via Google's \"embed map\" export) <code>&lt;iframe src=\"https://www.google.com/maps/embed?pb=...\" /&gt;</code></p>"},{"location":"web/features/extensions/smart-data-protector/#soundcloud","title":"SoundCloud","text":"<p>Block the SoundCloud iframe <code>&lt;iframe width=\"100%\" height=\"450\"... /&gt;</code></p>"},{"location":"web/features/extensions/smart-data-protector/#spotify","title":"Spotify","text":"<p>Block the Spotify iframe <code>&lt;iframe src=\"https://open.spotify.com/embed/track/1IbNYr8ByXsgwGbmOxLBXP\"... /&gt;</code></p>"},{"location":"web/features/extensions/smart-data-protector/#facebook","title":"Facebook","text":"<p>Block the Facebook iframe <code>&lt;iframe src=\"https://www.facebook.com/plugins/post.php... /&gt;</code></p> <p></p>"},{"location":"web/features/extensions/smart-data-protector/#instagram","title":"Instagram","text":"<p>Block the Instagram Blockquote <code>&lt;blockquote class=\"instagram-media\" data-instgrm-permalink=\"https://www.instagram... /&gt;</code></p> <p>  View this post on Instagram <p>A post shared by Usercentrics GmbH (@usercentrics) on Jul 31, 2020 at 11:55pm PDT</p> </p>"},{"location":"web/features/extensions/smart-data-protector/#recaptchav2","title":"ReCaptchaV2","text":"<p>Block the Recaptcha form   </p> <pre><code>&lt;script src=\"https://www.google.com/recaptcha/api.js\" async&gt;&lt;/script&gt;\n&lt;form action=\"?\" method=\"POST\"&gt;\n  &lt;div class=\"g-recaptcha\" data-sitekey=\"&lt;site-key&gt;\"&gt;&lt;/div&gt;\n  &lt;br/&gt;\n  &lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"web/features/extensions/smart-data-protector/#twitter","title":"Twitter","text":"<p>Block the Twitter blockquote <code>&lt;blockquote class=\"twitter-tweet\"... /&gt;</code></p> <p>#Oracle &amp; #Salesforce facing class action lawsuits in NL &amp; UK because of doubts about whether the data usage by their marketing platforms had been consented. The industry is changing. Privacy is the new normal. #consentmanagementhttps://t.co/Kd4ROXGAHU</p>\u2014 Usercentrics GmbH (@usercentrics) August 14, 2020"},{"location":"web/features/geolocation/rulesets/","title":"Geolocation Rules","text":""},{"location":"web/features/geolocation/rulesets/#introduction","title":"Introduction","text":"<p>The Usercentrics Interface allows to setup Geolocation Rules for all your Configurations (Setting-IDs). This will enable you to setup and display different CMP Configurations on your website based on the user\u2019s location.</p> <p>If you're interested in knowing more about this feature, please follow this link</p>"},{"location":"web/features/google-consent-mode/general-information/","title":"General Information","text":"<p>Important</p> <p>Google released Consent Mode v2 at the end of November 2023. Version 2 of Consent Mode introduces two additional bits (ad_user_data &amp; ad_personalization) within the consent mode updates.</p> <p>Usercentrics supports these new bits in the update signals as a standard feature. Please ensure that you are also incorporating updates to these two new bits within your default state implementation!</p> <p>If you are using the implementation through our Google Tag Manager community template, please update to the newest version that supports Consent Mode v2.</p> <p>With Consent Mode Google has provided a solution for advertisers to adjust the behaviour of Google tags on their website based on the user consent status. </p> <p>By pairing the Consent Mode API with the Usercentrics Consent Management Platform (CMP) advertisers can indicate if the user has given consent for cookie usage related to ads and/or advertising. The supported Google tags will respect this signal and adjust their behaviour accordingly, as they will only utilize cookies if consent was granted for the specific purposes.</p> <p>Important</p> <p>Google also supports the IABs TCF 2.2 framework with its ad systems. Consent Mode is meant to be used by advertisers not using a TCF 2.2 CMP implementation.</p> <p>However, we also recommend implementing the Consent Mode default state into your website if you are using a TCF implementation.</p> <p>This recommendation is due to the fact that the necessary consent signals for ad_user_data and ad_personalization in some Google Tags cannot be guaranteed through the TCF API for now, owing to varying network loading times.</p> <p>For the list of Google services that currently support the Consent Mode, please follow the Supported Google Services</p> <p>You may use Consent Mode instead of initially blocking the Google tags. The benefit is that Google will use the signal to adjust the behaviour of their tags based on the user's consent in the Usercentrics CMP instead of having them blocked when no consent is given.</p> <p>Details on the tag behaviour with Consent Mode can be found here.</p>"},{"location":"web/features/google-consent-mode/implementation-example/","title":"Implementation Example","text":"<p>Implementing Consent Mode with the Usercentrics CMP solution as an alternative to prior blocking requires the following:</p>"},{"location":"web/features/google-consent-mode/implementation-example/#step-1-adjust-the-existing-google-tag-manager-code","title":"Step 1: Adjust the existing Google Tag Manager code","text":"<p>Your current Google Tag Manager code may currently look like this:</p> <pre><code>&lt;script type=\"text/plain\" data-usercentrics=\"Google Tag Manager\"&gt;\n(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\nnew Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\nj=d.createElement(s),dl=l!='dataLayer'?'&amp;l='+l:'';j.async=true;j.src=\n'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n})(window,document,\u2019script','dataLayer','GTM-XXXXXX');&lt;/script&gt;\n</code></pre> <p>This needs to be changed to the following:</p> <p>Please make sure to put these scripts at the very top of the head tag and on the same order as below.</p> <p>To adjust the default measurement capabilities, set the default values for the command to run on every page of your site before any commands that send measurement data (such as config or event). For more information please check Adjust Tag Behavior</p> <pre><code>    &lt;script type=\"text/javascript\"&gt;\n// create dataLayer\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\ndataLayer.push(arguments);\n}\n\n// set \"denied\" as default for both ad and analytics storage, as well as ad_user_data and ad_personalization,\ngtag(\"consent\", \"default\", {\nad_personalization: \"denied\",\nad_storage: \"denied\",\nad_user_data: \"denied\",\nanalytics_storage: \"denied\",\nwait_for_update: 2000 // milliseconds to wait for update\n});\n\n// Enable ads data redaction by default [optional]\ngtag(\"set\", \"ads_data_redaction\", true);\n&lt;/script&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n// Google Tag Manager\n(function(w, d, s, l, i) {\nw[l] = w[l] || [];\nw[l].push({\n'gtm.start': new Date().getTime(),\nevent: 'gtm.js'\n});\nvar f = d.getElementsByTagName(s)[0],\nj = d.createElement(s),\ndl = l != 'dataLayer' ? '&amp;l=' + l : '';\nj.async = true;\nj.src =\n'https://www.googletagmanager.com/gtm.js?id=' + i + dl;\nf.parentNode.insertBefore(j, f);\n})(window, document, 'script', 'dataLayer', 'GTM-XXXXX'); //replace GTM-XXXXXX with Google Tag Manager ID\n&lt;/script&gt;\n</code></pre> Explanation <ul> <li>The first part of the script initializes a plain data layer and provides the gtag function before the gtm.js/gtag.js is loaded</li> </ul> <pre><code>&lt;script type=\"text/javascript\"&gt;\n// create dataLayer\n    window.dataLayer = window.dataLayer || [];\n    function gtag() {\n        dataLayer.push(arguments);\n    }\n</code></pre> <ul> <li>In the middle part of the code the default values for the Consent Mode keys ad_storage, ad_user_data, ad_personalization and analytics_storage are defined. Additionally we set ads_data_redaction to true which means, that ad-click identifiers (e.g., GCLID / DCLID) in consent and conversion pings are redacted and network requests will also be sent through a cookieless domain. This is only in effect, when ad_storage is set to 'denied', if ad_storage is 'granted', ads_data_redaction has no effect. Setting ads_data_redaction to true is optional. More details on behaviour can be found here.</li> </ul> <pre><code>  // set \"denied\" as default for both ad and analytics storage as well as ad_user_data and ad_personalization, \ngtag(\"consent\", \"default\", {\nad_personalization: \"denied\",\nad_storage: \"denied\",\nad_user_data: \"denied\",\nanalytics_storage: \"denied\",\nwait_for_update: 2000 // milliseconds to wait for update\n});\n\n// Enable ads data redaction by default [optional]\ngtag(\"set\", \"ads_data_redaction\", true);\n\n&lt;/script&gt;    \n</code></pre> <ul> <li>The last part is the Google Tag Manager script. If you want to use Consent Mode as alternative to prior blocking, the type of the script tag is \"text/javascript\". If you use the Smart Data Protector you may have to exclude Google Tag Manager, Google Analytics and/or Google Ads Remarkting from being automatically blocked by the SDP.</li> </ul> <pre><code>&lt;script type=\"text/javascript\"&gt;\n// Google Tag Manager\n(function(w, d, s, l, i) { w[l] = w[l] || [];\nw[l].push({\n'gtm.start': new Date().getTime(),\nevent: 'gtm.js'\n});\nvar f = d.getElementsByTagName(s)[0],\nj = d.createElement(s),\ndl = l != 'dataLayer' ? '&amp;l=' + l : '';\nj.async = true;\nj.src =\n'https://www.googletagmanager.com/gtm.js?id=' + i + dl;\nf.parentNode.insertBefore(j, f);\n})(window, document, 'script', 'dataLayer', 'GTM-XXXXX'); //replace GTM-XXXXXX with Google Tag Manager ID\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/google-consent-mode/implementation-example/#step-2-optional-use-the-usercentrics-cmp-events-to-signal-the-consent-status-via-the-consent-mode-api-for-custom-data-processing-services","title":"Step 2 (optional): Use the Usercentrics CMP events to signal the consent status via the Consent Mode API for Custom Data Processing Services","text":"<p>In case you use custom data processing services, follow the steps below. Otherwise, please jump to step 3.</p> <p>In order to trigger the Consent Mode API for custom Data Processing Services, you need to first add a window event. On the Admin Interface under Implementation -&gt; Web please click on Add new Data Layer and select Window Event. Then expand the Window Event card and on the Window Event Name field, please insert the name of the event. It can be anything, but just make sure to use the same event name on the script below. Then click on the + button and click Save.</p> <p>Assuming you already have a window event in your Usercentrics CMP, add the following script to call the Consent Mode API in order to update the consent mode keys based on the consent status. In this example we use the event name 'ucEvent' and the 2 custom data processing services 'Google Ads Remarketing' and 'Google Analytics'. (If you have chosen to use different names for the data processing services use your customized ones instead.)</p> <pre><code>&lt;script type=\"text/javascript\"&gt;\n// Please replace 'ucEvent' with the event you have just created\nwindow.addEventListener(\"ucEvent\", function (e) {\nif( e.detail &amp;&amp; e.detail.event == \"consent_status\") {\n// Please replace the analytics service name here with the customized service    \nvar ucAnalyticsService = 'Google Analytics';\n// Please replace the ad service name here with the customized service\nvar ucAdService = 'Google Ads Remarketing';\n\nif(e.detail.hasOwnProperty(ucAnalyticsService) &amp;&amp; e.detail.hasOwnProperty(ucAdService))\n{\ngtag(\"consent\", \"update\", {\nad_personalization: e.detail[ucAdService] ? 'granted':'denied',\nad_storage: e.detail[ucAdService] ? 'granted':'denied',\nad_user_data: e.detail[ucAdService] ? 'granted':'denied',\nanalytics_storage: e.detail[ucAnalyticsService] ? 'granted':'denied'\n});\n}\nelse {            if(e.detail.hasOwnProperty(ucAdService)) {\ngtag(\"consent\", \"update\", {\nad_personalization: e.detail[ucAdService] ? 'granted':'denied'\nad_storage: e.detail[ucAdService] ? 'granted':'denied',\nad_user_data: e.detail[ucAdService] ? 'granted':'denied',\n});\n}            if(e.detail.hasOwnProperty(ucAnalyticsService)) {\ngtag(\"consent\", \"update\", {\nanalytics_storage: e.detail[ucAnalyticsService] ? 'granted':'denied'\n});\n}\n}\n}\n});\n&lt;/script&gt;\n</code></pre> Explanation <ul> <li>The event is fired on each page load and every time the user actively changes his consent decision.</li> <li>Based on the status for both services the Consent Mode API is called to signal the granted or denied state.</li> </ul>"},{"location":"web/features/google-consent-mode/implementation-example/#step-3-enable-google-consent-mode-on-the-usercentrics-admin-interface","title":"Step 3: Enable Google Consent Mode on the Usercentrics Admin Interface","text":"<p>For new customers, Google Consent Mode is enabled by default.</p> <p>Assuming you've completed the steps above, it's now time to enable the feature.</p> <p>Go to Usercentrics Admin Interface -&gt; Configuration -&gt; CMP Settings, enable Google Consent Mode and click Save.</p> <p>Important</p> <p>Make sure that you only use one of the ways to signal the consent status, meaning either the predefined Data Processing Service templates mentioned here or manually linking (custom) Data Processing Service templates to consent mode categories see step 2. In case you use Google services as Custom Data Processing Services (DPSs), then we recommend disabling Google Consent Mode option via the Usercentrics Admin Interface and follow the instructions shared in step 2 instead.</p>"},{"location":"web/features/google-consent-mode/pre-requisites/","title":"Prerequisites","text":"<p>Consent Mode requires that you use gtag.js or Google Tag Manager. If you use older tags versions (like ga.js or analytics.js) you need to update to the latest tag versions first.</p>"},{"location":"web/features/google-consent-mode/supported-google-services/","title":"Google Services that support Consent Mode","text":"<p>The following Google services currently support the Consent Mode:</p> Name Template Id Consent Type Notes Conversion Linker LykAT-gy ad_storage - Display &amp; Video 360 UekC8ye4S ad_storage - Doubleclick Ad 9V8bg4D63 ad_storage DEPRECATED DoubleClick Floodlight ByzZ5EsOsZX ad_storage DEPRECATED Google Ads S1_9Vsuj-Q ad_storage - Google Ads Conversion Tracking twMyStLkn ad_storage - Google Ads Remarketing B1Hk_zoTX ad_storage - Google Analytics HkocEodjb7 analytics_storage - Google Analytics 4 87JYasXPF analytics_storage - Google Campaign Manager pxiRY9112 ad_storage DEPRECATED Google Campaign Manager 360 dyHOCwp5Y ad_storage - Search Ads 360 DHS2sEi4b ad_storage - <p>Important</p> <p>When using the Google Consent Mode, the respective tags (see list above) may not be adjusted as described in our guide. The reason for this is the advantage of the Consent Mode: Google will use the signal to adjust the behaviour of their tags based on the user's consent in the Usercentrics CMP instead of having them blocked when no consent is given.</p> <p>Details on the tag behaviour with Consent Mode can be found here.</p>"},{"location":"web/features/google-tag-manager/configuration/","title":"Google Tag Manager Configuration","text":"<p>Get detailed information on how to configure your Google Tag Manager with the Usercentrics Browser SDK.</p>"},{"location":"web/features/google-tag-manager/configuration/#prerequisites","title":"Prerequisites","text":"<p>In order to follow this documentation, we assume you have:</p> <ul> <li>A Google Tag Manager account.</li> <li>Created a Google Tag Manager container on you website.</li> <li>Inserted the Google Tag Manager script into your website.</li> <li> <p>Inserted your Usercentrics script into your website. Learn how to do this here.</p> <p>You can also directly integrate the Usercentrics Script via the Google Tag Manager. Usercentrics does NOT recommend this. However, you can learn how to do it here.</p> </li> <li> <p>Your personal Usercentrics script</p> </li> </ul>"},{"location":"web/features/google-tag-manager/configuration/#background-information","title":"Background Information","text":"<p>Google Tag Manager can be tricky at times. If you're having trouble understanding it, the following information is meant to clarify some basic issues:</p> <ul> <li>Google Tag Manager helps you configure when the Javascript tags on your website are activated.</li> <li>Each tag needs to have at least one trigger.</li> <li>Triggers listen for certain website events (e.g. the website is fully loaded). Once this event takes place the trigger determines if the tag is activated.</li> <li>Triggers can be firing or exception triggers:<ul> <li>Exception triggers determine when a tag is NOT fired and take precedence over other triggers.</li> <li>Firing triggers determine when a tag is fired.</li> </ul> </li> <li>Triggers can be reliant on variables. The firing of a tag will be blocked, if a condition based on the value of such a variable is not met. </li> <li>Usercentrics uses a special type of variable, a data layer variable, to communicate between your Google Tag Manager settings and your CMP.</li> </ul>"},{"location":"web/features/google-tag-manager/configuration/#adding-data-processing-technologies","title":"Adding Data-Processing Technologies","text":"<p>Note</p> <p>This documentation will use Google Analytics 4 as an example. However, the following process needs to be repeated separately for each technology.</p> <ul> <li> Replace \"Google Analytics 4\" in the naming of tags, triggers and variables with the name of the technology you are currently implementing, e.g Matomo.</li> </ul> <p>If you already have a Google Analytics 4 tag in your Google Tag Manager configuration, you can jump to the Create a new Google Analytics variable section.</p>"},{"location":"web/features/google-tag-manager/configuration/#google-consent-mode","title":"Google Consent Mode","text":"<p>Important</p> <p>The Google Consent Mode is activated by default in the Admin Interface. To deactivate the Google Consent Mode, go to the Admin Interface under Configuration / CMP Settings [CMP V2]. As the implementation differs for the Google Tags supported by the Google Consent Mode, please see our technical documentation for more information on the Google Consent Mode and the correct templates to use with your CMP. </p>"},{"location":"web/features/google-tag-manager/configuration/#create-a-new-google-analytics-4-tag","title":"Create a new Google Analytics 4 tag","text":"<ul> <li> Navigate to \"Tags\" in the side-menu and then click on \"New\".</li> <li> Add a new tag of type \"Google Analytics: GA4 Configuration\".</li> <li> Name it \"Google Analytics 4 Tag\".</li> <li> Set your Measurment ID (You can read more here)</li> <li> <p> Navigate to \"Tag firing options\" under \"Advanced Settings\" and select \"Once per page\".</p> <p>Explanation</p> <p>If you want a certain technology to fire more than once per page view, you should set the tag firing option to \"Unlimited\". \"Once per page\", however, is Usercentrics' recommended setup.</p> </li> <li> <p> Save \"Google Analytics 4 Tag\".</p> </li> </ul> <p></p>"},{"location":"web/features/google-tag-manager/configuration/#create-a-new-google-analytics-4-variable","title":"Create a new Google Analytics 4 variable","text":"<p>You have to create consent default status variables for each of your non-IAB vendor script tags so that they are not triggered without consent.</p> <ul> <li> Navigate to \"Variables\" in the side-menu and then click on \"New\".</li> <li> Add a new variable of type \"Data Layer Variable\".</li> <li> In the top left, name the variable \"Google Analytics Variable\".</li> <li> <p> Under \"Data Layer Variable Name\", insert \"Google Analytics 4\".</p> <p>Note</p> <p>Correct spelling, hyphenation and capitalization are mandatory for this field. Every technology must be added the way it is spelled in the Usercentrics Admin Interface. Here: \"Google Analytics 4\".</p> </li> <li> <p> Tick \"Set Default Value\" and set the default value to false.</p> </li> <li> Save \"Google Analytics 4 Variable\".</li> </ul> <p></p>"},{"location":"web/features/google-tag-manager/configuration/#create-a-google-analytics-4-trigger","title":"Create a Google Analytics 4 trigger","text":"<p>Note</p> <p>There are several ways to implement this logic. Usercentrics recommends the following option, however, depending on your setup, other structures might be more reasonable. </p> <ul> <li> Navigate to \"Triggers\" in the side-menu and click on \"New\".</li> <li> Add a new trigger of type \"Custom Event\".</li> <li> In the top left, name the trigger \"Google Analytics 4 Trigger\".</li> <li> Tick \"Use regex matching\" next to the \"Event Name\" input field</li> <li> <p> Under \"Event Name\", insert \"(consent_status.*)\".</p> <p>Note</p> <p>Correct spelling, hyphenation and capitalization are mandatory for this field.</p> </li> <li> <p> Tick \"Some Custom Events\".</p> </li> <li> <p> In the drop-down menus, set the following condition: \"Google Analytics 4 Variable\" contains true.</p> <p>Explanation</p> <p>The variable contains the user's consent information (variable=true - user opted in || variable=false - user opted out) for a specific technology. Hence, the trigger should only be fired (and tag therefore activated), if the variable=true.</p> </li> <li> <p> Save \"Google Analytics 4 Trigger\".</p> </li> </ul> <p></p> <ul> <li> Add the trigger to \"Google Analytics 4 Tag\".</li> </ul> <p></p> <p>Note</p> <p>Repeat this for each non-IAB vendor script in your Tag Manager.</p>"},{"location":"web/features/google-tag-manager/configuration/#testing-in-preview-mode","title":"Testing in Preview Mode","text":"<p>In order to make sure your Google Tag Manager setup works, you need to test it in preview mode.</p> <ul> <li>Activate preview mode by clicking on \"Preview\" in the top-right corner.</li> <li>Visit your website.</li> <li>Open the development tools of your browser and navigate to the \"Network\" tap.</li> <li>Network requests of the implemented data-processing technologies should not be visible, unless they were defined as \"Essential\" in your Admin Interface.</li> <li>Press \"Accept All\" on the Usercentrics CMP.</li> <li>Now network requests of the implemented data-processing technologies should be visible in the \"Network\" tap.</li> </ul>"},{"location":"web/features/interaction-analytics/csv-download/","title":"CSV Download","text":"<p>An option to download the report as CSV file for deeper insights is provided via the \u201cDownload Report\u201d button. The CSV file can be uploaded to any other data visualization tool like Google Data Studio to create custom dashboards based on your unique needs.</p> <p></p>"},{"location":"web/features/interaction-analytics/dashboards/","title":"Dashboards","text":"<p>The following dashboard provide distinctive insights into your users' behaviour with the CMP.</p>"},{"location":"web/features/interaction-analytics/dashboards/#user-interaction-kpis","title":"User Interaction KPIs","text":"<p>Get insights on the received responses for your CMP layers.</p> <p></p> <ul> <li>CMP Displays: The amount of CMP_SHOWN events for the selected time range and filter</li> <li>CMP Interactions: The amount of user consent interactions (\\({\\texttt{ACCEPT_ALL} + \\texttt{DENY_ALL} + \\texttt{SAVE}}\\))</li> <li>CMP Ignores: The difference between the shown CMP and actual interactions from users (\\({\\texttt{CMP_SHOWN} - (\\texttt{ACCEPT_ALL} + \\texttt{DENY_ALL} + \\texttt{SAVE})}\\))</li> <li>Interaction Rate: How many (in %) events were actual interactions</li> </ul>"},{"location":"web/features/interaction-analytics/dashboards/#interactions-vs-ignores","title":"Interactions vs. Ignores","text":"<p>Get insights on the Interaction performance of your current CMP configuration.</p> <p></p> <p>This graph compares the number of consent interactions (ACCEPT_ALL + DENY_ALL + SAVE) vs ignores.</p>"},{"location":"web/features/interaction-analytics/dashboards/#daily-interaction-rate","title":"Daily Interaction Rate","text":"<p>Get detailed insights on the Interaction rate over time.</p> <p></p> <ul> <li>Daily statistics on Interactions.</li> <li>Compare Interaction peaks with CMP shown peaks for an even better understanding of the data</li> <li>Compare the Interaction distribution to changes you made to your setup on a certain day</li> </ul>"},{"location":"web/features/interaction-analytics/dashboards/#displays-vs-interactions","title":"Displays vs. Interactions","text":"<p>Get a granular view of the total number of CMP displays vs consent interactions.</p> <p></p> <p>Daily total numbers on displays &amp; interactions.</p>"},{"location":"web/features/interaction-analytics/dashboards/#user-acceptance-kpis","title":"User Acceptance KPIs","text":"<p>Get insights into the type of interaction the users have with the banner.</p> <p></p> <ul> <li>Accept All: The amount of ACCEPT_ALL events for the selected time range and filter</li> <li>Deny All: The amount of DENY_ALL events for the selected time range and filter</li> <li>Custom: The amount of SAVE events for the selected time range and filter</li> <li>Accept Rate: How many (in %) consent events were actual Accepts (\\(\\frac{\\texttt{ACCEPT_ALL}}{\\texttt{ACCEPT_ALL} + \\texttt{DENY_ALL} + \\texttt{SAVE}}\\))</li> </ul>"},{"location":"web/features/interaction-analytics/dashboards/#accept-vs-deny-vs-custom","title":"Accept vs. Deny vs. Custom","text":"<p>Get insights into the consent interaction distribution.</p> <p></p> <p>Compares the weights between the different consent interactions (ACCEPT_ALL vs DENY_ALL vs SAVE).</p>"},{"location":"web/features/interaction-analytics/dashboards/#daily-accept-rate","title":"Daily Accept Rate","text":"<p>Get detailed insights on the accept rate over time.</p> <p></p> <ul> <li>Daily statistics on Accept rate.</li> <li>Compare Accept peaks with CMP shown peaks for an even better understanding of the data</li> <li>Compare the Accept rate distribution to changes you made to your setup on a certain day.</li> </ul>"},{"location":"web/features/interaction-analytics/dashboards/#accept-all-vs-deny-all-vs-custom-total","title":"Accept All vs Deny All vs Custom (Total)","text":"<p>Get a granular view of the total number of the different consent interactions.</p> <p></p> <p>Daily total numbers on Accept All vs Deny All vs Custom choice.</p>"},{"location":"web/features/interaction-analytics/dashboards/#comparison-overview","title":"Comparison Overview","text":"<p>Compare your interaction &amp; acceptance rate over the different dimensions such as country, device, layer and variant (if A/B testing is activated).</p> <p></p> <ul> <li>Identify optimization needs for specific devices in order to optimize the overall rates.</li> <li>Understand if specific banner configurations are required for specific countries.</li> <li>Understand if there is a need to further optimize the 1<sup>st</sup> or 2<sup>nd</sup> layer of your CMP.</li> <li>Have a straightforward overview of which A/B testing variant is performing better.</li> </ul>"},{"location":"web/features/interaction-analytics/faq/","title":"FAQ","text":"<p>How long can the data for Interaction Analytics be accessed in the Admin Interface?</p> <p>For both Interaction Analytics &amp; Consent Analytics, the data for the last 90 days can be accessed in the Admin Interface.</p> <p>How do you handle bot traffic?</p> <p>Events triggered by bots will be recognized and counted by our product and appear in your Raw Data Download CSV with \"browser\" = \u201cbot\u201d. The dashboard in your Admin Interface won't include any bot traffic for accurate KPI measurement. Information on which bots are detected for Interaction Analytics can be found in the following FAQ.</p> <p>How do you handle page reloads?</p> <p>In case the page is being reloaded, resulting in the CMP being shown again to the user, we count a second <code>CMP_SHOWN</code>.</p> <p>How can I calculate the Interaction and Acceptance rates across platforms (web / app)?</p> <p>When using a configuration for app and web, the Interaction Analytics graphs already show the combined values. In the raw data, however, a distinction is made between the first layer (L1) and the second layer (L2) for web. In order to manually calculate a common rate for web and app from the raw data (also for different configurations), the following formulas result:</p> <p>Interaction Rate across platforms</p> <p>\\(\\frac{\\texttt{ACCEPT_ALL_L1}+\\texttt{ACCEPT_ALL_L2}+\\texttt{ACCEPT_ALL}+\\texttt{DENY_ALL_L1}+\\texttt{DENY_ALL_L2}+\\texttt{DENY_ALL}+\\texttt{SAVE_L1}+\\texttt{SAVE_L2}+\\texttt{SAVE}}{\\texttt{CMP_SHOWN}}\\)</p> <p>Accept Rate across platforms</p> <p>\\(\\frac{\\texttt{ACCEPT_ALL_L1}+\\texttt{ACCEPT_ALL_L2}+\\texttt{ACCEPT_ALL}}{\\texttt{ACCEPT_ALL_L1}+\\texttt{ACCEPT_ALL_L2}+\\texttt{ACCEPT_ALL}+\\texttt{DENY_ALL_L1}+\\texttt{DENY_ALL_L2}+\\texttt{DENY_ALL}+\\texttt{SAVE_L1}+\\texttt{SAVE_L2}+\\texttt{SAVE}}\\)</p>"},{"location":"web/features/interaction-analytics/introduction/","title":"Introduction","text":"<p>Use Interaction Analytics to get insights into how your users interact with the CMP. Keep track of important CMP KPIs to maximize data capture and study how your CMP configuration choices impact user behaviour.</p> <p></p>"},{"location":"web/features/interaction-analytics/overview/","title":"Overview","text":""},{"location":"web/features/interaction-analytics/overview/#work-with-kpis","title":"Work with KPIs","text":"CMP Displays <p>             - How often has the CMP been shown to users         </p> Interaction Rate <p>             - How many users do not interact with the CMP         </p> <p>             - To which extent are users interacting with the CMP         </p> Accept Rate <p>             - Ratio of accept all to other consent interactions         </p>"},{"location":"web/features/interaction-analytics/overview/#analyse-how-users-interact-with-the-cmp","title":"Analyse how users interact with the CMP","text":"Monitor User Interactions <p>             - How do users interact with the CMP         </p> <p>             - Recognize changes in user behaviour if you have recently made major design changes to your CMP         </p> <p>             - Identify opportunities to optimize your accept &amp; interactions rates         </p> Device-specific Rates <p>             - Are there device-based differences in user interaction with your CMP         </p> <p>             - Should you optimize for specific devices         </p> Country-specific Rates <p>             - How are users from specific countries interacting with your CMP         </p> <p>             - Does it make sense to have a separate banner for different countries         </p> Layer-specific Rates <p>             - How are users interacting with your different layers         </p> <p>             - Which layer should be a priority for optimization.         </p> A/B Testing <p>             - How are users interacting with your different A/B testing variants         </p> <p>             - Test which variants work best for your implementation and compare the KPIs.         </p>"},{"location":"web/features/interaction-analytics/overview/#interaction-analytics-vs-granular-analytics","title":"Interaction Analytics vs. Granular Analytics","text":"<p>Usercentrics provides two different ways to gain detailed insights into your users' behaviour: Interaction Analytics and Granular Analytics.</p> <p>Interaction Analytics</p> <p>Interaction Analytics gives you insights into how users react to your CMP and allows you to monitor the impact of setup changes you make. The Interaction Analytics Dashboard provides you with general KPIs of the CMP on your website, such as Interaction Rates or Accept All Rates. The provided data and graphs allow you to take data-driven business decisions and help you</p> <ul> <li>to easily keep track of the most relevant KPIs.</li> <li>to monitor the overall success of your CMP strategy.</li> <li>to get insights on how the CMP setup impacts the interactions of your website users.</li> </ul> <p>Granular Analytics</p> <p>Granular Analytics provides you with granular data based on single consent decisions for Data Processing Services. Consent decisions are explicit decisions made by users who have interacted with the CMP by clicking Accept, Deny or Save. Users who do not interact with the CMP do not take any consent decisions. The provided data and graphs allow you to get the full picture of your users' behaviour and help you</p> <ul> <li>to identify the right category for your DPS to improve the consent for specific services.</li> <li>to better understand how the consent rate for individual DPS is composed in order to improve your data-driven decision-making.</li> </ul>"},{"location":"web/features/interaction-analytics/tracked-interactions-events/","title":"Tracked Interactions / Events","text":"<p>For Interaction Analytics the following interactions with the CMP are tracked as events and sent along with additional data to the backend.</p>"},{"location":"web/features/interaction-analytics/tracked-interactions-events/#events","title":"Events","text":"Event Description CMP_SHOWN CMP displayed to the user ACCEPT_ALL_L1 User clicked the Accept-All button on the first Layer DENY_ALL_L1 User clicked the Deny-All button on the first Layer SAVE_L1 User clicked the Save button on the first Layer ACCEPT_ALL_L2 User clicked the Accept-All button on the second Layer DENY_ALL_L2 User clicked the Deny-All button on the second Layer SAVE_L2 User clicked the Save button on the second Layer"},{"location":"web/features/interaction-analytics/tracked-interactions-events/#additional-events","title":"Additional Events","text":"<p>These events are not being used on the dashboards, but they are available on the downloadable report.</p> Event Description CCPA_TOGGLES_OFF User clicked on the OK button while CCPA toggle is off CCPA_TOGGLES_ON User clicked on the OK button while CCPA toggle is on PRIVACY_POLICY_LINK User clicked on the privacy policy link IMPRINT_LINK User clicked on the legal notice link MORE_INFORMATION_LINK User clicked on the more info link <p>Whenever the CMP is displayed, we measure a <code>CMP_SHOWN</code> event. Once the user gave a choice by clicking any CMP button or triggering any programmatic methods, we measure the choice as an event: <code>ACCEPT_ALL</code>, <code>DENY_ALL</code>, or <code>SAVE</code></p> <p>Please note that the Usercentrics Interaction Analytics tracks interactions with the CMP. We do not measure website views or bounces.</p>"},{"location":"web/features/interaction-analytics/tracked-interactions-events/#examples","title":"Examples","text":""},{"location":"web/features/interaction-analytics/tracked-interactions-events/#a-new-user-visits-the-website-for-the-first-time-and-clicks-on-the-accept-all-button","title":"A new user visits the website for the first time and clicks on the Accept-All button","text":"<p>Events</p> <p><code>CMP_SHOWN</code> and <code>ACCEPT_ALL</code></p>"},{"location":"web/features/interaction-analytics/tracked-interactions-events/#the-same-user-comes-back-the-next-day-and-the-cmp-does-not-get-displayed-again","title":"The same user comes back the next day and the CMP does not get displayed again","text":"<p>Events</p> <p>No event</p>"},{"location":"web/features/interaction-analytics/tracked-interactions-events/#the-same-user-now-clicks-on-the-privacy-button-to-check-their-current-privacy-settings-and-closes-it-afterwards","title":"The same user now clicks on the Privacy Button to check their current Privacy Settings and closes it afterwards","text":"<p>Events</p> <p><code>CMP_SHOWN</code></p>"},{"location":"web/features/interaction-analytics/tracked-interactions-events/#the-same-user-now-clicks-on-the-privacy-button-to-check-their-current-privacy-settings-and-clicks-on-the-save-button-afterward","title":"The same user now clicks on the Privacy Button to check their current Privacy Settings and clicks on the Save Button afterward","text":"<p>Events</p> <p><code>CMP_SHOWN</code> + <code>SAVE</code></p>"},{"location":"web/features/tcf2/configure-tcf-2-framework-settings/","title":"Configure TCF 2.2 Framework Settings","text":"<p>To use TCF 2.2 enable the framework in the Admin Interface under \u201cConfiguration\u201d / \u201cLegal Specifications\u201d.</p> <p>Once the framework is activated, you are able to define any settings related to the Framework Configuration, including different Resurfacing options for the UI.</p> <p>Additionally you are able to not disclose purpose 1.</p> <p></p>"},{"location":"web/features/tcf2/configure-the-design-layout/","title":"Configure the Design / Layout","text":"The CMP UILayoutStylingContent <p>The first layer contains all the textual information required by the framework, as well as the list of purposes that apply to the vendors you configured. The user may choose on this first layer to opt in/out of certain purposes or go to the second layer to view more details.</p> <p></p> <p>The second layer gives users details about the enabled vendors and purposes. On this layer the user has more detailed opt in/out options.</p> <p></p> <p>You also have the choice to decide how you want to give your users access to their current Privacy Settings - via Privacy Button or Privacy Link. </p> <p>The CMP UI is customisable and you may choose for example your background color, an overlay, fonts, headlines, logo and individual toggle and button colours.</p> <p>Under the \u201cAppearance\u201d \u2192 \u201cLayout\u201d section you may choose your layout options.</p> <p>In the \"Layout\" section you are able to edit what options do you want to show in each layer and also how you want to show Privacy Trigger.</p> <p>For the First Layer, you are able to display the following options:</p> <p></p> <ul> <li>Show Descriptions for Purposes and Stacks,</li> <li>Show the \"Deny All\" Button,</li> <li>Show Non-IAB Purposes,</li> <li>Show Toggles in First Layer, and</li> <li>Show information on data transfer outside of the EU / EEA</li> </ul> <p>For the Second Layer, you can choose to display the \"Deny All\" button:</p> <p></p> <p>For the Privacy Trigger, we offer two choices for the layout:</p> <p></p> <ul> <li>Privacy Button, where you can choose to render it on Bottom Left or Bottom Right</li> <li>Privacy Link</li> </ul> <p>Under the \u201cAppearance\u201d \u2192 \u201cStyling\u201d section you may choose your styling options.</p> <p>In the Styling section, you are presented with a significant number of options to stylize your CMP:</p> <ul> <li>Layout: You can decide to choose the colors of your CMP (Background, Text, Tabs and Links). Further you can define how round the corners of the CMP will be and activate a background shadow and overlay.</li> <li>Logo: You can display your own logo in the CMP,</li> <li>Font: You can decide if you want to use one of the system defined fonts in the CMP or if you want to use a custom font for the CMP.</li> <li>Buttons: You can define the colors of each different button and the corner radius.</li> <li>Toggles: You can define the colors for each state of a toggle, whether is active, inactive or disabled.</li> <li>Privacy Trigger: You can define style changes to the icon, where you can choose one of our system defined icons or if you want to use a custom icon. Additionally it is possible to set the color and size of the button for both desktop and mobile.</li> </ul> <p>The CMP also offers customisation options under the \u201cContent\u201d section. Some texts must remain as provided due to TCF 2.2 requirements and can not be edited.</p> <p></p> <p>Following are the customisable elements:</p> <ul> <li>Layer titels</li> <li>Additional banner messages</li> <li>Data transfer outside of the EU / EEA message</li> <li>Resurface Description for Web</li> <li>Resurface Description for App</li> <li>Imprint link URL</li> <li>Privacy policy URL</li> <li>Privacy policy link text</li> <li>Button labels</li> </ul>"},{"location":"web/features/tcf2/configure-the-vendors/","title":"Configure the Vendors","text":""},{"location":"web/features/tcf2/configure-the-vendors/#global-vendor-list-gvl","title":"Global Vendor List (GVL)","text":"<p>Under \u201cService Settings\u201d you can configure the vendors or Data Processing Services you are using on your site. The list shown under \u201cTransparency &amp; Consent Framework 2.0\u201d contains the vendors of the IAB GVL. The CMP automatically manages updates to that list. The list of available vendors is provided by the IAB and vendor information must be used as it is.</p> <p>By checking the box on the left of each vendor, you can activate the vendor. This means the user will be informed in the CMP banners that you are using this vendor on your site. You can deactivate the vendor at any time by unchecking the same checkbox.</p> <p>Data Transfer Outside of EU/EEA</p> <p>Inside each vendor, you can specify if the vendor is transferring data outside the EU / EEA\u201d. The information will be displayed inside the respective vendor on the second layer of the CMP. </p> <p></p>"},{"location":"web/features/tcf2/configure-the-vendors/#stacks","title":"Stacks","text":"<p>Stacks are combinations of Purposes and/or Special Features of processing personal data used by the participants in the Framework.</p> <p>These stacks may be used to substitute Initial Layer information about two or more Purposes and/or Special Features.</p> <p>Important</p> <p>Purposes must not be included in more than one stack and must not be presented as part of a Stack and outside of Stacks at the same time.</p> <p>Conversely, any stacks used must not include the same Purpose more than once, nor Purposes should be presented separately from stacks.</p> <p></p>"},{"location":"web/features/tcf2/configure-the-vendors/#publisher-restrictions","title":"Publisher Restrictions","text":"<p>TCF 2.2 allows you to signal restrictions on how the vendors may process personal data. It is possible to either restrict the purposes for which personal data is processed or specify the legal basis for vendors that signaled flexibility on the legal basis in the Global Vendor List.</p> <p>Once a purpose has been restricted in the Admin Interface, a vendor must respect the restriction signal that disallows the processing for the specific purpose regardless of whether or not they have declared that purpose to be flexible.</p> <p>Behaviour for flexible purposes</p> <p>In the case that a vendor declared a purpose with a default legal basis (consent or legitimate interest) but also declared this purpose as flexible, the legal basis restriction must be respected if set in the Admin Interface. That means for example if a vendor declared a purpose as legitimate interest but also declared that purpose to be flexible and the legal basis was restricted to consent, the vendor must check for the consent signal and must not apply the legitimate interest signal.</p> <p>Disable legitimate interest</p> <p>In case you want to disable legitimate interest for your TCF 2.2 CMP, you need to restrict all purposes to consent in the Admin Interface.</p> <p></p>"},{"location":"web/features/tcf2/configure-the-vendors/#non-iab-vendors","title":"Non-IAB Vendors","text":"<p>The configuration of non-IAB vendors works the usual way. You may define the service categories and choose from our list of fully prepared services or define your own custom services. There is nothing TCF 2.2 specific to consider with the configuration of the non-IAB services.</p> <p></p>"},{"location":"web/features/tcf2/general-information/","title":"General Information","text":"<p>The Usercentrics CMP is IAB TCF 2.2 certified and therefore meets the requirements of the specification of the IAB TCF 2.0 framework.</p> <p>The standard regulates how user consent information has to be captured and used within the programmatic advertising ecosystem, with the goal of a frictionless functioning of the ecosystem through following a standardised approach of implementing data privacy regulations.</p> <p>We are briefly explaining here some key concepts of the framework:</p> <p>The tcString is a technical concept which encodes the consent information in a machine readable format. The tcString contains all required information for any system in the ecosystem to validate what consent has been given by a user and what processing is allowed based on that. The tcString is generated and provided by a CMP at the point where users make consent decisions. Each vendor service that collects data must take the information encoded in the tcString into account and decide if and what consent the user has given.</p> <p>The TCF 2.2 API is the technical concept that allows the vendors integrated in a website or app to interact with the CMP in order to e.g. obtain the tcString in a standardised way. Any IAB TCF 2.0 certified CMP implements this API.</p> <p>The Global Vendor List (GVL) is a list of all service vendors who registered for the IAB TCF 2.2 framework. By registering for the TCF 2.0 framework these vendors confirm that they comply with the framework policies. The list is maintained by the IAB and regular updates are provided, typically on a weekly basis. The list contains all necessary information about the vendors, that is required by the framework such as descriptions of the services and the data the service uses, the purposes for which the service uses the data, the duration of operation of cookies or similar information that the service stores on a user\u2019s device.</p> <p>The TCF 2.2 framework also prescribes rather strict UX behaviours for CMPs. This impacts the design but also the content shown in a CMP and leaves little room for own optimisation. Aspects like the contrast ratio of colours and the messages that must be shown to users at certain layers of the CMP dialogues are some examples of clearly specified conditions to be met.</p> <p>TCF 2.2 follows the Service-Specific Scope. The Service-Specific Scope means that a user given consent applies only to the specific website/app and cannot be propagated to other sites. This is the scope that is broadly supported within the ad tech ecosystem and the Usercentrics CMP</p> <p>For further and more detailed reading on the TCF 2.2 framework, please visit this page.</p>"},{"location":"web/features/tcf2/service-integration/","title":"Service Integration","text":"<p>Here a few important notes on what you need to consider when integrating vendors / services under TCF 2.2.</p>"},{"location":"web/features/tcf2/service-integration/#iab-vendors","title":"IAB Vendors","text":"<p>The Usercentrics CMP exposes the IAB TCF 2.2 API which offers a standardised way for publishers and vendors to fetch the users consent information. IAB certified vendors are able to work with the TCF 2.2 API, which means in most cases no further modification or adjustments to vendor scripts are needed. </p> <p>This means vendors can request the consent state when the CMP is loaded using the __tcfapi function with the command getTCData. </p> Sample<pre><code>__tcfapi('getTCData', 2, (tcData, success) =&gt; {\nconsole.log(tcData)\n});\n</code></pre> <p>In order to react on changes of the consent state vendors can make use of the event listener provided by the API using the __tcfapi function with the command addEventListener.</p> Sample<pre><code>__tcfapi('addEventListener', 2, function(tcData,success){\n// inital tc string information\nif(success &amp;&amp; tcData.eventStatus === 'tcloaded') {\nconsole.log(' TCF tcLoaded Event - tcString: '+tcData.tcString);        }\n// tc string after user interaction completed\nelse if(success &amp;&amp; tcData.eventStatus === 'useractioncomplete') {\nconsole.log('TCF useractioncomplete Event - tcString: '+tcData.tcString);\n}\nelse {\n// do something else\n}\n});\n</code></pre> <p>More details about the TCF 2.2 CMP API and its commands can be found here.</p>"},{"location":"web/features/tcf2/service-integration/#non-iab-vendors","title":"Non-IAB Vendors","text":"<p>Non-IAB vendors do not follow the framework\u2019s concepts and therefore do not use the TCF API or tcString. For those, there is nothing TCF 2.2 specific to be considered. Use our Direct Integration Guide to handle non-IAB vendors.</p>"},{"location":"web/features/tcf2/service-integration/#tag-management-systems","title":"Tag Management Systems","text":"<p>If you are using a tag manager for vendor script integration, you should consider the following information.</p> <p>IAB registered vendors have to be loaded in order to request the tcString from our CMP and understand the information. Therefore, no tag manager triggers should be configured around those vendor tags.</p> <p>Non-IAB vendors need to be handled manually. The CMP version 2 uses an event \u201cconsent_status\u201d which should be used in your tag manager to trigger the services.  Here's an example configuration for the Google Tag Manager</p>"},{"location":"web/implementation/sdk/","title":"Integration","text":""},{"location":"web/implementation/sdk/#introduction","title":"Introduction","text":"<p>With the Usercentrics Web CMP SDK our aim is to provide a lightweight library which enables you to build your own fully customiziable Consent Solution, while still leveraging the backend infrastructure that we provide at Usercentrics.</p> <p>Follow this guide in order to have the Browser SDK fully prepared for your own UI design in no time.</p> <p>Looking for supported attributes?  You can find them in the following links:</p> <ul> <li>Classes </li> <li>Enums </li> <li>Interfaces </li> <li>Types </li> </ul>"},{"location":"web/implementation/sdk/#integrate-the-browser-sdk","title":"Integrate the Browser SDK","text":""},{"location":"web/implementation/sdk/#installing-the-dependency","title":"Installing the dependency","text":"<p>For starters, you will need to install the dependency. For that use the following command:</p> <pre><code>npm install @usercentrics/cmp-browser-sdk --save\n</code></pre>"},{"location":"web/implementation/sdk/#creating-the-browser-sdk-instance","title":"Creating the Browser SDK Instance","text":"<p>To initialize the BrowserSDK class, please use the following:</p> Without InitOptionsWith InitOptions <pre><code>import { BrowserSdk } from '@usercentrics/cmp-browser-sdk';\n\nconst browserSdk = new BrowserSdk();\n</code></pre> <p>InitOptions definition available here</p> <pre><code>import { BrowserSdk } from '@usercentrics/cmp-browser-sdk';\n\nconst initOptions = {\ndisableTracking: false,\neuMode: true,\nlanguage: \"en\",\nlocation: {\ncountry: \"DE\",\nregion: \"BY\",\ncity: \"\",\n},\nsandbox: false\n}\n\nconst browserSdk = new BrowserSdk(initOptions);\n</code></pre>"},{"location":"web/implementation/sdk/#initialize","title":"Initialize","text":"<p>Now with the BrowserSDK instance we can initialize the SDK. There are two methods you can choose between on how to initialize the SDK: via RulesetId or SettingsId.</p> <p>Both methods can also receive the controllerId as an optional parameter</p> SettingsIdRulesetId <pre><code>const settingsId = \"/* YOUR SETTINGSID */\";\nconst controllerId = \"/* OPTIONAL CONTROLLER ID */\"\nconst cmpController = await browserSdk.initBySetting(settingsId);\nconst cmpController = await browserSdk.initBySetting(settingsId, controllerId);\n</code></pre> <pre><code>const rulesetId = \"/* YOUR RULESETID */\";\nconst controllerId = \"/* OPTIONAL CONTROLLER ID */\"\nconst cmpController = await browserSdk.initByRuleSet(rulesetId);\nconst cmpController = await browserSdk.initByRuleSet(rulesetId, controllerId);\n</code></pre>"},{"location":"web/implementation/sdk/#using-the-browser-sdk","title":"Using the Browser SDK","text":""},{"location":"web/implementation/sdk/#getting-the-initial-view","title":"Getting the initial view","text":"<p>Now that you have your <code>cmpController</code> ready, you can check which view you should show.</p> <pre><code>const { ui } = cmpController;\n\nswitch (ui.initialView) {\ncase 'button':\n// Show the Privacy Button\nbreak;\ncase 'first':\n// Show the First Layer\nbreak;\ncase 'second':\n// Show the Second Layer\nbreak;\ndefault:\nbreak;\n}\n</code></pre>"},{"location":"web/implementation/ui/","title":"Browser UI integration","text":""},{"location":"web/implementation/ui/#add-the-javascript-tag","title":"Add the JavaScript Tag","text":"<p>To get started, simply add the Usercentrics script to the <code>&lt;head&gt;</code> section of your website, making sure it comes before any third-party scripts that require user consent.</p> <p>If you're using a Geolocation Ruleset (specifically a Ruleset-ID instead of a Settings-ID), just replace the data-settings-id with data-ruleset-id. You can learn more about Geolocation Rules here.</p> Settings-IDRuleset-ID Settings-ID Javascript tag<pre><code>&lt;script\n    id=\"usercentrics-cmp\"\n    data-settings-id=\"YOUR_SETTINGS_ID\"\n    src=\"https://web.cmp.usercentrics.eu/ui/loader.js\"\n&gt;\n&lt;/script&gt;\n</code></pre> Ruleset-ID Javascript tag<pre><code>&lt;script\n    id=\"usercentrics-cmp\"\n    data-ruleset-id=\"YOUR_RULESET_ID\"\n    src=\"https://web.cmp.usercentrics.eu/ui/loader.js\"\n&gt;\n&lt;/script&gt;\n</code></pre> <p>Note</p> <p>You can find the script implementation with the Settings-ID for your specific account in the Usercentrics Admin Interface, within the Implementation section.</p> <p>Using The Transparency &amp; Consent Framework (TCF)</p> <p>If you are using TCF, please go through the configuration for TCF 2.2 before implementing the script tag on your website. Read more here.</p>"},{"location":"web/implementation/ui/#adjust-third-party-scripts","title":"Adjust third-party scripts","text":"<p>After successfully integrating the Usercentrics script into your website, you will need to make two specific adjustments to all third-party scripts that rely on consent for implementation.</p>"},{"location":"web/implementation/ui/#1-change-the-script-type","title":"1. Change the script type","text":"<p>First, modify the <code>type</code> attribute on all scripts that necessitate consent, changing it from <code>type=\"text/javascript\"</code> to <code>type=\"text/plain\"</code>. This adjustment ensures that these scripts do not execute upon the page's initial load.</p> <p>Additionally, if certain third-party scripts lack an explicit <code>type=\"text/javascript\"</code> attribute, it's essential to include <code>type=\"text/plain\"</code> to prevent their execution by default within the browser.</p>"},{"location":"web/implementation/ui/#2-assign-a-data-attribute","title":"2. Assign a data attribute","text":"<p>Furthermore, each third-party script must be assigned a custom <code>data-usercentrics</code> attribute. This attribute serves the purpose of associating the script with the services you create in the Usercentrics Admin Interface.</p> <p>The syntax for this data attribute is <code>data-usercentrics=\"Name of Data Processing Service\"</code> where \"Name of Data Processing Service\" should precisely match the name of the Data Processing Service you've defined.</p> <p>Illustration - Example of Data Processing Service in Admin Interface</p> <p> </p> <p>Case sensitivity</p> <p>Please ensure strict attention to uppercase and lowercase distinctions, as well as the presence of spaces within these service names, as the CMP takes all of these nuances into account.</p>"},{"location":"web/implementation/ui/#example","title":"Example","text":"<p>For illustrative purposes, here is how to modify the Facebook Pixel script.</p> Before adjustmentsAfter adjustments <pre><code>&lt;!-- Facebook Pixel Code --&gt;\n&lt;script&gt;\n!function(f,b,e,v,n,t,s)\n{if(f.fbq)return;n=f.fbq=function(){n.callMethod?\nn.callMethod.apply(n,arguments):n.queue.push(arguments)};\nif(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';\nn.queue=[];t=b.createElement(e);t.async=!0;\nt.src=v;s=b.getElementsByTagName(e)[0];\ns.parentNode.insertBefore(t,s)}(window, document,'script',\n'https://connect.facebook.net/en_US/fbevents.js');\nfbq('init', '{your-pixel-id-goes-here}');\nfbq('track', 'PageView');\n&lt;/script&gt;\n&lt;!-- End Facebook Pixel Code --&gt;\n</code></pre> <pre><code>&lt;!-- Facebook Pixel Code --&gt;\n&lt;script type=\"text/plain\" data-usercentrics=\"Facebook Pixel\"&gt;\n!function(f,b,e,v,n,t,s)\n{if(f.fbq)return;n=f.fbq=function(){n.callMethod?\nn.callMethod.apply(n,arguments):n.queue.push(arguments)};\nif(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';\nn.queue=[];t=b.createElement(e);t.async=!0;\nt.src=v;s=b.getElementsByTagName(e)[0];\ns.parentNode.insertBefore(t,s)}(window, document,'script',\n'https://connect.facebook.net/en_US/fbevents.js');\nfbq('init', '{your-pixel-id-goes-here}');\nfbq('track', 'PageView');\n&lt;/script&gt;\n&lt;!-- End Facebook Pixel Code --&gt;\n</code></pre> <p>After these modifications, the Facebook Pixel script will only run on page load if it has received the necessary consent.</p> <p>When consent is withdrawn</p> <p>In the event that a user withdraws their consent after a service has already been loaded, it is crucial to deactivate or stop the use of that service. One approach to achieve this is to initiate a page reload, effectively halting the execution of third-party scripts that lack consent.</p>"},{"location":"web/implementation/ui/#scripts-that-require-a-specific-type","title":"Scripts that require a specific type","text":"<p>In certain cases, scripts may require a different type attribute than <code>\"text/javascript\"</code>. To accommodate such scripts, an additional JavaScript wrapper can be employed to integrate them into your webpage. This wrapper must then be adjusted following the steps outlined in the Adjust existing scripts section, and also include the relevant data attribute for your data processing service to enable or disable it through the CMP.</p> <p>For instance, a scenario may arise where a third-party script must be configured with <code>type=\"module\"</code> for proper execution. If this specific configuration is necessary, the following is an example of how to implement the JavaScript wrapper, which allows you to work with such a service:</p>"},{"location":"web/implementation/ui/#example_1","title":"Example","text":"<pre><code>&lt;script type=\"text/plain\" data-usercentrics=\"Name Data Processing Service\"&gt;\nvar customScript = document.createElement('script');\ncustomScript.src = 'your source'; // Add source to your script\ncustomScript.type = 'module'; // Add type of your script\ndocument.head.appendChild(customScript); // or document.body.appendChild(customScript);\n&lt;/script&gt;\n</code></pre>"},{"location":"web/implementation/sdk/classes/","title":"Classes","text":""},{"location":"web/implementation/sdk/classes/#languages-model","title":"Languages Model","text":"<pre><code>class LanguagesModel {\nlanguages: Languages;\n/**\n   * Determines wether or not a language is available\n   * @param {string} language - Language code.\n   * @returns {boolean} - True if language is available.\n   */\ngetHasLanguage(language: string): boolean;\n/**\n   * Get the language direction (ltr or rtl)\n   * @param {string} language - Language code.\n   * @returns {string} - The language direction.\n   */\ngetLanguageScreenDirection(language: string): \"ltr\" | \"rtl\";\n}\n</code></pre>"},{"location":"web/implementation/sdk/classes/#uimodel","title":"UIModel","text":"<pre><code>class UiModel {\ninitialView: UiView;\nclosedView: 'none' | 'button';\nlanguage: string;\ngpcSignalHonored: boolean;\ndpsDisplayFormat: 'ALL' | 'SHORT';\n\n/**\n     * Get the ui chosen language\n     * @returns {string} - The ui language.\n     */\ngetLanguage(): string;\n/**\n     * Set the ui language\n     * @param {string} language - Chosen language.\n     * @returns {void}\n     */\nsetLanguage(language: string): void;\n/**\n     * Get the ui initial view\n     * @returns {UiView | undefined} - The initial UI view.\n     */\ngetInitialView(): UiView | undefined;\n/**\n     * Determine which view should be shown upon closing the CMP (none | button)\n     * @returns {string} - The UI view to be shown after closing CMP.\n     */\ngetClosedView(): \"none\" | \"button\";\n}\n</code></pre>"},{"location":"web/implementation/sdk/classes/#dpsmodel","title":"DpsModel","text":"<pre><code>class DpsModel implements DpsData {\nservices: DpsData['services'];\ncategories: DpsData['categories'];\ngranularConsentDisabled: DpsData['granularConsentDisabled'];\nupdatedBy?: DpsData['updatedBy'];\nconstructor({ services, categories, granularConsentDisabled }: DpsData);\n/**\n   * Accept all services consents\n   * @returns {void}\n   */\nacceptAll(): void;\n/**\n   * Deny all services consents\n   * @returns {void}\n   */\ndenyAll(): void;\n/**\n   * Accept a set of services consents\n   * @param {ServicesConsents} consents - Set of services to be accepted.\n   * @returns {void}\n   */\nacceptSome(consents: ServicesConsents): void;\n/**\n   * Deny a set of services consents\n   * @param {ServicesConsents} consents - Set of services to be denied.\n   * @returns {void}\n   */\ndenySome(consents: ServicesConsents): void;\n/**\n   * Update a set of services consents\n   * @param {ServicesConsents} consents - Set of services to be updated.\n   * @returns {void}\n   */\nupdateSome(consents: ServicesConsents): void;\n/**\n   * Update a set of categories' consents\n   * @param {CategoriesConsents} categoriesConsents - Set of categories to be updated.\n   * @returns {void}\n   */\nupdateCategoriesConsents(categoriesConsents: CategoriesConsents): void;\n/**\n   * Get all accepted services\n   * @param {string} key - Key that will identify each service on the final result.\n   * @returns {Record&lt;string, ServiceData&gt;} - The set of accepted services.\n   */\ngetAcceptedServices(key?: 'id' | 'name'): Record&lt;string, import(\"@usercentrics/cmp-browser-api\").ServiceData&gt;;\n/**\n   * Get all services consent state\n   * @param {string} key - Key that will identify each service on the final result.\n   * @returns {Record&lt;string, boolean&gt;} - The set of services with the respective consent state.\n   */\ngetServicesConsents(key?: 'id' | 'name'): Record&lt;string, boolean&gt;;\n/**\n   * Get all categories consent state\n   * @returns {Record&lt;string, CategoryData['state']&gt;} - The set of categories with the respective consent state.\n   */\ngetCategoriesConsents(): Record&lt;string, \"ALL_DENIED\" | \"SOME_ACCEPTED\" | \"ALL_ACCEPTED\"&gt;;\n/**\n   * Get category consent state\n   * @param {string} id - Category Id.\n   * @returns {CategoryData['state']} - The consent state of the category.\n   */\ngetCategoryConsent(id: string): \"ALL_DENIED\" | \"SOME_ACCEPTED\" | \"ALL_ACCEPTED\" | undefined;\n/**\n   * Get category id from service id\n   * @param {string} serviceId - Service Id.\n   * @returns {string} - The category Id.\n   */\ngetCategoryIdFromServiceId(serviceId: string): string;\n/**\n   * Get global consent status (based on all services)\n   * @returns {ConsentData['status']} - The global consent status.\n   */\ngetConsentStatus(): ConsentData['status'];\n/**\n   * Get the list of services ids which belong to the some_accepted or some_denied cases\n   * @returns {string[]} - The list of services ids.\n   */\ngetConsentServiceIds(): string[];\n/**\n   * Get service data by id\n   * @param {string} serviceId - Service id.\n   * @returns {ServiceData | undefined} - The service data.\n   */\ngetService(serviceId: string): import(\"@usercentrics/cmp-browser-api\").ServiceData | undefined;\n}\n</code></pre>"},{"location":"web/implementation/sdk/classes/#cmpcontroller","title":"CmpController","text":"<pre><code>export class CmpController {\npublic languages: LanguagesModel;\npublic ui: UiModel;\n\npublic dps: DpsModel;\npublic gcm?: GoogleConsentModeModel;\npublic setting: SettingModel;\n\npublic consent?: GdprConsentModel | CcpaConsentModel | TcfConsentModel;\npublic i18n?: GdprI18nModel | CcpaI18nModel | TcfI18nModel;\npublic tcf?: TcfModel;\npublic template?: TemplateModel;\npublic theme: ThemeModel;\n\n/**\n   * Get the consent details\n   * @returns {Promise&lt;ConsentDetails | undefined&gt;} - The consent data used inside our UCstring.\n   */\ngetConsentDetails(): Promise&lt;ConsentDetails | undefined&gt;;\n/**\n   * Fetch the translated data from the API and created the respective variant i18n models\n   * @returns {Promise&lt;void&gt;}\n   */\ninitI18nData(): Promise&lt;void&gt;;\n/**\n   * Clears the Local Storage including Cross Domain\n   * @returns {Promise&lt;void&gt;}\n   */\nclearStorage(): Promise&lt;void&gt;;\n/**\n   * Unblock the scripts which need consent to be run\n   * @returns {Promise&lt;string[]&gt;} - A list with the services names which were unblocked.\n   */\nunblockScriptsWithConsent(): Promise&lt;string[]&gt;;\n/**\n   * Get the Controller Id\n   * @returns {string | undefined} - The controller id value.\n   */\ngetControllerId(): string | undefined;\n/**\n   * Get the current selected language\n   * @returns {string} the selected language\n   */\ngetLanguage(): string;\n/**\n   * Get consent required\n   * @returns {boolean | undefined} - True if consent is required from user.\n   */\ngetIsConsentRequired(): boolean | undefined;\n/**\n   * Sets the CMP language to the new given language\n   * @param {string} language - New language\n   * @returns {Promise&lt;void&gt;}\n   */\nchangeLanguage(language: string): Promise&lt;void&gt;;\n/**\n   * Will set the analytics pixel via network call and will fire the custom events defined on the AI\n   * @param {CMP_EVENT_TYPE} cmpEventType - The type of event which trigered the analytics call.\n   * @param {CmpEventSource} source - The source from where the event was fired originally.\n   * @returns {void}\n   */\nsetAnalyticsPixel(cmpEventType: CMP_EVENT_TYPE, source?: CmpEventSource): void;\n/**\n   * Accepts all consents inside the CMP\n   * @returns {Promise&lt;void&gt;}\n   */\nacceptAllConsents(): Promise&lt;void&gt;;\n/**\n   * Denys all consents inside the CMP\n   * @returns {Promise&lt;void&gt;}\n   */\ndenyAllConsents(): Promise&lt;void&gt;;\n/**\n   * Updates a list of consents with the respective state\n   * @param {ServicesConsents} consents - List of (serviceId, consentState) pair.\n   * @returns {Promise&lt;void&gt;}\n   */\nupdateServicesConsents(consents: ServicesConsents): Promise&lt;void&gt;;\n/**\n   * Updates a specific consent with the respective state\n   * @param {ServiceConsent} consent - The service to be updated (serviceId, consentState) pair.\n   * @returns {Promise&lt;void&gt;}\n   */\nupdateServiceConsent(consent: ServiceConsent): Promise&lt;void&gt;;\n/**\n   * Updates a list of categories with the respective state\n   * @param {CategoriesConsents} categoriesConsents - List of (categoryId, consentState) pair.\n   * @returns {Promise&lt;void&gt;}\n   */\nupdateCategoriesConsents(categoriesConsents: CategoriesConsents): Promise&lt;void&gt;;\n/**\n   * Updates a specific category with the respective state\n   * @param {CategoriesConsents} categoriesConsents - The category to be updated (categoryId, consentState) pair.\n   * @returns {Promise&lt;void&gt;}\n   */\nupdateCategoryConsent(categoryConsent: CategoryConsent): Promise&lt;void&gt;;\n/**\n   * Save the consents\n   * @param {ConsentType} consentType - Type of consent (Implicit/Explicit).\n   * @returns {Promise&lt;void&gt;}\n   */\nsaveConsents(consentType?: ConsentType, fromEmbeddings?: boolean): Promise&lt;void&gt;;\n/**\n   * Save the consents remotely on API\n   * @returns {Promise&lt;void&gt;}\n   */\nsaveConsentRemotely(): Promise&lt;void&gt;;\n/**\n   * Check if all consents are granted\n   * @returns {boolean} - True if all consents accepted.\n   */\nareAllConsentsAccepted(): boolean;\n/**\n   * Check if all consents are denied\n   * @returns {boolean} - True if all consents denied.\n   */\nareAllConsentsDenied(): boolean;\n/**\n   * Gets the detailed information of a service\n   * @param {string} serviceId - Service id.\n   * @param {boolean} includeDetails - Determine wether service details should be included on the result or not.\n   * @returns {Promise&lt;{service: ServiceData; i18n: ServiceI18n;} | undefined&gt;} - The service detailed information.\n   */\ngetServiceInfo(serviceId: string, includeDetails?: boolean): Promise&lt;{\nservice: import(\"@usercentrics/cmp-browser-api\").ServiceData;\ni18n: import(\"@usercentrics/cmp-browser-api\").ServiceI18n;\n} | undefined&gt;;\n/**\n   * Get Stored Information via URL\n   * @param {string} url - URL for Stored Info.\n   * @returns {Promise&lt;{disclosures?: StoredInfoItem[] | undefined; domains?: StoredInfoItem[] | undefined;}&gt;} - The service's stored information.\n   */\ngetStoredInfoByUrl(url: string): Promise&lt;{\ndisclosures?: StoredInfoItem[] | undefined;\ndomains?: StoredInfoItem[] | undefined;\n}&gt;;\n/**\n   * Save consents locally and remotely\n   * @param {string} consentHash - Consent hash string.\n   * @returns {Promise&lt;void&gt;}\n   */\napplyConsents(consentHash?: string): Promise&lt;void&gt;;\n/**\n   * Get themes\n   * @param {Themes} themes - Themes for privacy button, cmp and embeddings views.\n   * @param {ScreenType} screenType - Screen type (desktop, tablet, mobile, xs).\n   * @returns {privacyButton, firstLayer, secondLayer, embeddings} - The views' themes according to screen type.\n   */\ngetThemes(themes: Themes, screenType: _ScreenType1): {\nprivacyButton: Required&lt;Required&lt;import(\"@usercentrics/cmp-browser-api\").PrivacyButtonTheme&gt;&gt; | {\ndirection: import(\"@/models/ThemeModel/interfaces\").ScreenDirection | undefined;\nposition: \"left\" | \"right\";\nsize: number;\nbackgroundColor: string;\npages: string[];\niconUrl: string;\niconColor: string;\n};\nfirstLayer: Required&lt;import(\"@usercentrics/cmp-browser-api\").CmpTheme&gt;;\nsecondLayer: Required&lt;import(\"@usercentrics/cmp-browser-api\").CmpTheme&gt;;\nembeddings: {\ndirection: import(\"@/models/ThemeModel/interfaces\").ScreenDirection | undefined;\nborder: {\nradius: string;\n};\nborderRadiusLayer: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nborderRadiusButton: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nbuttons: import(\"@usercentrics/cmp-browser-api\").CmpButtonsType[][];\ncolors: {\nacceptBg?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nacceptTxt?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nbackground?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nborder?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\ndenyBg?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\ndenyTxt?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n/**\n               * Update theme model\n               * @param {ThemeData} themeData - Theme model data.\n               * @returns {void}\n               */\nlink?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nmoreBg?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nmoreTxt?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nneutral?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\noverlay?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nprimary?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData; /**\n                * Get service consent history\n                * @param {string} serviceId - Service id.\n                * @returns {Promise&lt;void | DeviceStorage | null&gt;} - The consent history for the service.\n                */\nprivacyBg?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nprivacyIcon?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nsaveBg?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nsaveTxt?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\ntabActive?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\ntabInactive?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\ntoggleActive?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\ntoggleInactive?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\ntoggleDisabled?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\ntoggleActiveIcon?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\ntoggleInactiveIcon?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\ntoggleDisabledIcon?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\ntertiary?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\ntext?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nccpaButtonColor?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nccpaButtonTextColor?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n};\nscrollbar: {\nthumbColor?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n};\nfonts: {\nfamily: string;\n};\nhideDenyBtn: boolean;\nhideLanguageSwitch: boolean;\nlogo: {\nurl: string;\nalt: string;\nposition: \"center\" | \"left\" | \"right\";\n};\nfooter: {\nisCentered: boolean;\n};\nmaxBannerWidth: string;\nname: string;\noverlayOpacity: string;\nposition: \"center\" | \"left\" | \"right\" | \"bottom\";\nremoveCcpaToggle: boolean;\nsecondLayerTrigger: string;\nspacing: import(\"@usercentrics/cmp-browser-api\").Spacing;\ntypography: {\ncolor?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nfont?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\nsize?: number | undefined;\n};\nuseBackgroundShadow: boolean;\nuseOverlay: boolean;\ncloseOption: import(\"@usercentrics/cmp-browser-api\").CLOSE_OPTION | null;\ntcf: {\nshowDescriptions?: boolean | undefined;\nhideNonIab?: boolean | undefined;\nhideToggles?: boolean | undefined;\nshowSharedOutsideEu?: boolean | undefined;\n};\nshowCategoriesToggles: boolean;\nshowMoreInformationLink: boolean;\nhideDataProcessingServices: boolean;\nhideServicesToggles: boolean;\ndefaultTab: \"FIRST\" | \"SECOND\";\n};\n};\n/**\n   * Update theme model\n   * @param {ThemeData} themeData - Theme model data.\n   * @returns {void}\n   */\nupdateTheme(themeData: _ThemeData1): void;\n/**\n   * Get service consent history\n   * @param {string} serviceId - Service id.\n   * @returns {Promise&lt;void | DeviceStorage | null&gt;} - The consent history for the service.\n   */\ngetConsentHistory(serviceId?: string): Promise&lt;void | import(\"@usercentrics/cmp-browser-api\").ConsentHistory[] | null&gt;;\n}\n</code></pre>"},{"location":"web/implementation/sdk/enums/","title":"Enums","text":""},{"location":"web/implementation/sdk/enums/#cmp_event_type","title":"CMP_EVENT_TYPE","text":"<pre><code>enum CMP_EVENT_TYPE {\nCMP_SHOWN = \"CMP_SHOWN\",\nACCEPT_ALL = \"ACCEPT_ALL\",\nDENY_ALL = \"DENY_ALL\",\nSAVE = \"SAVE\",\nCOOKIE_POLICY_LINK = \"COOKIE_POLICY_LINK\",\nIMPRINT_LINK = \"IMPRINT_LINK\",\nMORE_INFORMATION_LINK = \"MORE_INFORMATION_LINK\",\nPRIVACY_POLICY_LINK = \"PRIVACY_POLICY_LINK\",\nCCPA_TOGGLES_ON = \"CCPA_TOGGLES_ON\",\nCCPA_TOGGLES_OFF = \"CCPA_TOGGLES_OFF\"\n}\n</code></pre>"},{"location":"web/implementation/sdk/interfaces/","title":"Interfaces","text":""},{"location":"web/implementation/sdk/interfaces/#initoptions","title":"InitOptions","text":"<pre><code>interface InitOptions {\ndisableTracking?: boolean;\neuMode?: boolean;\nlanguage?: string;\nlocation?: UserLocation;\nsandbox?: true;\n}\n</code></pre>"},{"location":"web/implementation/sdk/interfaces/#userlocation","title":"UserLocation","text":"<pre><code>interface UserLocation {\ncountry: string;\nregion?: string;\ncity?: string;\n}\n</code></pre>"},{"location":"web/implementation/sdk/interfaces/#serviceconsent","title":"ServiceConsent","text":"<pre><code>interface ServiceConsent {\nid: string;\nconsent: boolean;\n}\n</code></pre>"},{"location":"web/implementation/sdk/interfaces/#languagesdata","title":"LanguagesData","text":"<pre><code>interface LanguagesData {\nlanguages: Languages;\n}\n</code></pre>"},{"location":"web/implementation/sdk/interfaces/#language","title":"Language","text":"<pre><code>interface Language {\nname: string;\nen?: string;\nrtl?: true;\n}\n</code></pre>"},{"location":"web/implementation/sdk/methods/","title":"CmpController Methods","text":"<p>Methods go here</p>"},{"location":"web/implementation/sdk/types/","title":"Types","text":""},{"location":"web/implementation/sdk/types/#cmpeventsource","title":"CmpEventSource","text":"<pre><code>type CmpEventSource = UiView | 'embeddings' | '__ucCmp';\n</code></pre>"},{"location":"web/implementation/sdk/types/#servicesconsents","title":"ServicesConsents","text":"<pre><code>type ServicesConsents = ServiceConsent[];\n</code></pre>"},{"location":"web/implementation/sdk/types/#categoriesconsents","title":"CategoriesConsents","text":"<pre><code>type CategoriesConsents = CategoryConsent[];\n</code></pre>"},{"location":"web/implementation/sdk/types/#categoryconsent","title":"CategoryConsent","text":"<pre><code>type CategoryConsent = ServiceConsent;\n</code></pre>"},{"location":"web/implementation/sdk/types/#languages","title":"Languages","text":"<pre><code>type Languages = Record&lt;string, Language&gt;;\n</code></pre>"},{"location":"web/implementation/sdk/types/#uiview","title":"UiView","text":"<pre><code>type UiView = 'none' | 'button' | 'first' | 'second';\n</code></pre>"},{"location":"web/implementation/ui/interfaces/","title":"Interfaces","text":""},{"location":"web/implementation/ui/interfaces/#tcfdecisions","title":"TCFDecisions","text":"<pre><code>/** A user's consent decision on all TCF options */\ninterface TCFDecisions {\n/** A user's consent decision on TCF purposes */\npurposes?: TCFUserDecisionOnPurpose[];\n/** A user's consent decision on TCF special features */\nspecialFeatures?: TCFUserDecisionOnSpecialFeature[];\n/** A user's consent decision on TCF vendors */\nvendors?: TCFUserDecisionOnVendor[];\n}\n</code></pre>"},{"location":"web/implementation/ui/interfaces/#basetcfuserdecision","title":"BaseTCFUserDecision","text":"<pre><code>interface BaseTCFUserDecision {\n/** Indicates if the user gave consent (true) or denied consent (false) */\nconsent?: boolean;\n/** The id of the purpose/vendor the consent decision belongs to */\nid: number;\n}\n</code></pre>"},{"location":"web/implementation/ui/interfaces/#tcfuserdecisiononpurpose","title":"TCFUserDecisionOnPurpose","text":"<pre><code>/** A user's consent decision for a single purpose */\ninterface TCFUserDecisionOnPurpose extends BaseTCFUserDecision {\n/** Indicates if the user gave legitimate interest consent (true) or denied consent (false) */\nlegitimateInterestConsent?: boolean;\n}\n</code></pre>"},{"location":"web/implementation/ui/interfaces/#tcfuserdecisiononspecialfeature","title":"TCFUserDecisionOnSpecialFeature","text":"<pre><code>/** A user's consent decision for a single special feature */\ninterface TCFUserDecisionOnSpecialFeature extends BaseTCFUserDecision {\n/** pasisng consent is compulsory */\nconsent: boolean;\n}\n</code></pre>"},{"location":"web/implementation/ui/optional-steps/","title":"Optional Steps","text":""},{"location":"web/implementation/ui/optional-steps/#draft-script","title":"Draft Script","text":"<p>To test new changes within the Admin Interface before releasing them to your live environment, you can save any changes to a draft version. To display this draft version, you will need to add a data-draft=\"true\" attribute to the CMP script tag.</p> <pre><code>    &lt;script\n        id=\"usercentrics-cmp\"\n        data-settings-id=\"YOUR_SETTINGS_ID\"\n        src=\"https://web.cmp.usercentrics.eu/ui/loader.js\"\n        data-draft=\"true\"\n    &lt;/script&gt;\n</code></pre>"},{"location":"web/implementation/ui/optional-steps/#adding-a-nonce-to-the-script-tag","title":"Adding a nonce to the script tag","text":"<p>To add a nonce to your personal script, you can add it like so:</p> Non-TCF ScriptTCF Script <pre><code>&lt;script\n    id=\"usercentrics-cmp\"\n    data-settings-id=\"YOUR_SETTINGS_ID\"\n    src=\"https://web.cmp.usercentrics.eu/ui/loader.js\"\n    nonce=\"nonce-VALUE\"\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;script\n    id=\"usercentrics-cmp\"\n    data-settings-id=\"YOUR_SETTINGS_ID\"\n    src=\"https://web.cmp.usercentrics.eu/ui/loader.js\"\n    data-tcf-enabled\n    nonce=\"nonce-VALUE\"\n&lt;/script&gt;\n</code></pre>"},{"location":"web/implementation/ui/optional-steps/#improved-consent-sharing-between-subdomains","title":"Improved consent sharing between subdomains","text":"<p>If you're using Usercentrics Cross Domain Consent Sharing (CDCS) your website visitors might still see the CMP again when switching to another subdomain, for example <code>mywebshop.com</code> to <code>checkout.mywebshop.com</code>. Modern browsers are causing this behavior as they block the shared iframe provided by Usercentrics. The following section describes the needed steps to prevent this from happening.</p> <p>This solution will improve user experience for most browsers, however currently not for Safari users. We're actively working on this case to offer you a solution for Safari users too.</p> <ul> <li>Download the file cross-domain-bridge.html (right click &gt; save as ...)</li> <li>Upload this file to your webserver. It should be reachable from your main domain that is included in all of your subdomains. For example: <code>https://mywebshop.com/cross-domain-bridge.html</code></li> <li>Before the Usercentrics CMP script tag, set the new location of the Cross Domain Bridge via the <code>window.UC_UI_DOMAINS.crossDomainConsentSharingIFrame</code> property (this should be added into all the domains, including the main domain).</li> </ul>"},{"location":"web/implementation/ui/optional-steps/#example","title":"Example","text":"<p>A complete example might look like this</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\nwindow.UC_UI_DOMAINS = {\ncrossDomainConsentSharingIFrame: 'https://mywebshop.com/cross-domain-bridge.html',\n};\n&lt;/script&gt;\n&lt;script id=\"usercentrics-cmp\" data-settings-id=\"XXXXXXXX\" src=\"https://app.usercentrics.eu/browser-ui/latest/loader.js\" async&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"web/implementation/ui/optional-steps/#white-labeling-urls","title":"White labeling URLs","text":"<p>For customers that only allow sources from the same domain on their websites for security reasons, you can now configure from which address all Usercentrics resources (JSON files, JavaScript files etc.) should be loaded.</p> <p>This should be configured before the UI script from \"Add the JavaScript Tag\"</p> <p>In order to configure the domains please define the window variable called ucCmpConfig with the following structure:</p> <pre><code>window.ucCmpConfig = {\nproxy: {\napi: '',\nconsent: '',\ncrossDevice: '',\nlogger: '',\ncdn: '',\n}\n}\n</code></pre>"},{"location":"web/implementation/ui/optional-steps/#our-endpoints","title":"Our Endpoints","text":"<p>Important</p> <p>Your proxy servers should point to the following domains</p> <p>Regarding Cross Domain Consent Sharing feature you can white label only the domain via app key or provide a full URL to be used for this feature via crossDomainConsentSharingIFrame key</p> Name Purpose Key Domain Api Api to communicate between the UI and the SDK / backend api https://v1.api.service.cmp.usercentrics.eu Consents Get the consents data for Cross Domain feature consent https://consent-api.service.consent.usercentrics.eu Cross Device Consents Get the consents data for Cross Device feature crossDevice https://consent-rt-ret.service.consent.usercentrics.eu GraphQL Stores all user decisions on server logger https://graphql.usercentrics.eu CDN URL used on Cross Domain Consent Sharing Iframe to get data cdn https://web.cmp.usercentrics.eu"},{"location":"web/implementation/ui/types/","title":"Types","text":""},{"location":"web/implementation/ui/types/#tcfuserdecisiononvendor","title":"TCFUserDecisionOnVendor","text":"<pre><code>type TCFUserDecisionOnVendor = TCFUserDecisionOnPurpose;\n</code></pre>"},{"location":"web/migration/migration-from-v2/","title":"Migrate from V2","text":""},{"location":"web/migration/migration-from-v2/#migrate-to-v3","title":"Migrate to V3","text":""},{"location":"web/migration/migration-from-v2/#introduction","title":"Introduction","text":"<p>V3 introduces breaking changes that will require manual updates if you have an existing codebase with a custom V2 implementation. </p> <p>This guide covers what you should be changing in order to be able to use the V3 version.</p> <p>For each step, this guide is designed to:</p> <ul> <li>help you understand the differences between V2 and V3</li> <li>help you resolve any breaking changes</li> <li>provide you, whenever possible, with code examples and starting points in order to migrate to V3.</li> </ul> <p>Info</p> <p>For a broader understanding of V3, please read the following document.</p>"},{"location":"web/migration/migration-from-v2/#getting-started","title":"Getting started","text":""},{"location":"web/migration/migration-from-v2/#script-tag","title":"Script Tag","text":"<p>Let's start the migration by updating the Usercentrics <code>&lt;script&gt;</code> tag on your website.</p> <p>The main difference will be the <code>src</code> URL. In order to start using V3, please update the <code>src</code> to: <code>\"https://web.cmp.usercentrics.eu/ui/loader.js</code>.</p> <p>bundle and bundle-legacy users</p> <p>Only <code>loader.js</code> is available on V3</p> <p>For highest possible performance we also offer the \"plus\" setup. However, we do not recommend this setup if you can't  guarantee to update the script source regularly.</p> V2 GDPRV2 TCFV3 GDPRV3 TCFV3 GDPR+V3 TCF+ <pre><code>&lt;script\n  id=\"usercentrics-cmp\"\n  data-settings-id=\"XXXXXXXX\"\n  src=\"https://app.usercentrics.eu/browser-ui/latest/loader.js\" \n  async&gt;\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;script\n  id=\"usercentrics-cmp\"\n  data-settings-id=\"XXXXXXXX\"\n  src=\"https://app.usercentrics.eu/browser-ui/latest/loader.js\"\n  data-tcf-enabled\n&gt;\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;script\n  id=\"usercentrics-cmp\"\n  data-settings-id=\"XXXXXXXX\"\n  src=\"https://web.cmp.usercentrics.eu/ui/loader.js\" \n  async\n&gt;\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;script src=\"https://web.cmp.usercentrics.eu/tcf.stub.js\"&gt;\n&lt;script\nid=\"usercentrics-cmp\"\ndata-settings-id=\"XXXXXXXX\"\nsrc=\"https://web.cmp.usercentrics.eu/ui/loader.js\" async\n&gt;\n&lt;/script&gt;\n</code></pre> <p>Requires manual version updating</p> <p>If you can't guarantee to update the CMP UI version manually on a frequent basis (&lt; 8 weeks) please use the loader.js implementation instead.</p> <pre><code>&lt;link rel=\"preload\" href=\"https://web.cmp.usercentrics.eu/ui/v/${LATEST_UC_UI_VERSION}/cmp.gdpr.js\" as=\"script\"&gt;\n&lt;script\n  id=\"usercentrics-cmp\"\n  data-settings-id=\"XXXXXXXX\"\n  src=\"https://web.cmp.usercentrics.eu/ui/v/${LATEST_UC_UI_VERSION}/cmp.gdpr.js\" \n  async\n&gt;\n&lt;/script&gt;\n</code></pre> <p>Requires manual version updating</p> <p>If you can't guarantee to update the CMP UI version manually on a frequent basis (&lt; 8 weeks) please use the loader.js implementation instead.</p> <pre><code>&lt;link rel=\"preload\" href=\"https://web.cmp.usercentrics.eu/tcf/stub.js\" as=\"script\"&gt;\n&lt;link rel=\"preload\" href=\"https://web.cmp.usercentrics.eu/ui/v/${LATEST_UC_UI_VERSION}/cmp.tcf.js\" as=\"script\"&gt;\n\n&lt;script src=\"https://web.cmp.usercentrics.eu/tcf.stub.js\"&gt;\n&lt;script\nid=\"usercentrics-cmp\"\ndata-settings-id=\"XXXXXXXX\"\nsrc=\"https://web.cmp.usercentrics.eu/ui/v/${LATEST_UC_UI_VERSION}/cmp.tcf.js\" async\n&gt;\n&lt;/script&gt;\n</code></pre>"},{"location":"web/migration/migration-from-v2/#browser-ui-api","title":"Browser UI API","text":"<p>We recommend taking a look at our new Browser UI API after you resolve the breaking changes</p>"},{"location":"web/migration/migration-from-v2/#renamed-methods","title":"Renamed methods","text":"<p>With the introduction of V3, the following Browser UI API methods were renamed:</p> Old name New name enableScriptsForServicesWithConsent <code>refreshScripts</code>"},{"location":"web/migration/migration-from-v2/#renamed-methods-with-functional-changes","title":"Renamed methods with functional changes","text":"<p>The following methods, besides being renamed also got functional changes</p> Old name New name acceptServices <code>updateServicesConsents</code> rejectServices \u2060 updateChoicesForTcf <code>updateTcfConsents</code>"},{"location":"web/migration/migration-from-v2/#updateservicesconsents","title":"updateServicesConsents","text":"<p>In order to simplify the services consent updates, the <code>acceptServices</code> and <code>rejectServices</code> have been unified into one method <code>updateServicesConsents</code> which now accepts the following parameters:</p> Input Input Type Return Type servicesConsents ServicesConsents <code>Promise&lt;void&gt;</code> <pre><code>const serviceConsents = [\n{id: 'HkocEodjb7', consent: true}, // Google Analytics\n{id: 'S1_9Vsuj-Q', consent: false}, // Google Ads\n]\n\nawait __ucCmp.updateServicesConsents(serviceConsents);\nawait __ucCmp.saveConsents();\n</code></pre>"},{"location":"web/migration/migration-from-v2/#updatetcfconsents","title":"updateTcfConsents","text":"Input Input Type Return Type decisions TCFDecisions <code>Promise&lt;void&gt;</code> <pre><code>const vendorConsents = [\n{id: 6, consent: true}, // AdSpirit GmbH\n{id: 11, legitimateInterestConsent: false}, // Quantcast\n];\n\nconst decision = {\nvendors: vendorConsents\n};\n\nawait updateTcfVendorConsents({ decision });\n</code></pre>"},{"location":"web/migration/migration-from-v2/#methods-functional-changes","title":"Methods functional changes","text":"<p>All new V3 methods are now async. Apart from that, <code>denyAllConsents</code>, <code>acceptAllConsents</code>, <code>updateServicesConsents</code> and <code>updateTcfConsents</code> will only update the consent status. In order to save consents, you need to call <code>saveConsents('EXPLICIT' | 'IMPLICIT')</code> after updating consents.</p>"},{"location":"web/migration/migration-from-v2/#removed-methods","title":"Removed methods","text":"<p>With the introduction of V3, the following Browser UI API methods were removed:</p> <p>Removed methods</p>"},{"location":"web/migration/migration-from-v2/#acceptservice","title":"acceptService","text":""},{"location":"web/migration/migration-from-v2/#areallconsentsaccepted","title":"areAllConsentsAccepted","text":""},{"location":"web/migration/migration-from-v2/#clearstorage","title":"clearStorage","text":""},{"location":"web/migration/migration-from-v2/#denyandcloseccpa","title":"denyAndCloseCcpa","text":""},{"location":"web/migration/migration-from-v2/#rejectservice","title":"rejectService","text":""},{"location":"web/migration/migration-from-v2/#getservicesbaseinfo","title":"getServicesBaseInfo","text":""},{"location":"web/migration/migration-from-v2/#getservicesfullinfo","title":"getServicesFullInfo","text":""},{"location":"web/migration/migration-from-v2/#restartcmp","title":"restartCMP","text":""},{"location":"web/migration/migration-from-v2/#restartembeddings","title":"restartEmbeddings","text":""},{"location":"web/migration/migration-from-v2/#getsettings","title":"getSettings","text":""},{"location":"web/migration/migration-from-v2/#getsettingscore","title":"getSettingsCore","text":""},{"location":"web/migration/migration-from-v2/#getsettingsui","title":"getSettingsUI","text":""},{"location":"web/migration/migration-from-v2/#getsettingslabels","title":"getSettingsLabels","text":""},{"location":"web/migration/migration-from-v2/#gettcfvendors","title":"getTCFVendors","text":""},{"location":"web/migration/migration-from-v2/#content-security-policy","title":"Content Security Policy","text":"<p>For best security you should a <code>Content-Security-Policy</code> meta tag. It's important to replace the nonce.</p> <pre><code>&lt;meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' https://*.usercentrics.eu 'nonce-SomeRandomString'; connect-src 'self' https://*.usercentrics.eu; img-src 'self' data: https://*.usercentrics.eu;\"&gt;\n&lt;script nonce=\"SomeRandomString\" src=\"https://web.cmp.usercentrics.eu/ui/loader.js\" id=\"usercentrics-cmp\" data-settings-id=\"YOUR_SETTINGS_ID\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"web/migration/migration-from-v2/#missing-features-not-implemented-yet","title":"Missing features (not implemented yet)","text":"<p>Whereas most of the features of v2 have been implemented, some are still on the todo list:</p> <ul> <li>Smart Data Protector compatibility</li> <li>Consent injection via <code>window</code> variable</li> <li>Custom domain names</li> </ul>"},{"location":"web/migration/migration-from-v2/#customcss","title":"CustomCSS","text":"<p>Since the structure of the CMP changed, the custom css is not backwards compatible and needs updating. TODO: add css entry points</p>"},{"location":"web/migration/migration-from-v2/#embeddings","title":"Embeddings","text":"<p>Starting with V3, in order to simplify their usage - embeddings will be a reflection of the CMP itself, meaning that all the information present in the CMP will also be present in these.</p> <p>Setup options</p> <p>For the <code>div</code> possible class names remain the same: <code>\"uc-embed\"</code> and <code>\"uc-embed-tcf\"</code> for GDPR and TCF, respectively.</p> <p>For more insights, please refer to the Embeddings documentation</p>"},{"location":"web/migration/migration-from-v2/#structure","title":"Structure","text":"<p>Since embeddings are a reflection of the CMP in V3, the structure of these have been simplified. The previous way of configuring embeddings is no longer required because of this.</p>"},{"location":"web/migration/migration-from-v2/#deprecated-attributes","title":"Deprecated attributes","text":""},{"location":"web/migration/migration-from-v2/#uc-data","title":"uc-data","text":"<p>As mentioned above, all the information present in the CMP will be displayed in the embeddings with no option to filter out specific information.</p>"},{"location":"web/migration/migration-from-v2/#uc-styling","title":"uc-styling","text":"<p>All embeddings will have the same styling as the CMP, so no further styling is required.</p>"},{"location":"web/migration/migration-from-v2/#uc-consent-name","title":"uc-consent-name","text":"<p>This attribute has been deprecated in favor of using the <code>uc-embed-type</code> value <code>service-specific</code> with the <code>uc-embed-service-id</code>.</p> <p>Example on how to migrate from V2 to V3</p> V2V3 <pre><code>&lt;div \n  class=\"uc-embed\"\n  uc-consent-name=\"Youtube Video\"\n  uc-data=\"all\"&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>&lt;div \n  class=\"uc-embed\"\n  uc-embed-type=\"service-specific\"\n  uc-embed-service-id=\"BJz7qNsdj-7\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"web/migration/migration-from-v2/#uc-embedding-vendors","title":"uc-embedding-vendors","text":"<p>Since we now reflect the same labels and styling as the CMP, this option is no longer available.</p>"},{"location":"web/migration/migration-from-v2/#uc-embedding-non-iab-vendors","title":"uc-embedding-non-iab-vendors","text":"<p>Since we now reflect the same labels and styling as the CMP, this option is no longer available.</p>"},{"location":"web/migration/migration-from-v2/#renamed-attributes","title":"Renamed attributes","text":""},{"location":"web/migration/migration-from-v2/#uc-embedding-type","title":"uc-embedding-type","text":"<p>Was renamed to <code>uc-embed-type</code>.</p> <p>The values for <code>purpose</code> and <code>vendor</code> were renamed to <code>purposes</code> and <code>vendors</code>, respectively.</p>"},{"location":"web/migration/migration-from-v2/#uc-show-toggle","title":"uc-show-toggle","text":"<p>Was renamed to <code>uc-embed-show-toggle</code>.</p> <p>Following the same phylosophy as <code>uc-styling</code> is no longer possible to change the toggle colors, they will keep the same color as selected for the CMP.</p> <p>In that case, <code>.uc-embed-toggle-button.toggle-on</code>, <code>.uc-embed-toggle-button.toggle-off</code>, <code>.uc-embed-toggle-button.toggle-disabled</code> are no longer supported. </p>"},{"location":"web/migration/migration-from-v2/#uc-embedding-show-hidden-categories","title":"uc-embedding-show-hidden-categories","text":"<p>Was renamed to <code>uc-embed-show-all-categories</code>. All other functionality and properties remain the same.</p>"},{"location":"web/migration/migration-from-v2/#uc-embedding-title","title":"uc-embedding-title","text":"<p>Was renamed to <code>uc-embed-title</code>.</p>"}]}