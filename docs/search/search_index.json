{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"apps/intro/","title":"Welcome!","text":"<p>You are now one step closer from making privacy a core feature in your application. We are very happy that you decided to make this a priority. We are here to help you build trust with your users.</p>"},{"location":"apps/intro/#the-usercentrics-apps-sdk","title":"The Usercentrics Apps SDK","text":"<p>The Usercentrics Apps SDK is a native Consent Management Platform solution for mobile apps, mobile games &amp; TV applications, that enables the collection, documentation, and management of your user's privacy choices, in order to ensure legal compliance for legal regulations around the world.</p> <p></p> <p>Our SDK consists of 2 main components:</p> UsercentricsCore Contains all core functionality to collect, document and manage consent, as well as usability features like language detection and geolocation. You may use this component by itself, if you are planing to build your own UI. UsercentricsUI UI Component that hooks to our UsercentricsCore to provide a ready to use consent banner solution. This component is design to own all the complexity of compliance, while also providing several levels of customization."},{"location":"apps/intro/#get-started","title":"Get started","text":"<p>Please create a Usercentrics account or starting a free trial in order to test the Usercentrics SDK.</p>"},{"location":"apps/intro/#supported-legal-frameworks","title":"Supported Legal Frameworks","text":"<ul> <li>\ud83c\uddea\ud83c\uddfa GDPR - European Union's General Data Protection Regulation</li> <li>\ud83c\udf0e TCF 2.2 - IAB's Transparency &amp; Consent Framework 2.2</li> <li>\ud83c\uddfa\ud83c\uddf8 CCPA/CPRA and other US Frameworks - Regulations in US States</li> <li>\ud83c\udde7\ud83c\uddf7 LGPD - Brazil\u2019s Lei Geral de Prote\u00e7\u00e3o de Dados</li> <li>and many more...</li> </ul>"},{"location":"apps/intro/#features","title":"Features","text":"<ul> <li>Easy installation via a package manager</li> <li>Methods to collect &amp; update consent</li> <li>Up-to-date legal information on more than 1,000 technology vendors</li> <li>UsercentricsUI is a plug &amp; play CMP solution with endless customization options</li> <li>Build your own CMP with our UsercentricsCore module, an API that provides all necessary data and action delegates</li> <li>Device language detection</li> <li>tvOS and Android TV support only when building your own CMP</li> <li>Share the same settingsID between multiple apps and web applications</li> <li>Cross-Device consent sharing</li> <li>Consent continuity between the app and embedded WebViews. (Browser SDK is required)</li> <li>Offline Handling</li> <li>Support for Landscape Mode</li> <li>Reporting of service Opt-In rates</li> <li>Reporting of User Interactions</li> </ul>"},{"location":"apps/releases/","title":"Releases","text":""},{"location":"apps/releases/#release-history","title":"Release History","text":"<p>The following table lists the details of the latest Usercentrics App SDK releases:</p> Version Release Date Release Notes 2.9.0 October 4, 2023 <ul><li>[TCF 2.2 Support] As the industry shifts to TCF 2.2 (deadline: November 20, 2024), we are pleased to announce that SDK Version 2.9.0 now offers comprehensive support for this new industry standard. \u26a0\ufe0fImportant Note: Please be aware that this version is incompatible with TCF 2.0. Before upgrading to V 2.9.0, ensure a smooth transition to TCF 2.2 following the guidelines on How to migrate from TCF v2.0 to TCF v2.2 </li><li>[Updated Global Vendor List] We've transitioned to Global Vendor List v3 to align with industry standards.</li><li>[Legitimate Interest] To enhance transparency and privacy, purposes 3 to 6 have been removed, and purpose 11 has been introduced.</li><li>[Improved User Interface] We've made enhancements to the banner's second layer for a better user experience.</li><li>[Vendor Count Display] Users can now easily see the total count of IAB and non-IAB vendors.</li><li>[New Resurface Requirements] We've implemented new resurfacing requirements to keep your CMP compliant with the latest standards.</li></ul> 2.8.2 July 12, 2023 <ul><li>[Unity] New <code>getCMPData</code> API, to unlock <code>activeVariant</code> and <code>publsihedApps</code> properties.</li><li>[Flutter &amp; React Native] Intraction Analytics tracking API is now available.</li><li>[Improvement] \"Default\" label value is now supported for consent history entries.</li><li>[Improvement] Enable support for Hidden Data Processing Services.</li></ul> 2.8.1 May 26, 2023 <ul><li>[Fix] <code>onConsentUpdated</code> event was not triggered after initialization.</li><li>[Fix] Solved issue with Boolean values being sent via consent mediation to Adjust </li><li>[Fix] Solved Apple TV labels being cut off</li><li>[Fix] Solved Android TV issue when showing TCF on 2<sup>nd</sup> layer.</li></ul> 2.8.0 May 08, 2023 <ul><li>[Feature] Add support to US Legal Frameworks.</li><li>[Deprecate] Remove deprecated method <code>showFirstLayer(layout: Layout)</code></li></ul> 2.7.16 April 17, 2023 <ul><li>[Feature] Supporting Limited Fields in Service Descriptions.</li><li>[Improvement] Accessibility in First and Second Layer.</li><li>[Improvement] Custom UI objects are getting the latest values.</li><li>[Fix] General issues.</li></ul> 2.7.15 March 23, 2023 <ul><li>[Fix] General issues.</li><li>[Fix] Switches were showing the wrong value on iOS when pressing too many times repeatedly.</li></ul> 2.7.14 March 03, 2023 <ul><li>[Fix] Issue when toggles were showing on second layer even though they were disabled.</li><li>[Fix] Issue where the first time the app was initialized using the method getTCString, the TCString comes out empty.</li><li>[Fix] Issue where DPSs accepted by default did not appear as accepted when opening second layer.</li></ul> 2.7.13 February 22, 2023 <ul><li>[Feature] Expose PUR enabling properties</li><li>[Improvement] Extend handling of edge case exceptions. </li><li>[Improvement] UI updates to CCPA banner variant. </li><li>[Fix] Issue with third party SDKs being included in POM file.</li></ul> 2.7.12 February 07, 2023 <ul><li>[Consent Mediation] Add support for Adjust and Crashlytics.</li><li>[Consent Mediation] Add support for Custom DPSs.</li><li>Stability improvements and bug fixes.</li></ul> 2.7.10 January 16, 2023 <ul><li>[Improvement] TCF 2.2 Performance upgrades when storing TCString.</li><li>Stability improvements and bug fixes.</li></ul> 2.7.9 December 21, 2022 <ul><li>[Accessibility] Our Second Layer Banner now meets accessibility standards. </li><li>[Feature] Android's disable system back button property is exposed on <code>GeneralStyleSettings</code>.</li><li>[Feature] Adding support for \"More Information link\" option from our Configuration Dashboard.</li><li>[Improvements] Upgrades to TCF String encoding. </li><li>Stability improvements and bug fixes. </li></ul> 2.7.8 December 07, 2022 <ul><li>[Accessibility] First Layer Banner now meets accessibility standards.</li><li>Stability improvements and bug fixes. </li></ul> 2.7.7 December 02, 2022 <ul><li>[Feature] Enable banner layout options from the Configuration Dashboard. This feature is only for \"App Advanced\" Configurations. Please contact your CSM if you would like to get access to this feature.</li><li>[Improvement] Kotlin version has been upgraded to 1.8.0-Beta</li><li>[Improvement] Upgrade app cycle triggers to support latest updates from Operating Systems.</li><li>[Fix] Issues with CCPA toggle initial value.</li><li>Stability improvements and bug fixes. </li></ul> 2.7.6 November 18, 2022 <ul><li>[Feature] Support for TCF Resurface options.</li><li>Stability improvements and bug fixes. </li></ul> 2.7.5 October 26, 2022 <ul><li>[Unity] You can now build your own IAB TCF 2.2 Banner with our Data Source &amp; Action Delegate API.</li><li>[Improvements] Major upgrades to main thread use.</li><li>[Improvements] Enable support for Swift UI.</li><li>[Fix] NPE crash happening in edge cases on Android.</li></ul> 2.7.4 October 10, 2022 <ul><li>[A/B Testing] With this release, you will now be able to create your own A/B Testing when showing the banner to your users. Check our exclusive page on how to achieve this.</li><li>[Improvement] Support dynamic colors on iOS.</li><li>Stability improvements and bug fixes. </li></ul> 2.7.3 September 20, 2022 <ul><li>[Improvement] Major performance upgrades on loading times.</li></ul> 2.7.2 August 31, 2022 <ul><li>[Feature] Enable option to show \"Continue without accepting\" button on First Layer.</li><li>[Feature] It is now possible to customize Legal Links via our Programmatic API.</li><li>[Improvement] Upgrade Error logs to help you debug the SDK's behaviour better.</li><li>[Fix] Issue where shouldCollectConsent property was always true for TCF 2.2 variant.</li></ul> 2.7.1 August 19, 2022 <ul><li>[Restore User Session] With this release, you will now be able to restore user sessions when using a TCF configuration. This feature however, needs to be enabled and approved. Please contact your Customer Success Manager for more information.</li><li>[Improvement] API upgrades to increase performance and storage space usage.</li><li>[Improvement] Updates to TCF 2.2 logic, for custom use cases.</li><li>[Improvement] Handle \"NullPointerException\" and unknown origin crashes.</li><li>[Fix] Issue where SDK was overwriting theme to always be \"light\" for Dark Mode implementation on iOS.</li></ul> 2.7.0 August 01, 2022 <ul><li>[Dark Mode] Enable Dark Mode and advance banner customizations with our updated Customization API.</li><li>[Consent Mediation] Automatically apply consent to 3<sup>rd</sup> party SDKs with our Consent Mediation feature.</li><li>[Fix] UI threading issue on React Native.</li></ul> 2.6.1 June 28, 2022 <ul><li>[Unity] Enable EU Proxy.</li><li>[Unity] Expose USPData for CCPA compliance.</li><li>[Feature] Added additional customization options for TCF 2.2 banner.</li><li>[Improvement] UI upgrades to history section.</li><li>[Fix] Thread freeze issue for edge case initialization flow.</li><li>Stability improvements and bug fixes. </li></ul> 2.6.0 June 09, 2022 <ul><li>[Geolocation Rules] You can now initialize the SDK with a RuleSetID to automatically address different regulations based on user location.</li><li>[Custom UI] Since we display some fields using HTML, we are now exposing them using Spanned (Android) and NSMutableAttributedString.</li><li>[Analytics] When building your own UI, you can now integate with our Interaction Analytics API to get all your consent insights.</li><li>Stability improvements and bug fixes. </li></ul> 2.5.3 May 20, 2022 <ul><li>[Fix] Issues when parsing TCF String</li><li>Stability improvements and bug fixes. </li></ul> 2.5.2 May 16, 2022 <ul><li>[Fix] TCF String issue when signalling legitimate interests</li></ul> 2.5.1 May 12, 2022 <ul><li>[Fix] TCF String issue with encoding to shorten the length of the string</li></ul> 2.5.0 May 04, 2022 <ul><li>[Analytics] If you are using Custom UI, now you can track events using our Track API</li><li>[Custom UI] Since we display some fields using HTML, we are now exposing them using Spanned (Android) and NSMutableAttributedString.</li><li>[Improvement] Controller ID section was redesigned to have a better UX.</li><li>Stability improvements and bug fixes. </li></ul> 2.4.0 April 19, 2022 <ul><li>[Customization] You now have full control over the appearance of the First &amp; Second Layer via our Admin Interface Style options and our Programmatic API. We have updated and extended our Programmatic API to simplify banner customization. </li><li>[UI] Legal links are now added to our the First Layer, and can be hidden or shown as desired via programmatic API.</li><li>[Feature] Consent button can now be customized via the Configuration Dashboard for the CCPA variant.</li><li>[Improvement] Initialization flow for stability and avoid edge case crashes.</li><li>Stability improvements and bug fixes. </li></ul> 2.3.2 April 07, 2022 <ul><li>[TV CMP] Our consent banner is now optimized for tvOS and AndroidTV. See more TV</li><li>[Feature] You may now customize your call to actions: Accept, Deny, Save Buttons independently for First &amp; Second Layer.</li><li>[Fix] Issue with Deny button not being hidden is now fixed.</li></ul> 2.3.1 March 25, 2022 <ul><li>[API] <code>getTCString</code> has been deprecated in favor of <code>getTCFData</code>. This method returns all necessarily data to be consumed related to TCF 2.2 framework.</li><li>[API] <code>getTCFData</code> is now async to provide accurate results when actions are still pending to be reflected.</li><li>[Improvement] Required updates for TCF 2.0 framework.</li><li>[Fix] Issue when showing TCF without any vendors.</li><li>UI improvements and bug fixes. </li></ul> 2.3.0 February 21, 2022 <ul><li>[API] <code>shouldShowCMP</code> has been deprecated in favor of <code>shouldCollectConsent</code>. See Initializing the SDK</li><li>[Banner API] Banner API v1 is now discontinued and removed from the SDK. \u26a0\ufe0f If you don't wish to upgrade, please stick to v2.1.0 to avoid unexpected behaviour. See the alert in the \"Banner API V1\" tab</li><li>[Banner API] <code>showCloseButton</code> is now a required field for <code>showSecondLayer()</code>. See Presenting the Second Layer</li><li>[Banner API] BannerSettings now requires a BannerFont object to pass a Bold and Regular font separately to apply for both layers. See Banner Settings</li><li>[Banner API] UINavigationController has been deprecated in favor of UIViewController as HostView on iOS. See Presenting the Banner</li><li>[Cross-Platform] React Native and Flutter SDKs are now updated to also support Banner API v2.</li><li>[Demo App] You can now find a demo app in our documentation to test out your configuration before writing a single line of code. See Sample Apps.</li><li>[Improvement] Updates to TCF 2.0 framework.</li><li>[Fix] Issue with position of logo on Second Layer.</li><li>Stability improvements and bug fixes. </li></ul> 2.2.1 February 08, 2022 <ul><li>[Landscape Mode] We are now supporting Landscape Mode.</li><li>[React Native] Add min React and React Native version to README.</li><li>[Feature] You can now add a \"More Information\" link to your banner message to forward users to the 2<sup>nd</sup> Layer. Appearance &gt; Settings &gt; More Information Link in Banner Message. Then you will be able to add this link in the banner message text editor.</li><li>[Improvement] Adding support to actively inform users when vendors are sharing data outside a region on TCF 2.0 variant.</li><li>[Improvement] Upgrade API to facilitate compliance with new Banner API for CCPA variant.</li><li>[Improvement] Updated Sample Apps to new Banner API. See Sample Apps.</li><li>[Fix] Issue with local and remote images losing quality on iOS.</li><li>Stability improvements and bug fixes. </li></ul> 2.2.0 January 28, 2022 <ul><li>[Banner API] A complete revamp of our banner API will enable you to have high customisation and versatility to build a end-user friendly consent banner. We can't wait for you to give it a try. For more details, see: Presenting the Banner.  If you don't wish to upgrade, please stick to v2.1.0 to avoid unexpected behaviour. See the alert in the \"Banner API V1\" tab <ul><li> Now supporting all legal frameworks we support: GDPR, LGPD, CCPA, TCF 2.0 and many others. <li> Add a Header Image to your banner. <li> Have full control over the layour of your action buttons with Column, Row or Grid configurations. <li> Launch the second layer directly.<li>[Usability] Collect consent only at a category level. Option available in your Admin Interface: Configure &gt; Legal Specifications &gt; Settings &gt; Category Consent. </li><li>[Feature] \"Continue wthout Accepting\" feature is now supported for CNIL (French regulation)</li><li>[Fonts] Configuration Dashboard fonts are now deprecated for App. To enable custom fonts, please inject the font via banner API.</li><li>[API] Expose user's consent history.</li><li>[Improvement] Upgrade to API 31 on Android. </li><li>[Improvement] Upgrade to Kotlin 1.6.10 on Android. </li><li>[Fix] Issues with v2.0.3 not working with Swift Package Manager on iOS.</li><li>[Fix] Issue with edge case with RestoreUserSession failing.</li><li>[Fix] Crashes happening in Beta release of our new Banner API.</li><li>UI/UX improvements and bug fixes. </li> 2.1.0 December 14, 2021 <ul><li>[Beta] New Banner API to enable high customisation and end-user friendly consent banners. See: Presenting the Banner.</li><li>[Improvement] API section is now available in our documentation to give you more transparency on our SDK.</li><li>[Improvement] Expose additional properties to build your own you.</li><li>[Fix] Legitimate interest issue with Purpose Restrictions on TCF 2.0.</li><li>[Fix] Crashes happening in specific cases with very poor network connections on Android.</li></ul> 2.0.3 November 09, 2021 <ul><li>[Fix] Minor issues on UI related to consent toggles.</li><li>[Fix] Failing to render corner radius on iOS. </li></ul> 2.0.2 November 02, 2021 <ul><li>[Improvement] Small upgrades to Usercentrics UI user experience.</li><li>Stability improvements and bug fixes. </li></ul> 2.0.1 October 06, 2021 <ul><li>[Feature] You may now add Accept or Deny action links to the banner description and short description of your Banner.</li><li>[Improvement] We have now provided a unique method, that can store consent for IAB Vendors and non-IAB vendors at once on our TCF 2.0 variant.</li><li>[Improvement] As required by the IAB, we have included the latest updates to the TCF 2.0 framework.</li><li>[Fix] Crash happening when toggles are hidden and changes are done to TCF 2.0 Second Layer</li><li>UI/UX improvements and bug fixes. </li></ul> 2.0.0 September 21, 2021 <ul><li>[API] We have listened to your feedback, and revamped our SDK API to make it easier to integrate and maintain.</li><li>[Analytics] We are now offering a new level of Analytics, which give you insight of your user interactions with our CMP. This feature is only enabled for Beta Testers. Please contact your Customer Success Manager to request access.</li><li>[Apple Silicon] With our latest dependency updates, we can now support M1 MacBooks for development.</li><li>[Improvement] We have optimised the use of resources and added offline capabilities to provide a lightning fast API.</li><li>[Improvement] We have upgraded the level of debug logs, to  provide more transparency and clear error descriptions.</li><li>[Improvement] As required by the IAB, we have included the latest updates to the TCF 2.0 framework.</li><li>[Improvement] We have upgraded our language picker to provide a more native experience.</li><li>[Improvement] Our Android SDK is now available on Maven Central. </li></ul>"},{"location":"apps/releases/#released-betas","title":"Released Betas","text":"<p>The following table lists the Beta features that are currently available:</p> <p>Beta Disclaimer</p> <p>These features are currently considered experimental. Please make sure you validate the functionality before pushing to production.</p> Feature Minimum Version Description A/B Testing 2.7.4 Test different versions of your Banner simultaneously to optimize user interaction and opt-in rates. This feature works both with a Usercentrics provided solution or with any third party A/B Testing tool. Consent Mediation 2.7.0 To simplify the process of applying consent, we are adding a mediation feature, that is aware of the Consent API of selected SDKs, and will automatically apply/update consent as soon as it is captured."},{"location":"apps/specifications/","title":"Technical Specifications","text":"<p>Please note that Package Size is just an estimate of the packages without any runtime storage.</p>"},{"location":"apps/specifications/#supported-operating-systems","title":"Supported Operating Systems","text":"Operating System Package Size Version  iOS \u223c3MB 11 and higher  Android \u223c2MB 4.1 (API 16) and higher"},{"location":"apps/specifications/#supported-cross-platform-frameworks","title":"Supported Cross-Platform Frameworks","text":"Frameworks Package Size Version  Flutter \u223c1.2MB 1.20 and higher  React Native \u223c0.36MB 0.65 and higher"},{"location":"apps/api/core-api/","title":"UsercentricsCore API","text":""},{"location":"apps/api/core-api/#initialization","title":"Initialization","text":""},{"location":"apps/api/core-api/#init","title":"Init","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.configure(options: &lt;UsercentricsOptions&gt;)\n</code></pre> <pre><code>Usercentrics.initialize(appContext, &lt;UsercentricsOptions&gt;)\n</code></pre> Inputs Type Notes options* UsercentricsOptions Defines the configuration of the SDK."},{"location":"apps/api/core-api/#isready","title":"isReady","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.isReady { &lt;UsercentricsReadyStatus&gt; in\n    // Handle status\n} onFailure: { &lt;Error&gt; in\n    // Handle error\n}\n</code></pre> <pre><code>Usercentrics.isReady({\n    // Handle status\n}, {\n    // Handle error\n})\n</code></pre> Completion Blocks Type Notes status UsercentricsReadyStatus Provides information needed to know what action to take next. Show CMP banner to collect consent or apply already collected consent. error Error Error object with non-localized description."},{"location":"apps/api/core-api/#reset","title":"Reset","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub>Dart<sub>Flutter</sub>Typescript<sub>React Native</sub> <pre><code>UsercentricsCore.reset()\n</code></pre> <pre><code>Usercentrics.reset()\n</code></pre> <pre><code>Usercentrics.reset();\n</code></pre> <pre><code>Usercentrics.reset();\n</code></pre> Resetting the SDK <p>Use <code>reset()</code> to clean all local storage and release the initialized instance. You will need to initialize the SDK again after a reset. Make sure you validate the expected behaviour, before using reset in production.</p>"},{"location":"apps/api/core-api/#features","title":"Features","text":""},{"location":"apps/api/core-api/#restoreusersession","title":"restoreUserSession","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.shared.restoreUserSession(controllerId: &lt;String&gt;, onSuccess: &lt;(UsercentricsReadyStatus) -&gt; Void&gt;, onFailure: &lt;(Error) -&gt; Void&gt;)\n</code></pre> <pre><code>Usercentrics.instance.restoreUserSession(controllerId = &lt;String&gt;, onSuccess = &lt;(UsercentricsReadyStatus) -&gt; Unit&gt;, onFailure = &lt;(Throwable) -&gt; Unit&gt;)\n</code></pre> Input Type Notes controllerID String A Usercentrics generated ID, used to identify a specific user. onSuccess Callback SDK has restored the user's consent attached to the controllerID provided. See Restore User Session onFailure Callback Handle non-localized error"},{"location":"apps/api/core-api/#getusersessiondata","title":"getUserSessionData","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.shared.getUserSessionData()\n</code></pre> <pre><code>Usercentrics.instance.getUserSessionData()\n</code></pre> Outputs Type Notes userSessionData String String used to pass consent to a WebView. See WebView Consent Continuity"},{"location":"apps/api/core-api/#changelanguage","title":"changeLanguage","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.shared.changeLanguage(language: &lt;String&gt;, onSuccess: &lt;() -&gt; Void&gt;, onFailure: &lt;(Error) -&gt; Void&gt;)\n</code></pre> <pre><code>Usercentrics.instance.changeLanguage(language = &lt;String&gt;, onSuccess = &lt;() -&gt; Unit&gt;, onFailure = &lt;(Throwable) -&gt; Unit&gt;)\n</code></pre> Input Type Notes language String Language for content to be loaded on.  e.g. \"en\", \"de\", \"fr\". onSuccess Callback Re-render your UI, as usual with the CMP data. Content now will be on the new language. onFailure Callback Handle non-localized error <p>Always change language before rendering your UI</p> <p>If you call this method after the UsercentricsUI has already been created, the new language will not be applied.</p>"},{"location":"apps/api/core-api/#getabtestingvariant","title":"getABTestingVariant","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.shared.getABTestingVariant()\n</code></pre> <pre><code>Usercentrics.instance.getABTestingVariant()\n</code></pre>"},{"location":"apps/api/core-api/#setabtestingvariant","title":"setABTestingVariant","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.shared.setABTestingVariant(variant: &lt;VariantName&gt;)\n</code></pre> <pre><code>Usercentrics.instance.setABTestingVariant(&lt;VariantName&gt;)\n</code></pre>"},{"location":"apps/api/core-api/#build-your-own-ui","title":"Build your own UI","text":""},{"location":"apps/api/core-api/#getcmpdata","title":"getCMPData","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>let CMPData = UsercentricsCore.shared.getCMPData()\n</code></pre> <pre><code>val CMPData = Usercentrics.instance.getCMPData()\n</code></pre> Outputs Type Notes CMPData UsercentricsCMPData Data needed to building your own UI."},{"location":"apps/api/core-api/#acceptall","title":"acceptAll","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>let consents = UsercentricsCore.shared.acceptAll(consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.acceptAll(consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> Input Type Notes consentType Enum Explicit: Consent was collected from a explicit action from the user. e.g. Button action. Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case. Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#denyall","title":"denyAll","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>let consents = UsercentricsCore.shared.denyAll(consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.denyAll(consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> Input Type Notes consentType Enum Explicit: Consent was collected from a explicit action from the user. e.g. Button action. Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case. Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#savedecisions","title":"saveDecisions","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>let consents = UsercentricsCore.shared.saveDecisions(decisions: &lt;[UserDecision]&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.saveDecisions(decisions = &lt;[UserDecision]&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> Input Type Notes decisions [UserDecision] List of every service's templateID and the consent as a Bool. consentType Enum Explicit: Consent was collected from a explicit action from the user. e.g. Button action. Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case. Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#interaction-analytics","title":"Interaction Analytics","text":""},{"location":"apps/api/core-api/#track","title":"Track","text":"<p>Track user events if you are building your own UI, and want to see these events in the Usercentrics Analytics Dashboard.</p> Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.shared.track(event: &lt;[UsercentricsAnalyticsEventType]&gt;)\n</code></pre> <pre><code>Usercentrics.instance.track(&lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> Input Type Notes event [UsercentricsAnalyticsEventType] Track analytics events when building a Custom UI or you wish to track events with a third party tool. <p>Events</p> [iOS] Event [Android] Event Notes .cmpShown .CMP_SHOWN The banner was displayed to the user. It doesn't matter which layer. .acceptAllFirstLayer .ACCEPT_ALL_FIRST_LAYER The Accept All button was pressed from the first layer. .denyAllFirstLayer .DENY_ALL_FIRST_LAYER The Deny All button was pressed from the first layer. .saveFirstLayer .SAVE_FIRST_LAYER The Save button was pressed from the first layer. Save is mainly used for granular decisions. .acceptAllSecondLayer .ACCEPT_ALL_SECOND_LAYER The Accept All button was pressed from the second layer. .denyAllSecondLayer .DENY_ALL_SECOND_LAYER The Deny All button was pressed from the second layer. .saveSecondLayer .SAVE_SECOND_LAYER The Save button was pressed from the second layer. Save is mainly used for granular decisions. .imprintLink .IMPRINT_LINK The Imprint link/button was pressed. .moreInformationLink .MORE_INFORMATION_LINK The More Information link/button was pressed. This button is usually used to navigate from first layer to second layer. .privacyPolicyLink .PRIVACY_POLICY_LINK The Privacy policy link/button was pressed."},{"location":"apps/api/core-api/#tcf-22-specific-methods","title":"TCF 2.2 Specific Methods","text":""},{"location":"apps/api/core-api/#gettcfdata","title":"getTCFData","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.shared.getTCFData() { tcfData in\n    // handle data\n}\n</code></pre> <pre><code>Usercentrics.instance.getTCFData { tcfData -&gt;\n    // handle data\n}\n</code></pre> Outputs Type Notes TCFData TCFData IAB's Transparency &amp; Consent CMP Content. See IAB Data Source"},{"location":"apps/api/core-api/#gettcstring","title":"getTCString","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.shared.getTCFData() { tcfData in\n    let tcString = tcfData.tcString\n}\n</code></pre> <pre><code>Usercentrics.instance.getTCFData { tcfData -&gt;\n    val tcString = tcfData.tcString\n}\n</code></pre> Inputs Type Notes TCString String IAB's Transparency &amp; Consent String"},{"location":"apps/api/core-api/#setcmpid","title":"setCMPId","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.shared.setCMPId(id: &lt;String&gt;)\n</code></pre> <pre><code>Usercentrics.instance.setCMPId(id = &lt;String&gt;)\n</code></pre> Inputs Type Notes CMPId Int32 When builing your own UI for TCF 2.2. You need to pass the CMPID given to you by the IAB, in order for your solution to be compliant."},{"location":"apps/api/core-api/#acceptallfortcf","title":"acceptAllForTCF","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>let consents = UsercentricsCore.shared.acceptAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.acceptAllForTCF(fromLayer = &lt;TCFDecisionUILayer&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> Input Type Notes fromLayer Enum Layer in which consent was collected: firstLayer: First banner layer. secondLayer: Second banner layer. consentType Enum Explicit: Consent was collected from a explicit action from the user. e.g. Button action. Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case. Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#denyallfortcf","title":"denyAllForTCF","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code> let consents = UsercentricsCore.shared.denyAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code> val consents = Usercentrics.instance.denyAllForTCF(fromLayer = &lt;TCFDecisionUILayer&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> Input Type Notes fromLayer Enum Layer in which consent was collected: firstLayer: First banner layer. secondLayer: Second banner layer. consentType Enum Explicit: Consent was collected from a explicit action from the user. e.g. Button action. Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case. Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#savedecisionsfortcf","title":"saveDecisionsForTCF","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>let consents = UsercentricsCore.shared.saveDecisions(decisions: &lt;[UserDecision]&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.saveDecisions(decisions = &lt;[UserDecision]&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> Input Type Notes tcfDecisions [TCFUserDecision] List of every purpose and specialFeature with values for consent and legitimate interest as Bool and respective Vendors. fromLayer Enum Layer in which consent was collected: firstLayer: First banner layer. secondLayer: Second banner layer. decisions [UserDecision] List of every service's templateID and the consent as a Bool. consentType Enum Explicit: Consent was collected from a explicit action from the user. e.g. Button action. Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case. Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#ccpa-specific-methods","title":"CCPA Specific Methods","text":""},{"location":"apps/api/core-api/#getuspdata","title":"getUSPData","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>let USPData = UsercentricsCore.shared.getUSPData()\n</code></pre> <pre><code>val USPData = Usercentrics.instance.getUSPData()\n</code></pre> Outputs Type Notes USPData CCPAData US Privacy String information"},{"location":"apps/api/core-api/#savedecisions_1","title":"saveDecisions","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>let ccpaConsents = UsercentricsCore.shared.saveOptOutForCCPA(isOptedOut: &lt;Bool&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val ccpaConsents = Usercentrics.instance.saveOptOutForCCPA(isOptedOut = &lt;Bool&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> Input Type Notes isOptedOut Bool Pass the user's response to the statement: \"Do Not Sell My Personal Information\". True: Do not track or sell user's information. False: You are allowed to track and sell user's information. consentType Enum Explicit: Consent was collected from a explicit action from the user. e.g. Button action. Implicit: Consent was collected without a explicit action of the user. e.g User can close or ignore the banner without giving a choice. Please make sure you consult with your Data Protection Officer before using this case. Output Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#helpers","title":"Helpers","text":""},{"location":"apps/api/core-api/#shouldcollectconsent","title":"shouldCollectConsent","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.shared.shouldCollectConsent()\n</code></pre> <pre><code>Usercentrics.instance.shouldCollectConsent()\n</code></pre> Outputs Type Notes shouldCollectConsent Bool True, if consent has never been collected or some service has changed thus requiring a consent update. False, if consent has been collected and no update is required."},{"location":"apps/api/core-api/#getconsents","title":"getConsents","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.shared.getConsents()\n</code></pre> <pre><code>Usercentrics.instance.getConsents()\n</code></pre> Outputs Type Notes consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#getcontrollerid","title":"getControllerId","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsCore.shared.getControllerId()\n</code></pre> <pre><code>Usercentrics.instance.getControllerId()\n</code></pre> Outputs Type Notes controllerID String A Usercentrics generated ID, used to identify a specific user. See Restore User Session"},{"location":"apps/api/core-api/#objects","title":"Objects","text":""},{"location":"apps/api/core-api/#usercentricsoptions","title":"UsercentricsOptions","text":"Property Type Notes settingsID String A Usercentrics generated ID, used to identify a unique CMP configuration. defaultLanguage String Selected based on our language selection hierarchy. This property defines the language used to render the banner.  e.g. \"en\", \"de\", \"fr\". version String To freeze the configuration version shown to your users, you may pass a specific version here. You may find an overview of all versions in the Admin Interface under Configuration &gt; History &gt; Settings History &gt; Version (Column) or Implementation &gt; Script Tag &gt; Version History. e.g. \"3.0.4\". Passing \"latest\" (default) will fetch the latest version of your CMP configuration. Passing \"preview\" will fetch the latest draft of your CMP configuration. timeoutMillis Int Timeout for network requests in milliseconds. We do NOT recommend overwriting this field unless absolutely necessary or for debugging reasons, as well as using any values under 5,000 ms. Default is 10,000 ms (10s). loggerLevel Enum Provides a set of logs for operations being executed in the SDK. debug: includes every other level, warning: non-problematic operations, error: relevant logs to any blocking problems and none (default). rulesetId String A Usercentircs generated ID, used to identify a bundle of CMP configurations to be used depending on the user's location. consentMediation Bool Enable Consent Mediation, an automated way to pass consent to 3<sup>rd</sup> party frameworks."},{"location":"apps/api/core-api/#usercentricsreadystatus","title":"UsercentricsReadyStatus","text":"Property Type Notes shouldCollectConsent Bool True, if consent has never been collected or some service has changed thus requiring a consent update. False, if consent has been collected and no update is required. consents [UsercentricsServiceConsent] List of Services with consent choices."},{"location":"apps/api/core-api/#usercentricsserviceconsent","title":"UsercentricsServiceConsent","text":"Property Type Notes templateId String ID used to match a service with frameworks running on your app. See Applying Service Consent. status Bool Consent status given to this specific service. dataProcessor String Name of entity processing the data that was collected via this service. version String Legal template version. See Service Settings."},{"location":"apps/api/core-api/#usercentricscmpdata","title":"UsercentricsCMPData","text":"Property Type Notes settings UsercentricsSettings CMP settings and content properties needed to render your own UI. See Building your own UI. services [UsercentricsService] List of services. categories [UsercentricsCategory] List of categories. userLocation UsercentricsLocation Object exposing user's general location: regionCode, countryCode and countryName. legalBasis LegalBasisLocalization Object containing Legal Basis localization data. activeVariant Enum Provides active Legal Framework: default solution for GDPR, LGPD, etc., ccpa solution for ccpa (California/US), tcf solution for IAB's Transparency &amp; Consent Framework 2.0."},{"location":"apps/api/event-api/","title":"UsercentricsEvent API","text":""},{"location":"apps/api/event-api/#consent-listener","title":"Consent Listener","text":""},{"location":"apps/api/event-api/#onconsentupdated","title":"onConsentUpdated","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsEvent.shared.onConsentUpdated(callback: &lt;(UpdatedConsentEvent) -&gt; Void&gt;)\n</code></pre> <pre><code>UsercentricsEvent.onConsentUpdated(callback: &lt;(UpdatedConsentEvent) -&gt; Unit&gt;)\n</code></pre> Inputs Type Notes callback &lt;(UpdatedConsentEvent) -&gt; Unit&gt; Callback with relevant information regarding consents"},{"location":"apps/api/event-api/#dispose","title":"dispose","text":"Swift<sub>iOS</sub>Kotlin<sub>Android</sub> <pre><code>UsercentricsEvent.shared.dispose()\n</code></pre> <pre><code>UsercentricsEvent.dispose()\n</code></pre>"},{"location":"apps/api/event-api/#objects","title":"Objects","text":""},{"location":"apps/api/event-api/#updatedconsentevent","title":"UpdatedConsentEvent","text":"Property Type Notes consents UsercentricsServiceConsent List of Services with consent choices. controllerId String A Usercentrics generated ID, used to identify a specific user. See Restore User Session tcString String IAB's Transparency &amp; Consent String uspString String IAB's US Privacy String"},{"location":"apps/api/event-api/#usercentricsserviceconsent","title":"UsercentricsServiceConsent","text":"Property Type Notes templateId String ID used to match a service with frameworks running on your app. See Applying Consent. status Bool Consent status given to this specific service. dataProcessor String Name of entity processing the data that was collected via this service. version String Legal template version. See Service Settings."},{"location":"apps/features/ab-testing/","title":"A/B Testing","text":"<p>BETA</p> <p>This feature is currently in beta, and only available starting v2.7.4. Please make sure you validate the functionality before pushing to production.</p> <p>In order to optimize the performance of your Consent Banner, we have enabled A/B Testing capabilities, to make your life easier.</p>"},{"location":"apps/features/ab-testing/#enabling-ab-testing","title":"Enabling A/B Testing","text":"<p>Go to the Implementation section in your Configuration Dashboard and select the A/B Testing tab. Here you will find a toggle to enable the feature.</p> <p></p> <p>Once enabled, you will see the the A/B Testing configuration options.</p>"},{"location":"apps/features/ab-testing/#using-usercentrics","title":"Using Usercentrics","text":"<p>Activate with Usercentrics</p> <p>To use the Usercentrics tools for A/B Testing, please select the checkbox at the bottom of the A/B Testing configuration options: \"Activate with Usercentrics\".</p>"},{"location":"apps/features/ab-testing/#defining-variants","title":"Defining Variants","text":"<p>Using the JSON input field, define the variants names with an empty values. </p> <pre><code>{\n    \"variantA\": {},\n    \"variantB\": {}\n}\n</code></pre> <p>Now, in your project, fetch the variant names programmatically, and return a Banner Configuration for each one using the BannerSettings object:</p> iOSAndroidFlutterReact-Native <pre><code>switch UsercentricsCore.shared.getABTestingVariant() {\ncase \"variantA\": return BannerSettings(/* variantA configuration */)\ncase \"variantB\": return BannerSettings(/* variantB configuration */)\ndefault: return BannerSettings(/* default configuration */)\n}\n</code></pre> <pre><code>val bannerSettings = when (Usercentrics.instance.getABTestingVariant()) {\n    \"variantA\" -&gt; BannerSettings(/* variantA configuration */)\n    \"variantB\" -&gt; BannerSettings(/* variantB configuration */)\n    else -&gt; BannerSettings(/* default configuration */)\n}\n</code></pre> <pre><code>final variant = await Usercentrics.aBTestingVariant;\nswitch(variant) {\n    case \"variantA\": {_showFirstLayer(/* variantA Settings */);}\n    break;\n    case \"variantB\": {_showFirstLayer(/* variantB Settings */);}\n    break;\n    default: {_showFirstLayer(/*Default*/);}\n    break;\n}\n</code></pre> <pre><code> const variant = await Usercentrics.getABTestingVariant()\n let bannerSettings: BannerSettings;\n switch (variant){\n     case \"variantA\":\n         return bannerSettings = {/* settings for the banner with variantA */};\n     case \"variantB\":\n         return bannerSettings = {/* settings for the banner with variantB */};\n     default:\n         return bannerSettings = {/* default banner settings*/};\n</code></pre> <p>Always fallback to a Default</p> <p>Always have a fallback default configuration. This will allow you to turn off, or change the variants you are testing dynamically.</p> <p>Even distribution</p> <p>The distribution between variants will be even. e.g. 50:50 for two variants, 33:33:33 for three variants.</p>"},{"location":"apps/features/ab-testing/#tracking-results","title":"Tracking Results","text":"<p>Once you have generated variant interactions, all results will be available in the Analytics section of your Usercentrics Dashboard.</p> <p>Interaction Analytics</p> <p>Overview your Interaction and Acceptance rates by filtering for specific Variants.</p> <p></p> <p>Comparison Analytics</p> <p>Get a direct comparison of interactions and acceptance rates for each variant.</p> <p></p> <p>Download Raw Data</p> <p>For in-depth insights and custom analysis, we recommend downloading a raw-data report available at the bottom of the Interaction Analytics section. In this report, an additional \"variant\" column will tell you which variant was used for each entry in the data.</p> <p></p> <p>Keep A/B Testing feature ON</p> <p>To see variant analytics data, the A/B Testing feature needs to be ON. If you wish to stop running specific variants. Just delete the variants in the JSON input field.</p>"},{"location":"apps/features/ab-testing/#using-a-third-party-tool","title":"Using a Third Party Tool","text":"<p>Activate with third-party tool</p> <p>To use a third-party tool for A/B Testing, please select the checkbox at the bottom of the A/B Testing configuration options: \"Activate with third-party tool\".</p>"},{"location":"apps/features/ab-testing/#defining-variants_1","title":"Defining Variants","text":"<p>When using a third-party tool, you may pass variant names directly via the Customization API as such:</p> iOSAndroidFlutterReact-Native <pre><code>let variant = AnyABTestTool.getVariants()\nswitch variant {\ncase \"variantA\": return BannerSettings(/* variantA configuration */ variantName: \"variantA\")\ncase \"variantB\": return BannerSettings(/* variantA configuration */ variantName: \"variantB\")\ndefault: return BannerSettings(/* default configuration */)\n}\n</code></pre> <pre><code>val variant = AnyABTestTool.getVariants()\nval bannerSettings = when (variant) {\n    \"variantA\" -&gt; BannerSettings(variantName = \"variantA\", /* variantA configuration */)\n    \"variantB\" -&gt; BannerSettings(variantName = \"variantB\", /* variantB configuration */)\n    else -&gt; BannerSettings(/* default configuration */)\n}\n</code></pre> <pre><code>final variant = await AnyABTestTool.aBTestingVariant;\nswitch(variant) {\n    case \"variantA\": {_showFirstLayer(/* variantA Settings */);}\n    break;\n    case \"variantB\": {_showFirstLayer(/* variantB Settings */);}\n    break;\n    default: {_showFirstLayer(/*Default*/);}\n    break;\n}\n</code></pre> <pre><code> const variant = await AnyABTestTool.getABTestingVariant()\n let bannerSettings: BannerSettings;\n switch (variant){\n     case \"variantA\":\n         return bannerSettings = {/* settings for the banner with variantA */};\n     case \"variantB\":\n         return bannerSettings = {/* settings for the banner with variantB */};\n     default:\n         return bannerSettings = {/* default banner settings*/};\n</code></pre> Supporting your self-built UI <p>If you have your own UI and you want Usercentrics to know which A/B Testing variant from your Third-Party Tool you are using, so that the events you track in the Usercentrics analytics API (<code>track()</code>) have the variant data. Then you have to inject the variant programmatically with this API:</p> iOSAndroidFlutterReact-Native <pre><code>UsercentricsCore.shared.setABTestingVariant(variant: &lt;VariantName&gt;)\n</code></pre> <pre><code>Usercentrics.instance.setABTestingVariant(&lt;VariantName&gt;)\n</code></pre> <pre><code>UsercentricsCore.setABTestingVariant(variant: &lt;VariantName&gt;)\n</code></pre> <pre><code>Usercentrics.setABTestingVariant(&lt;VariantName&gt;)\n</code></pre>"},{"location":"apps/features/ab-testing/#tracking-results_1","title":"Tracking Results","text":"<p>Implement the tracking mechanism of your third-party tool, when processing the <code>UsercentricsConsentUserResponse</code>, available in the callback of the banner presentation.</p>"},{"location":"apps/features/build_own_ui/","title":"Building your own UI","text":"<p>The Usercentrics Core module provides all the information and functionality needed to build a consent banner of your own.</p> <p>Regulation Dependent</p> <p>Be aware that there are implementation differences between each legal framework, due to divergent legal requirements.</p> GDPRTCF 2.2CCPA/CPRALGPD <p>Continue to Apply Consent</p> <p>Now, it is fundamental that the user's privacy choices are applied to the 3<sup>rd</sup> party SDKs on you App.  Please continue to Apply Consent.</p>"},{"location":"apps/features/build_own_ui/#general-data-protection-regulation-gdpr","title":"General Data Protection Regulation (GDPR)","text":"<p>The European Union's General Data Protection Regulation applies to any business in the EU as well as organizations outside the EU that collect, process and store information on EU citizens, as well as non-citizens residing in the EU. </p> <p>To get you started, we have provided a compliance checklist to help you understand the requirements of GDPR.</p>"},{"location":"apps/features/build_own_ui/#data-source","title":"Data Source","text":"iOSAndroidFlutterReact Native <pre><code>UsercentricsCore.isReady { _ in\n\n    let data = UsercentricsCore.shared.getCMPData()\n    let settings = data.settings\n    let services = data.services\n    let categories = data.categories\n\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({\n\n    val data = Usercentrics.instance.getCMPData()\n    val settings = data.settings\n    val services = data.services\n    val categories = data.categories\n\n}, { error -&gt;\n    // Handle non-localized error\n})\n</code></pre> <pre><code>try {\n  final data = await Usercentrics.cmpData;\n  final settings = data.settings;\n  final services = data.services;\n  final categories = data.categories;\n} catch (error) {\n  // Handle non-localized error\n}\n</code></pre> <pre><code>try {\n  const data = await Usercentrics.getCMPData();\n  const settings = data.settings;\n  const services = data.services;\n  const categories = data.categories;\n} catch (error) {\n  // Handle non-localized error\n}\n</code></pre> <p>Matching Categories and Services</p> <p>You may match services to categories with <code>category.slug</code> == <code>service.categorySlug</code>.</p>"},{"location":"apps/features/build_own_ui/#content-mapping","title":"Content Mapping","text":"<p>To help you navigate our Data Source, please see the following content mapping tables:</p> First Layer SDK Property 1. Title settings.labels.firstLayerTitle 2. Description settings.firstLayerDescriptionHtml (raw input) or settings.firstLayerDescription 3. Short Description settings.firstLayerMobileDescriptionHtml (raw input) or settings.firstLayerMobileDescription 4. Read More settings.labels.btnBannerReadMore 5. Accept Button Title settings.labels.btnAcceptAll 6. Deny Button Title settings.labels.btnDeny 7. More Button Title settings.labels.btnMore Second Layer SDK Property 8. Title settings.labels.secondLayerTitle 9. Description settings.labels.secondLayerDescriptionHtml (raw input) or settings.labels.secondLayerDescription 10. Accept Button Title settings.secondLayer.acceptButtonText 11. Deny Button Title settings.secondLayer.denyButtonText Banner Elements SDK Property 12. Privacy Policy Text settings.labels.privacyPolicyLinkText 13. Privacy Policy URL settings.privacyPolicyUrl 14. Imprint Text settings.labels.imprintLinkText 15. Imprint URL settings.imprintUrl 16. Language Selected settings.language 17. Languages Available settings.languagesAvailable 18. Categories Tab settings.secondLayer.tabsCategoriesLabel 19. Services Tab settings.secondLayer.tabsServicesLabel 20. Save Button Title settings.labels.btnSave Category Component SDK Property 21. Category Name category.label 22. Category Description category.description Services Component SDK Property 23. Service Name service.dataProcessor 24. Service Description Title settings.labels.descriptionOfService 25. Service Description service.descriptionOfService 26. Processing Company Title settings.labels.processingCompanyTitle 27. Processing Company service.nameOfProcessingCompany + service.addressOfProcessingCompany 28. Data Purposes Title settings.labels.dataPurposes 29. Data Purposes Description settings.labels.dataPurposesInfo 30. Data Purposes service.dataPurposesList 31. Technologies Used Title settings.labels.technologiesUsed 32. Technologies Used Description settings.labels.technologiesUsedInfo 33. Technologies Used service.technologyUsed 34. Data Collected Title settings.labels.dataCollectedList 35. Data Collected Description settings.labels.dataCollectedListInfo 36. Data Collected service.dataCollectedList 37. Legal Bases Title settings.labels.legalBasisList 38. Legal Bases Description settings.labels.legalBasisInfo 39. Legal Bases service.legalBasisList 40. Processing Location Title settings.labels.locationOfProcessing 41. Processing Location service.locationOfProcessing 42. Retention Period Title settings.labels.retentionPeriod 43. Retention Period service.retentionPeriodDescription 44. Third Country Distribution Title settings.labels.transferToThirdCountries 45. Third Country Distribution service.thirdCountryTransfer 46. Is Essential service.isEssential 47. Data Recipients Title settings.labels.dataRecipientsList 48. Data Recipients service.dataRecipientsList 49. Privacy Policy Title settings.labels.policyOf 50. Privacy Policy service.privacyPolicyURL 51. Cookie Policy Title settings.labels.cookiePolicyInfo 52. Cookie Policy service.cookiePolicyURL 53. Opt Out Link Title settings.labels.optOut 54. Opt Out Link service.optOutUrl 55. History Title settings.labels.history 56. History service.consent.history 57. History Consent Given settings.labels.yes 58. History Consent Not Given settings.labels.no 59. History Explicit Consent settings.labels.explicit 60. History Implicit Consent settings.labels.implicit"},{"location":"apps/features/build_own_ui/#action-delegates","title":"Action Delegates","text":"<p>In order to collect consent, we have provided the following 3 functions:</p> <p>Accept All</p> iOSAndroidFlutterReact Native <pre><code>let consents = UsercentricsCore.shared.acceptAll(consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.acceptAll(consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.acceptAll(consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = Usercentrics.acceptAll(&lt;UsercentricsConsentType&gt;);\n</code></pre> <p>Deny All</p> iOSAndroidFlutterReact Native <pre><code>let consents = UsercentricsCore.shared.denyAll(consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.denyAll(consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.denyAll(consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = Usercentrics.denyAll(&lt;UsercentricsConsentType&gt;);\n</code></pre> <p>Save</p> <p>For granular selection, you may pass specific sets of consent with an array of decisions:</p> iOSAndroidFlutterReact Native <pre><code>let consents = UsercentricsCore.shared.saveDecisions(decisions: &lt;[UserDecision]&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.saveDecisions(decisions = &lt;[UserDecision]&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.saveDecisions(decisions: List&lt;UserDecision&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = Usercentrics.saveDecisions([&lt;UserDecision], &lt;UsercentricsConsentType&gt;);\n</code></pre> <p>Consent Type</p> <p>The consent type should be based on if a customer made an explicit action to provide consent, or not. Implicit can be used if the user ignores or skips the CMP. We highly recommend you only use implicit together with the <code>denyAll()</code> method, which will accept only essential services.</p>"},{"location":"apps/features/build_own_ui/#interaction-analytics","title":"Interaction Analytics","text":"<p>To gather events in the Usercentrics analytics dashboard the following API is provided to track the available events:</p> iOSAndroid <pre><code>UsercentricsCore.shared.track(event: &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>Usercentrics.instance.track(event = &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <p>Events</p> [iOS] Event [Android] Event Notes .cmpShown .CMP_SHOWN The banner was displayed to the user. It doesn't matter which layer. .acceptAllFirstLayer .ACCEPT_ALL_FIRST_LAYER The Accept All button was pressed from the first layer. .denyAllFirstLayer .DENY_ALL_FIRST_LAYER The Deny All button was pressed from the first layer. .saveFirstLayer .SAVE_FIRST_LAYER The Save button was pressed from the first layer. Save is mainly used for granular decisions. .acceptAllSecondLayer .ACCEPT_ALL_SECOND_LAYER The Accept All button was pressed from the second layer. .denyAllSecondLayer .DENY_ALL_SECOND_LAYER The Deny All button was pressed from the second layer. .saveSecondLayer .SAVE_SECOND_LAYER The Save button was pressed from the second layer. Save is mainly used for granular decisions. .imprintLink .IMPRINT_LINK The Imprint link/button was pressed. .moreInformationLink .MORE_INFORMATION_LINK The More Information link/button was pressed. This button is usually used to navigate from first layer to second layer. .privacyPolicyLink .PRIVACY_POLICY_LINK The Privacy policy link/button was pressed."},{"location":"apps/features/build_own_ui/#transparency-consent-framework-tcf-22","title":"Transparency &amp; Consent Framework (TCF 2.2)","text":"<p>The Interactive Advertising Bureau, (IAB Europe) has created the GDPR Transparency and Consent Framework (TCF 2.2) to support publishers, technology vendors and advertisers in being compliant with EU\u2019s GDPR and ePrivacy Directive.</p> <p>Be aware that a validation process with the IAB is required, in order to become a licensed TCF 2.2 CMP provider.</p>"},{"location":"apps/features/build_own_ui/#iab-data-source","title":"IAB Data Source","text":"iOSAndroidFlutterReact Native <pre><code>UsercentricsCore.isReady { status in\n\n    // CMP Data\n    let data = UsercentricsCore.shared.getCMPData()\n    let settings = data.settings\n    let tcfSettings = settings.tcf2\n\n    // TCF Data\n    UsercentricsCore.shared.getTCFData() { tcfData in\n        let purposes = tcfData.purposes\n        let specialPurposes = tcfData.specialPurposes\n        let features = tcfData.features\n        let specialFeatures = tcfData.specialFeatures\n        let stacks = tcfData.stacks\n        let vendors = tcfData.vendors\n\n        // TCString\n        let tcString = tcfData.tcString\n    }\n\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({\n\n    // CMP Data\n    val data = Usercentrics.instance.getCMPData()\n    val settings = data.settings\n    val tcfSettings = settings.tcf2\n\n    // TCF Data\n    Usercentrics.instance.getTCFData() { tcfData -&gt;\n        val purposes = tcfData.purposes\n        val specialPurposes = tcfData.specialPurposes\n        val features = tcfData.features\n        val specialFeatures = tcfData.specialFeatures\n        val stacks = tcfData.stacks\n        val vendors = tcfData.vendors\n\n        // TCString\n        val tcString = tcfData.tcString\n    }\n\n}, { error -&gt;\n    // Handle non-localized error\n})\n</code></pre> <pre><code>try {\n  final data = await Usercentrics.cmpData;\n  final settings = data.settings;\n  final tcfSettings = settings.tcf2;\n\n  // TCF Data\n  final tcfData = await Usercentrics.tcfData;\n  final tcString = tcfData.tcString;\n  final purposes = tcfData.purposes;\n  final specialPurposes = tcfData.specialPurposes;\n  final features = tcfData.features;\n  final specialFeatures = tcfData.specialFeatures;\n  final stacks = tcfData.stacks;\n  final vendors = tcfData.vendors;\n\n  // TODO - Add TCString property\n\n} catch (error) {\n    // Handle non-localized error\n}\n</code></pre> <pre><code>try {\n  const data = await Usercentrics.getCMPData();\n  const settings = data.settings;\n  const tcfSettings = settings.tcf2;\n\n  // TCF Data\n  const tcfData = await Usercentrics.getTCFData();\n  const purposes = tcfData.purposes;\n  const specialPurposes = tcfData.specialPurposes;\n  const features = tcfData.features;\n  const specialFeatures = tcfData.specialFeatures;\n  const stacks = tcfData.stacks;\n  const vendors = tcfData.vendors;\n\n  // TCString\n  const tcString = tcfData.tcString;\n\n} catch (error) {\n    // Handle non-localized error\n}\n</code></pre>"},{"location":"apps/features/build_own_ui/#non-iab-data-source","title":"Non-IAB Data Source","text":"iOSAndroidFlutterReact Native <pre><code>UsercentricsCore.isReady { status in\n\n    let data = UsercentricsCore.shared.getCMPData()\n    let settings = data.settings\n    let services = data.services\n    let categories = data.categories\n\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({\n\n    val data = Usercentrics.instance.getCMPData()\n    val settings = data.settings\n    val services = data.services\n    val categories = data.categories\n\n}, { error -&gt;\n    // Handle non-localized error\n})\n</code></pre> <pre><code>try {\n  final data = await Usercentrics.cmpData;\n  final settings = data.settings;\n  final services = data.services;\n  final categories = data.categories;\n\n} catch (error) {\n    // Handle non-localized error\n}\n</code></pre> <pre><code>try {\n  const data = await Usercentrics.getCMPData();\n  const settings = data.settings;\n  const services = data.services;\n  const categories = data.categories;\n} catch (error) {\n    // Handle non-localized error\n}\n</code></pre> <p>Matching Categories and Services</p> <p>You may match services to categories with <code>category.slug</code> == <code>service.categorySlug</code>.</p>"},{"location":"apps/features/build_own_ui/#content-mapping_1","title":"Content Mapping","text":"First Layer SDK Property 1. First layer title tcf2.firstLayerTitle 2. First layer description tcf2.firstLayerDescription 3. First layer additional Info tcf2.firstLayerAdditionalInfo 4. First layer resurface note tcf2.firstLayerNoteResurface 5. Vendorlist link title tcf2.linksVendorListLinkLabel 6. Manage settings link title tcf2.linksManageSettingsLabel 7. Label purposes tcf2.labelsPurposes 8. Label features tcf2.labelsFeatures Second Layer SDK Property 1. Second layer title tcf2.secondLayerTitle 2. Second layer description tcf2.secondLayerDescription 3. Purposes tab tcf2.tabsPurposeLabel 4. Vendors tab tcf2.tabsVendorsLabel 5. Vendors who are part of TCF tcf2.labelsIabVendors 6. Vendors who are NOT part of TCF tcf2.labelsNonIabVendors 7. Non IAB purposes tcf2.labelsNonIabPurposes Buttons SDK Property 1. Accept all button title tcf2.buttonsAcceptAllLabel 2. Deny all button title tcf2.buttonsDenyAllLabel 3. Save button title tcf2.buttonsSaveLabel General SDK Property 1. Language Selected settings.language 2. Languages Available settings.languagesAvailable 3. Privacy Policy Text settings.labels.privacyPolicyLinkText 4. Privacy Policy URL settings.privacyPolicyUrl 5. Imprint Text settings.labels.imprintLinkText 6. Imprint URL settings.imprintUrl Toggles SDK Property 1. Toggle consent label tcf2.togglesConsentToggleLabel 2. Toggle legitimate interest label tcf2.togglesLegIntToggleLabel Vendors SDK Property 1. Label title vendor.name 2. Purpose label tcf2.vendorPurpose 3. Purpose Name vendor.purposes[n].[findByPurposeId].name 4. Legitimate interest purpose label tcf2.vendorLegitimateInterestPurposes 5. Legitimate Interest Purpose name vendor.legitimateInterestPurposes[n].[findByPurposeId].name 6. Special purpose label tcf2.vendorSpecialPurposes 7. Special purpose name vendor.specialPurposes[n].[findByPurposeId].name 8. Feature label tcf2.vendorFeatures 9. Feature name vendor.features[n].[findByPurposeId].name 10. Special Feature label tcf2.vendorSpecialFeatures 11. Special Feature name vendor.specialFeatures[n].[findByPurposeId].name 12. Cookie refresh value vendor.cookieRefresh 13. Cookie Age value vendor.cookieMaxAgeSeconds 14. Cookie storage value vendor.usesCookie 15. Non-cookie storage value vendor.usesNonCookieAccess Purposes SDK Property 1. Label title purpose.name 2. Legitimate interest consent purpose.legitimateInterestConsent 3. Legal Description purpose.descriptionLegal 4. Purpose Description purpose.purposeDescription 5. Consent purpose.consent Special Purposes SDK Property 1. Label title specialPurpose.name 2. Legal Description specialPurpose.descriptionLegal 3. Purpose Description purpose.purposeDescription Features SDK Property 1. Label title feature.name 2. Legitimate interest consent feature.legitimateInterestConsent 3. Legal Description feature.descriptionLegal Special Features SDK Property 1. Label title specialFeature.name 2. Consent specialFeature.consent 3. Description specialFeature.purposeDescription 4. Legal Description specialFeature.descriptionLegal Stacks SDK Property 1. Label title stack.name 3. Description stack.description 3. Purposes stack.purposeIds 4. Special Features stack.specialFeatureIds"},{"location":"apps/features/build_own_ui/#set-cmp-id","title":"Set CMP ID","text":"<p>When building your own TCF 2.2 CMP, it is required to have your CMP UI design certified by the IAB. Once certified, you will need to provide your CMP ID as follows:</p> iOSAndroidFlutterReact Native <pre><code>UsercentricsCore.shared.setCMPId(id: &lt;ID&gt;)\n</code></pre> <pre><code>Usercentrics.instance.setCMPId(&lt;ID&gt;)\n</code></pre> <pre><code>Usercentrics.setCmpIdForTCF(id: &lt;ID&gt;)\n</code></pre> <pre><code>Usercentrics.setCMPId(&lt;ID&gt;)\n</code></pre>"},{"location":"apps/features/build_own_ui/#action-delegates_1","title":"Action Delegates","text":"<p>In order to collect consent, we have provided the following 3 functions:</p> <p>Accept All</p> iOSAndroidFlutterReact Native <pre><code>let consents = UsercentricsCore.shared.acceptAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.acceptAllForTCF(fromLayer = &lt;TCFDecisionUILayer&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.acceptAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>const consents = Usercentrics.acceptAllForTCF(&lt;TCFDecisionUILayer&gt;, &lt;UsercentricsConsentType&gt;)\n</code></pre> <p>Deny All</p> iOSAndroidFlutterReact Native <pre><code>let consents = UsercentricsCore.shared.denyAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.denyAllForTCF(fromLayer = &lt;TCFDecisionUILayer&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.denyAllForTCF(fromLayer: &lt;TCFDecisionUILayer&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>const consents = Usercentrics.denyAllForTCF(&lt;TCFDecisionUILayer&gt;, &lt;UsercentricsConsentType&gt;)\n</code></pre> <p>Save </p> <p>For granular selection, you may pass specific sets of consent with an array of <code>TCFUserDecisions</code>.</p> iOSAndroidFlutterReact Native <pre><code>let consents = UsercentricsCore.shared.saveDecisionsForTCF(tcfDecisions: &lt;[TCFUserDecisions]&gt;, \n                                                           fromLayer: &lt;TCFDecisionUILayer&gt;,\n                                                           serviceDecisions: &lt;[UserDecision]&gt;,\n                                                           consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.saveDecisionsForTCF(\n    tcfDecisions = &lt;[TCFUserDecisions]&gt;, \n    fromLayer = TCFDecisionUILayer.FIRST_LAYER,\n    serviceDecisions = &lt;[UserDecision]&gt;, \n    consentType = &lt;UsercentricsConsentType&gt;\n)\n</code></pre> <pre><code>final consents = await Usercentrics.saveDecisionsForTCF(\n  tcfDecisions: List&lt;TCFDecisions&gt;,\n  fromLayer: &lt;TCFDecisionUILayer&gt;,\n  serviceDecisions: List&lt;UserDecision&gt;,\n  consentType: &lt;UsercentricsConsentType&gt;\n);\n</code></pre> <pre><code>const consents = await Usercentrics.saveDecisionsForTCF(\n  [&lt;TCFDecisions&gt;],\n  &lt;UsercentricsConsentType&gt;,\n  [UserDecision],\n  &lt;UsercentricsConsentType&gt;\n);\n</code></pre> <p>TCF 2.2 Decision Layer</p> <p>Depending on your design, you might have 1 or 2 layers for collecting consent. It is required by the IAB, that you specify in which layer the consent was collected. For this, you may pass the corresponding enum value from <code>TCF_DECISION_UI_LAYER</code>.</p> <p>Consent Type</p> <p>The consent type should be based on if a customer made an explicit action to provide consent, or not. Implicit can be used if the user ignores or skips the CMP. We highly recommend you only use implicit together with the <code>denyAllForTCF()</code> method, which will accept only essential services.</p>"},{"location":"apps/features/build_own_ui/#interaction-analytics_1","title":"Interaction Analytics","text":"<p>To gather events in the Usercentrics analytics dashboard the following API is provided to track the available events:</p> iOSAndroid <pre><code>UsercentricsCore.shared.track(event: &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>Usercentrics.instance.track(event = &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <p>Events</p> [iOS] Event [Android] Event Notes .cmpShown .CMP_SHOWN The banner was displayed to the user. It doesn't matter which layer. .acceptAllFirstLayer .ACCEPT_ALL_FIRST_LAYER The Accept All button was pressed from the first layer. .denyAllFirstLayer .DENY_ALL_FIRST_LAYER The Deny All button was pressed from the first layer. .saveFirstLayer .SAVE_FIRST_LAYER The Save button was pressed from the first layer. Save is mainly used for granular decisions. .acceptAllSecondLayer .ACCEPT_ALL_SECOND_LAYER The Accept All button was pressed from the second layer. .denyAllSecondLayer .DENY_ALL_SECOND_LAYER The Deny All button was pressed from the second layer. .saveSecondLayer .SAVE_SECOND_LAYER The Save button was pressed from the second layer. Save is mainly used for granular decisions. .imprintLink .IMPRINT_LINK The Imprint link/button was pressed. .moreInformationLink .MORE_INFORMATION_LINK The More Information link/button was pressed. This button is usually used to navigate from first layer to second layer. .privacyPolicyLink .PRIVACY_POLICY_LINK The Privacy policy link/button was pressed."},{"location":"apps/features/build_own_ui/#california-consumer-privacy-act-ccpa","title":"California Consumer Privacy Act (CCPA)","text":"<p>The California Consumer Privacy Act of 2018 (CCPA) gives consumers more control over the personal information that businesses collect about them and provide guidance on how to implement the law. This landmark law secures new privacy rights for California consumers, including:</p> <ul> <li>The right to know about the personal information a business collects about them and how it is used and shared;</li> <li>The right to delete personal information collected from them (with some exceptions);</li> <li>The right to opt-out of the sale of their personal information; and</li> <li>The right to non-discrimination for exercising their CCPA rights.</li> </ul> <p>Businesses are required to give consumers certain notices explaining their privacy practices. The CCPA applies to many businesses, including data brokers.</p>"},{"location":"apps/features/build_own_ui/#data-source_1","title":"Data Source","text":"iOSAndroidFlutterReact Native <pre><code>UsercentricsCore.isReady { status in\n\n    let data = UsercentricsCore.shared.getCMPData()\n    let settings = data.settings\n    let services = data.services\n    let categories = data.categories\n\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({\n\n    val data = Usercentrics.instance.getCMPData()\n    val settings = data.settings\n    val services = data.services\n    val categories = data.categories\n\n}, { error -&gt;\n    // Handle non-localized error\n})\n</code></pre> <pre><code>try {\n  final data = await Usercentrics.cmpData;\n  final settings = data.settings;\n  final services = data.services;\n  final categories = data.categories;\n\n} catch (error) {\n    // Handle non-localized error\n}\n</code></pre> <pre><code>try {\n  const data = await Usercentrics.getCMPData();\n  const settings = data.settings;\n  const services = data.services;\n  const categories = data.categories;\n} catch (error) {\n    // Handle non-localized error\n}\n</code></pre> <p>Matching Categories and Services</p> <p>You may match services to categories with <code>category.slug</code> == <code>service.categorySlug</code>.</p>"},{"location":"apps/features/build_own_ui/#content-mapping_2","title":"Content Mapping","text":"First Layer SDK Property 1. Title ccpa.firstLayerTitle 2. Description ccpa.appFirstLayerDescription 3. Short Description ccpa.firstLayerMobileDescription 4. Read More settings.labels.btnBannerReadMore 5. Do not sell my info label ccpa.optOutNoticeLabel 6. Save Button Title ccpa.btnSave Banner Elements SDK Property 7. Privacy Policy Text settings.labels.privacyPolicyLinkText 8. Privacy Policy URL settings.privacyPolicyUrl 9. Imprint Text settings.labels.imprintLinkText 10. Imprint URL settings.imprintUrl 11. Language Selected settings.language 12. Languages Available settings.languagesAvailable 13. Categories Tab settings.secondLayer.tabsCategoriesLabel 14. Services Tab settings.secondLayer.tabsServicesLabel Category Component SDK Property 16. Category Name category.label 17. Category Description category.description Services Component SDK Property 18. Service Name service.dataProcessor 19. Service Description Title settings.labels.descriptionOfService 20. Service Description service.descriptionOfService 21. Processing Company Title settings.labels.processingCompanyTitle 22. Processing Company service.nameOfProcessingCompany + service.addressOfProcessingCompany 23. Data Purposes Title settings.labels.dataPurposes 24. Data Purposes Description settings.labels.dataPurposesInfo 25. Data Purposes service.dataPurposesList 26. Technologies Used Title settings.labels.technologiesUsed 27. Technologies Used Description settings.labels.technologiesUsedInfo 28. Technologies Used service.technologyUsed 29. Data Collected Title settings.labels.dataCollectedList 30. Data Collected Description settings.labels.dataCollectedListInfo 31. Data Collected service.dataCollectedList 32. Legal Bases Title settings.labels.legalBasisList 33. Legal Bases Description settings.labels.legalBasisInfo 34. Legal Bases service.legalBasisList 35. Processing Location Title settings.labels.locationOfProcessing 36. Processing Location service.locationOfProcessing 37. Retention Period Title settings.labels.retentionPeriod 38. Retention Period service.retentionPeriodDescription 39. Third Country Distribution Title settings.labels.transferToThirdCountries 40. Third Country Distribution service.thirdCountryTransfer 41. Is Essential service.isEssential 42. Data Recipients Title settings.labels.dataRecipientsList 43. Data Recipients service.dataRecipientsList 44. Privacy Policy Title settings.labels.policyOf 45. Privacy Policy service.privacyPolicyURL 46. Cookie Policy Title settings.labels.cookiePolicyInfo 47. Cookie Policy service.cookiePolicyURL 48. Opt Out Link Title settings.labels.optOut 49. Opt Out Link service.optOutUrl 50. History Title settings.labels.history 51. History service.consent.history 52. History Consent Given settings.labels.yes 53. History Consent Not Given settings.labels.no 54. History Explicit Consent settings.labels.explicit 55. History Implicit Consent settings.labels.implicit"},{"location":"apps/features/build_own_ui/#action-delegates_2","title":"Action Delegates","text":"<p>CCPA is a global opted out framework. This means:</p> <ul> <li>Consent is a boolean, no granular consent of services.</li> <li>The consent is given by default and the user has to explicitly opt-out.</li> </ul> <p>To collect consent for CCPA, we offer one simplified method:</p> <p>Save</p> iOSAndroidFlutterReact Native <pre><code>let ccpaConsents = UsercentricsCore.shared.saveOptOutForCCPA(isOptedOut: &lt;Bool&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val ccpaConsents = Usercentrics.instance.saveOptOutForCCPA(isOptedOut = &lt;Bool&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val ccpaConsents = Usercentrics.saveOptOutForCCPA(isOptedOut: &lt;Bool&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val ccpaConsents = Usercentrics.saveOptOutForCCPA(&lt;boolean&gt;, &lt;UsercentricsConsentType&gt;)\n</code></pre> <p>Consent Type</p> <p>The consent type should be based on if a customer made an explicit action to provide consent, or not. Implicit can be used if the user ignores or skips the CMP.</p>"},{"location":"apps/features/build_own_ui/#interaction-analytics_2","title":"Interaction Analytics","text":"<p>To gather events in the Usercentrics analytics dashboard the following API is provided to track the available events:</p> iOSAndroid <pre><code>UsercentricsCore.shared.track(event: &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>Usercentrics.instance.track(event = &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <p>Events</p> [iOS] Event [Android] Event Notes .cmpShown .CMP_SHOWN The banner was displayed to the user. It doesn't matter which layer. .acceptAllFirstLayer .ACCEPT_ALL_FIRST_LAYER The Accept All button was pressed from the first layer. .denyAllFirstLayer .DENY_ALL_FIRST_LAYER The Deny All button was pressed from the first layer. .saveFirstLayer .SAVE_FIRST_LAYER The Save button was pressed from the first layer. Save is mainly used for granular decisions. .acceptAllSecondLayer .ACCEPT_ALL_SECOND_LAYER The Accept All button was pressed from the second layer. .denyAllSecondLayer .DENY_ALL_SECOND_LAYER The Deny All button was pressed from the second layer. .saveSecondLayer .SAVE_SECOND_LAYER The Save button was pressed from the second layer. Save is mainly used for granular decisions. .imprintLink .IMPRINT_LINK The Imprint link/button was pressed. .moreInformationLink .MORE_INFORMATION_LINK The More Information link/button was pressed. This button is usually used to navigate from first layer to second layer. .privacyPolicyLink .PRIVACY_POLICY_LINK The Privacy policy link/button was pressed. .ccpaTogglesOn .CCPA_TOGGLES_ON The CCPA toggle has been set to ON. .ccpaTogglesOff .CCPA_TOGGLES_OFF The CCPA toggle has been set to OFF."},{"location":"apps/features/build_own_ui/#brazils-lei-geral-de-protecao-de-dados-lgpd","title":"Brazil\u2019s Lei Geral de Prote\u00e7\u00e3o de Dados (LGPD)","text":"<p>LGPD applies to any business or organization that processes the personal data of people in Brazil, regardless of where that business or organization itself might be located. So, if your company has any customers or clients in Brazil, you should begin preparing for LGPD compliance. </p> <p>If you are already GDPR compliant, then you have already done the bulk of the work necessary to comply with LGPD. It is only necessary that you set the appropaite Legal Basis for all your services.</p>"},{"location":"apps/features/build_own_ui/#data-source_2","title":"Data Source","text":"iOSAndroidFlutterReact Native <pre><code>UsercentricsCore.isReady { status in\n\n    let data = UsercentricsCore.shared.getCMPData()\n    let settings = data.settings\n    let services = data.services\n    let categories = data.categories\n\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({\n\n    val data = Usercentrics.instance.getCMPData()\n    val settings = data.settings\n    val services = data.services\n    val categories = data.categories\n\n}, { error -&gt;\n    // Handle non-localized error\n})\n</code></pre> <pre><code>try {\n  final data = await Usercentrics.cmpData;\n  final settings = data.settings;\n  final services = data.services;\n  final categories = data.categories;\n\n} catch (error) {\n    // Handle non-localized error\n}\n</code></pre> <pre><code>try {\n  const data = await Usercentrics.getCMPData();\n  const settings = data.settings;\n  const services = data.services;\n  const categories = data.categories;\n} catch (error) {\n    // Handle non-localized error\n}\n</code></pre> <p>Matching Categories and Services</p> <p>You may match services to categories with <code>category.slug</code> == <code>service.categorySlug</code>.</p>"},{"location":"apps/features/build_own_ui/#content-mapping_3","title":"Content Mapping","text":"First Layer SDK Property 1. Title settings.labels.firstLayerTitle 2. Description settings.firstLayerDescriptionHtml (raw input) or settings.firstLayerDescription 3. Short Description settings.firstLayerMobileDescriptionHtml (raw input) or settings.firstLayerMobileDescription 4. Read More settings.labels.btnBannerReadMore 5. Accept Button Title settings.labels.btnAcceptAll 6. Deny Button Title settings.labels.btnDeny 7. More Button Title settings.labels.btnMore Second Layer SDK Property 8. Title settings.labels.secondLayerTitle 9. Description settings.labels.secondLayerDescriptionHtml (raw input) or settings.labels.secondLayerDescription 10. Accept Button Title settings.secondLayer.acceptButtonText 11. Deny Button Title settings.secondLayer.denyButtonText Banner Elements SDK Property 12. Privacy Policy Text settings.labels.privacyPolicyLinkText 13. Privacy Policy URL settings.privacyPolicyUrl 14. Imprint Text settings.labels.imprintLinkText 15. Imprint URL settings.imprintUrl 16. Language Selected settings.language 17. Languages Available settings.languagesAvailable 18. Categories Tab settings.secondLayer.tabsCategoriesLabel 19. Services Tab settings.secondLayer.tabsServicesLabel 20. Save Button Title settings.labels.btnSave Category Component SDK Property 21. Category Name category.label 22. Category Description category.description Services Component SDK Property 23. Service Name service.dataProcessor 24. Service Description Title settings.labels.descriptionOfService 25. Service Description service.descriptionOfService 26. Processing Company Title settings.labels.processingCompanyTitle 27. Processing Company service.nameOfProcessingCompany + service.addressOfProcessingCompany 28. Data Purposes Title settings.labels.dataPurposes 29. Data Purposes Description settings.labels.dataPurposesInfo 30. Data Purposes service.dataPurposesList 31. Technologies Used Title settings.labels.technologiesUsed 32. Technologies Used Description settings.labels.technologiesUsedInfo 33. Technologies Used service.technologyUsed 34. Data Collected Title settings.labels.dataCollectedList 35. Data Collected Description settings.labels.dataCollectedListInfo 36. Data Collected service.dataCollectedList 37. Legal Bases Title settings.labels.legalBasisList 38. Legal Bases Description settings.labels.legalBasisInfo 39. Legal Bases service.legalBasisList 40. Processing Location Title settings.labels.locationOfProcessing 41. Processing Location service.locationOfProcessing 42. Retention Period Title settings.labels.retentionPeriod 43. Retention Period service.retentionPeriodDescription 44. Third Country Distribution Title settings.labels.transferToThirdCountries 45. Third Country Distribution service.thirdCountryTransfer 46. Is Essential service.isEssential 47. Data Recipients Title settings.labels.dataRecipientsList 48. Data Recipients service.dataRecipientsList 49. Privacy Policy Title settings.labels.policyOf 50. Privacy Policy service.privacyPolicyURL 51. Cookie Policy Title settings.labels.cookiePolicyInfo 52. Cookie Policy service.cookiePolicyURL 53. Opt Out Link Title settings.labels.optOut 54. Opt Out Link service.optOutUrl 55. History Title settings.labels.history 56. History service.consent.history 57. History Consent Given settings.labels.yes 58. History Consent Not Given settings.labels.no 59. History Explicit Consent settings.labels.explicit 60. History Implicit Consent settings.labels.implicit"},{"location":"apps/features/build_own_ui/#action-delegates_3","title":"Action Delegates","text":"<p>In order to collect consent, we have provided the following 3 functions: </p> <p>Accept All</p> iOSAndroidFlutterReact Native <pre><code>let consents = UsercentricsCore.shared.acceptAll(consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.acceptAll(consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.acceptAll(consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = Usercentrics.acceptAll(&lt;UsercentricsConsentType&gt;);\n</code></pre> <p>Deny All</p> iOSAndroidFlutterReact Native <pre><code>let consents = UsercentricsCore.shared.denyAll(consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.denyAll(consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.denyAll(consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = Usercentrics.denyAll(&lt;UsercentricsConsentType&gt;);\n</code></pre> <p>Save</p> <p>For granular selection, you may pass specific sets of consent with an array of decisions:</p> iOSAndroidFlutterReact Native <pre><code>let consents = UsercentricsCore.shared.saveDecisions(decisions: &lt;[UserDecision]&gt;, consentType: &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>val consents = Usercentrics.instance.saveDecisions(decisions = &lt;[UserDecision]&gt;, consentType = &lt;UsercentricsConsentType&gt;)\n</code></pre> <pre><code>final consents = Usercentrics.saveDecisions(decisions: List&lt;UserDecision&gt;, consentType: &lt;UsercentricsConsentType&gt;);\n</code></pre> <pre><code>const consents = Usercentrics.saveDecisions([&lt;UserDecision], &lt;UsercentricsConsentType&gt;);\n</code></pre> <p>Consent Type</p> <p>The consent type should be based on if a customer made an explicit action to provide consent, or not. Implicit can be used if the user ignores or skips the CMP. We highly recommend you only use implicit together with the <code>denyAll()</code> method, which will accept only essential services.</p>"},{"location":"apps/features/build_own_ui/#interaction-analytics_3","title":"Interaction Analytics","text":"<p>To gather events in the Usercentrics analytics dashboard the following API is provided to track the available events:</p> iOSAndroid <pre><code>UsercentricsCore.shared.track(event: &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <pre><code>Usercentrics.instance.track(event = &lt;UsercentricsAnalyticsEventType&gt;)\n</code></pre> <p>Events</p> [iOS] Event [Android] Event Notes .cmpShown .CMP_SHOWN The banner was displayed to the user. It doesn't matter which layer. .acceptAllFirstLayer .ACCEPT_ALL_FIRST_LAYER The Accept All button was pressed from the first layer. .denyAllFirstLayer .DENY_ALL_FIRST_LAYER The Deny All button was pressed from the first layer. .saveFirstLayer .SAVE_FIRST_LAYER The Save button was pressed from the first layer. Save is mainly used for granular decisions. .acceptAllSecondLayer .ACCEPT_ALL_SECOND_LAYER The Accept All button was pressed from the second layer. .denyAllSecondLayer .DENY_ALL_SECOND_LAYER The Deny All button was pressed from the second layer. .saveSecondLayer .SAVE_SECOND_LAYER The Save button was pressed from the second layer. Save is mainly used for granular decisions. .imprintLink .IMPRINT_LINK The Imprint link/button was pressed. .moreInformationLink .MORE_INFORMATION_LINK The More Information link/button was pressed. This button is usually used to navigate from first layer to second layer. .privacyPolicyLink .PRIVACY_POLICY_LINK The Privacy policy link/button was pressed."},{"location":"apps/features/consent-mediation/","title":"Consent Mediation","text":"<p>BETA</p> <p>This feature is currently in beta, and only available starting v2.7.0. Please make sure that consent is being passed correctly before pushing this feature to production.</p> <p>To simplify the process of applying consent, we are adding a mediation feature, that is aware of the Consent API of selected SDKs, and will apply/update consent whenever needed.</p>"},{"location":"apps/features/consent-mediation/#enable-mediation","title":"Enable Mediation","text":"iOSAndroid <pre><code>let options = UsercentricsOptions(settingsId: &lt;SettingsID&gt;, consentMediation: true)\n</code></pre> <pre><code>val options = UsercentricsOptions(settingsId = &lt;SettingsID&gt;, consentMediation = true)\n}\n</code></pre> <p>That's it! \ud83d\ude80 we will now apply consent automatically to all supported SDKs.</p> <p>Make sure you apply consent to not supported SDKs as well.</p>"},{"location":"apps/features/consent-mediation/#supported-sdks","title":"Supported SDKs","text":"SDK Template ID Added in version Source Google Analytics for Firebase diWdt4yLB 2.7.0 Google's Consent Mode Unity Ads hpb62D82I 2.7.0 Privacy consent and data APIs AppLovin fHczTMzX8 2.7.0 Privacy-Consent and Data API for iOS and Android ironSource 9dchbL797 2.7.0 Regulation Advanced Settings for iOS and Android Crashlytics cE0B0wy4Z 2.7.12 Privacy-Consent and Data API for iOS and Android Adjust Jy6PlrM3 2.7.12 Privacy-Consent and Data API for iOS and Android"},{"location":"apps/features/consent-mediation/#supported-mediation-sdks","title":"Supported Mediation SDKs","text":"<p>These SDKs mediate consent for selected SDKs themselves. Make sure you setup the correct TemplateIDs to automatically pass consent to mediated SDKs.</p>"},{"location":"apps/features/consent-mediation/#adjust","title":"Adjust","text":"SDK Template ID Apple Ads weoN4Lb_MjWLuu Facebook ocv9HNX_g Google Ads S1_9Vsuj-Q Google Marketing Platform t-TPeXsRi Snapchat QcD9GVNXZ Tencent tMLzMavbHZoxW0 TikTokSan 6-qobRfu Twitter Skj79NodobQ Yahoo Gemini HJSPc4ids-Q Yahoo Japan Search gUbemZYaQwqxss"},{"location":"apps/features/consent-mediation/#custom-dps","title":"Custom DPS","text":"<p>When creating a Custom DPS, it's Template ID will be new and unique. For this reason, if you want to use Consent Mediation, you need to modify the default Template ID we provide in the tables above. you will need to provide this information to our SDK for Consent Mediation to know how to match your Custom DPS with the SDK you are passing consent.</p> <p>The setup below should always happen before Usercentrics is initialized</p> <p>To do this, we have provided the  object UsercentricsMediation. e.g. If you want to switch the TemplateID for Unity Ads:</p> iOSAndroid <pre><code>UsercentricsMediation.shared.unityAdsTemplateId = \"CustomTemplateId\"\n</code></pre> <pre><code>UsercentricsMediation.unityAdsTemplateId = \"CustomTemplateId\"\n</code></pre> <p>You can customize the Template ID for SDKs that are mediated by supported SDKs. e.g SDKs that are mediated by Adjust:</p> iOSAndroid <pre><code>UsercentricsMediation.adjust.shared.snapchatTemplateId = \"CustomTemplateId\"\n</code></pre> <pre><code>UsercentricsMediation.adjust.snapchatTemplateId = \"CustomTemplateId\"\n</code></pre>"},{"location":"apps/features/consent-mediation/#debugging","title":"Debugging","text":"<p>Debug Mode</p> <p>To see debug messages, please set the SDK's loggerLevel to DEBUG.</p> <p>When running your application with Consent Mediation enabled, you should expect the following events:</p> <p>Enable Confirmation</p> <p>Immediately after initialization, you will get a confirmation that Consent Mediation is Enabled: <pre><code>[USERCENTRICS] Consent Mediation is Enabled\n</code></pre></p> <p>Scan</p> <p>After your configuration has been loaded, the SDK will provide an overview of the supported services: <pre><code>[USERCENTRICS][Mediation] 2/6 Services are supported: Unity Ads | Google Analytics for Firebase\n</code></pre> Mediation</p> <p>Whenever a user provides consent or the SDK has been initialized, the SDK will apply the latest user choices to each supported SDK:</p> <pre><code>[USERCENTRICS][Mediation] \u2705 Google Analytics for Firebase: TRUE\n[USERCENTRICS][Mediation] \u2705 Unity Ads: FALSE\n</code></pre> <p>Default Consent</p> <p>On first launch, you will see consent is applied immediately after initialization, even when a user still has not given consent. This happens because the default consent provided in your configuration is being applied.</p>"},{"location":"apps/features/custom-hyperlinks/","title":"Custom Hyperlinks","text":"<p>By default, when a user taps on any hyperlink available in the UsercentricsUI banner, the given URL will be opened in a browser.</p> <p></p> <p>If you wish to customize this behaviour, and capture these hyperlinks, you may leverage the already existing deeplink mechanism from iOS and Android, to capture hyperlinks.</p>"},{"location":"apps/features/custom-hyperlinks/#define-deeplinks","title":"Define Deeplinks","text":"<p>Define a deeplink scheme for the links you will be catching, and provide the URL/s in our Configuration Dashboard.</p> Banner Message LinksLegal Links <p></p> <p></p>"},{"location":"apps/features/custom-hyperlinks/#capture-deeplinks","title":"Capture Deeplinks","text":"iOSAndroid <p>Configure Info.plist to listen a specific URL scheme</p> <p>In order to capture Deep Links being clicked on your app, the first step is to configure <code>Info.plist</code>.</p> <p></p> <p>Catch deeplink and provide custom implementation</p> <p>Add a listener to <code>AppDelegate.swift</code>, and add the necessary logic for your custom implementation.</p> <pre><code>// On AppDelegate\nfunc application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -&gt; Bool {\n    return handleUrl(url)\n}\n\nfunc handleUrl(_ url: URL) -&gt; Bool {\n    if (url.scheme == \"example\" &amp;&amp; url.host == \"privacyPolicy\") {\n        // Custom Implementation for Link\n        return true\n    }\n    return false\n}\n</code></pre> <p>Configure AndroidManifest.xml to listen a specific URL scheme</p> <p>In order to capture deeplinks being triggered in your app, we should create an <code>Activity</code> on <code>AndroidManifest.xml</code> that will be responsible for receiving callbacks.</p> <pre><code>&lt;activity android:name=\".DeepLinkActivity\"&gt;\n\n    &lt;intent-filter android:label=\"deep link example\"&gt;\n        &lt;action android:name=\"android.intent.action.VIEW\" /&gt;\n\n        &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n        &lt;data\n            android:host=\"privacyPolicy\"\n            android:scheme=\"example\" /&gt;\n    &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre> <p>Catch deeplink and provide custom implementation</p> <p>On create, add the necessary logic for your custom implementation.</p> <pre><code>class DeepLinkActivity: AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        val data = intent?.data ?: return\n        if (data.scheme == \"example\" &amp;&amp; data.host == \"privacyPolicy\") {\n            // Custom Implementation for Link\n            finish()\n        }\n    }\n}\n</code></pre>"},{"location":"apps/features/customization/","title":"Customization","text":"<p>User experience is a relevant variable when collecting consent. We highly encourage you to take advantange of our customization features, in order to provide a branded and user friendly banner to your users.</p>"},{"location":"apps/features/customization/#remote-customization","title":"Remote Customization","text":"<p>Use our Remote Customization options, for a quick out-of-the-box branding that covers all the basics. </p> <p></p> <p>In the Appearance section of our Admin Interface, you will find the Layout and Styling tabs:</p> LayoutStyling <p>Under Display Options, you will find the following options:</p> <ul> <li>Hide \"Deny All\" button</li> <li>Hide Language switch</li> </ul> <p>Showing the Language Switch</p> <p>The language switch will only be shown in the Second Layer, and both of the following requirements need to be fulfilled:</p> <ul> <li>Multiple visible languages are added in the Configuration section of the Admin Interface.</li> <li>The \"Hide language switch\" option is disabled in the Appearance section of the Admin Interface, under the \"Layout\" tab.</li> </ul> <p>Colors: Set individual colors by providing a specific HEX or using our color picker for the following banner elements:</p> <ul> <li>Background Color</li> <li>Text Color</li> <li>Links Color</li> <li>Tab Color</li> <li>Accent Color</li> <li>Button Colors</li> <li>Tabs Color</li> <li>Toggle Colors</li> </ul> <p></p> <p>Text Font and Size: Only supported via Programmatic Customization.</p> <p>Logo: Set an image to appear at the top of your banner by providing a URL, as well as it's position:</p> <p></p> Supported URL Image Formats <p>When passing a URL to fetch an image, the SDK supports: iOS: PNG and JPEG. Android: PNG, JPEG, BMP, GIF and WebP.</p> Supporting SVG Images <p>As SVG is not a format supported by mobile operating systems, we have provided an ad-hoc solution that requires the addition of dedicaded SVG libraries to your project.</p> iOSAndroid <p>Add SVG kit via Cocoapods: <pre><code>pod 'SVGKit'\n</code></pre></p> <p>Add Pixplicity to your <code>build.gradle</code>: <pre><code>implementation 'com.pixplicity.sharp:sharp:1.1.3@aar'\n</code></pre></p> <p>Once added, the Usercentrics SDK will make use of it when an SVG needs to be rendered.</p> <p></p> <p>Any changes to the properties available here, will only take effect with a new init of the SDK and clean/updated cache.</p> <p>Forcing configuration updates during Testing</p> <p>You may force a configuration update by using the reset() function, or by deleting the app and installing it again. We only recommend doing this when integrating and testing the SDK.</p> <p>Configuration updates in Production</p> <p>The SDK caches essential data on device after the first successful init, in order to be efficient with resources and provide offline capabilities. This cache is kept for several days, depending on app usage. Which means user's will not get \"Published\" changes from the Admin Interface immediately, but we can guaranty changes will take effect for 100% of your user base latest within a week. </p>"},{"location":"apps/features/customization/#programmatic-customization","title":"Programmatic Customization","text":"<p>Use our Programmatic Customization API, to create advance banner designs and run-time variants. Using this API unlocks features like A/B Testing &amp; Dark Mode.</p> Compliance Note <p>Because the Programmatic API enables many customization options, it is important that your DPO (Data Protection Officer) reviews and approves the compliance of your design:</p> <p>e.g.</p> <ul> <li>A user should always have clear options to accept, deny or save granular choices available as call to actions in the 1<sup>st</sup> or 2<sup>nd</sup> layer.</li> <li>The First Layer should always allow a path to the Second Layer.</li> <li>Calls to action should be equally prominent.</li> </ul> <p></p> <p>When creating the UsercentricsUI banner, a <code>BannerSettings</code> property will be available for you to customize any element of the banner.</p> iOSAndroidFlutterReact Native <pre><code>let bannerSettings = BannerSettings(generalStyleSettings: &lt;GeneralStyleSettings?&gt;,\n                                    firstLayerSettings: &lt;FirstLayerStyleSettings?&gt;,\n                                    secondLayerSettings: &lt;SecondLayerStyleSettings?&gt;)\n\nlet banner = UsercentricsBanner(bannerSettings: bannerSettings)\n</code></pre> <pre><code>val bannerSettings = BannerSettings(\n    generalStyleSettings = &lt;GeneralStyleSettings?&gt;,\n    firstLayerSettings = &lt;FirstLayerStyleSettings?&gt;,\n    secondLayerSettings = &lt;SecondLayerStyleSettings?&gt;,\n)\n\nval banner = UsercentricsBanner(context, bannerSettings)\n</code></pre> <pre><code>final bannerSettings = BannerSettings(\n    general: &lt;GeneralStyleSettings?&gt;,\n    firstLayer: &lt;FirstLayerStyleSettings?&gt;,\n    secondLayer: &lt;SecondLayerStyleSettings?&gt;,\n);\n\n// First Layer\nfinal response = await Usercentrics.showFirstLayer(\n    settings: bannerSettings,\n);\n\n// Second Layer\nfinal response = await Usercentrics.showSecondLayer(\n    settings: bannerSettings,\n);\n</code></pre> <pre><code>const bannerSettings: BannerSettings = {\n    firstLayerSettings: &lt;FirstLayerStyleSettings?&gt;,\n    secondLayerSettings: &lt;SecondLayerStyleSettings?&gt;,\n    generalStyleSettings: &lt;GeneralStyleSettings?&gt;\n}\n\n// First Layer\nconst response = await Usercentrics.showFirstLayer(bannerSettings);\n\n// Second Layer\nconst response = await Usercentrics.showSecondLayer(bannerSettings);\n</code></pre> Dark Mode <p>Use the customization API to define both <code>light</code> and <code>dark</code> designs and use depending on device theme.</p> <pre><code>let lightBannerTheme = BannerSettings(...) // define light theme\nlet darkBannerTheme = BannerSettings(...) // define dark theme\n\nlet theme = (&lt;Device Theme Dark?&gt;) = darkBannerTheme : lightBannerTheme\nlet banner = UsercentricsBanner(theme)\nbanner.showFirstLayer(hostView: self) { }\n</code></pre>"},{"location":"apps/features/customization/#general-style-settings","title":"General Style Settings","text":"<p>General Style Settings values overwrite Remote Style values</p> Properties Type Notes textColor Color Edit the text color for both First Layer and Second Layer. layerBackgroundColor Color Edit the color of the First Layer and Header and Footer of the Second Layer. layerBackgroundSecondaryColor Color Edit the color of the background in the content section. linkColor Color Edit the color of all available links. tabColor Color Edit the color of the Category and Services Tabs. bordersColor Color Edit the color for the borders of the Category and Services content section, Category and Service components and Service Information Tags. toggleStyleSettings Object Edit the toggle colors for: Active, Inactive and Disabled states. font Font Pass both Regular and Bold fonts to be used in the banner. logo Image Pass a local image to be rendered as a logo in both First Layer and Second Layer. links Enum Customize the visibility of the legal links: .both (default), .firstLayerOnly, .secondLayerOnly and .hidden. disableSystemBackButton Bool Disable system back button."},{"location":"apps/features/customization/#first-layer-style-settings","title":"First Layer Style Settings","text":"<p>First Layer Style Settings values overwrite General Style Settings values.</p> Properties Type Notes layer Enum Select the Layout of the First Layer: Sheet, Popup Center, Popup Bottom, Full. headerImage Enum Customize the layout of the image at the top of your banner: .logo (default), .extended or .hidden. title Object Customize the appearance of the title label: Font, Text Color and Text Alignment. message Object Customize the appearance of the message label: Font, Text Color, Text Alignment, Link Text Color and Link Text Underline. buttonLayout Enum Customize the layout of the action buttons: .column (default), .grid, .row. You may also pass an array of [ButtonSettings] to define the order and appearance of the buttons. backgroundColor Color Edit the color of the First Layer background. cornerRadius Float Edit the corner radius of the banner. overlayColor Color Edit the color of the First Layer overlay."},{"location":"apps/features/customization/#second-layer-style-settings","title":"Second Layer Style Settings","text":"<p>Second Layer Style Settings values overwrite General Style Settings values.</p> Properties Type Notes buttonLayout Enum Customize the layout of the action buttons: .column (default), .grid, .row. You may also pass an array of [ButtonSettings] to define the order and appearance of the buttons. showCloseButton Bool Show a close button in the Second Layer to allow users to dismiss the banner without editing consent."},{"location":"apps/features/restore-user-sessions/","title":"Restoring a User Session &amp; Cross-Device Consent Sharing","text":"<p>Premium Feature</p> <p>Cross-Device Consent Sharing is a Premium Feature that is only enabled on request. Please reach out to your Customer Success Manager for more information.</p> <p>CCPA/CPRA and US Frameworks are not supported</p> <p>Cross-Device Consent Sharing is not supported for CCPA/CPRA and US Frameworks. The consent collected for these frameworks is only meant for the device the consent was given in.</p> <p>A <code>controllerID</code> is a Usercentrics generated ID, used to identify a user's consent history. </p> <p>In the moment that a user provides consent, the SDK will generate a <code>controllerID</code> that identifies that specific user to it's privacy choices. This ID will be stored locally and available to you after a user gives consent:</p> iOSAndroidFlutterReact Native <pre><code>banner.showFirstLayer(...) { userResponse in\n    let controllerID = userResponse.controllerId\n}\n</code></pre> <pre><code>banner.showFirstLayer(...) { userResponse -&gt;\n    val controllerId = userResponse?.controllerId\n}\n</code></pre> <pre><code>final userResponse = await Usercentrics.showFirstLayer(...);\nval controllerId = userResponse?.controllerId\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\nconst userResponse = await Usercentrics.showFirstLayer(...);\nconst controllerId = response.controllerId;\n</code></pre> <p>or you can get it by calling <code>getControllerId()</code> after the initialization:</p> iOSAndroidFlutterReact Native <pre><code>let controllerID = UsercentricsCore.shared.getControllerId()\n</code></pre> <pre><code>val controllerId = Usercentrics.instance.getControllerId()\n</code></pre> <pre><code>final controllerId = await Usercentrics.getControllerId();\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\nconst controllerId = await Usercentrics.getControllerId();\n</code></pre> <p>You can now take this ID, and restore a user session in another Usercentrics supported platform, such as iOS, Android, TV, Web or Unity. By using the method <code>restoreUserSession</code> and passing the controllerID:</p> iOSAndroidFlutterReact Native <pre><code>UsercentricsCore.shared.restoreUserSession(controllerId: controllerId) { status in\n    // This callback is equivalent to `isReady`\n    if status.shouldCollectConsent {\n        // Collect Consent\n    } else {\n        // Apply consent with status.consents\n    }\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.instance.restoreUserSession(controllerId, { status -&gt;\n    // This callback is equivalent to `isReady`\n    if (status.shouldCollectConsent) {\n        // Collect Consent\n    } else {\n        // Apply consent with status.consents\n    }\n}, { error -&gt;\n    // Handle non-localized error\n})\n</code></pre> <pre><code>try {\n  final status = Usercentrics.restoreUserSession(controllerId: controllerId);\n\n  if (status.shouldCollectConsent) {\n    // Collect Consent\n  } else {\n    // Apply consent with status.consents\n  }\n} catch (error) {\n  // Handle non-localized error\n}\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\ntry {\n  const status = Usercentrics.restoreUserSession(controllerId: controllerId);\n\n  if (status.shouldCollectConsent) {\n    // Collect Consent\n  } else {\n    // Apply consent with status.consents\n  }\n} catch (error) {\n  // Handle non-localized error\n}\n</code></pre>"},{"location":"apps/features/webview-continuity/","title":"WebView User Session Continuity","text":"<p>For cases where your app uses WebViews, we provide a mechanism to inject a user session, so that the CMP on the WebView is not shown every time the user opens it.</p> <p>To implement this feature the SDK offers the method <code>getUserSessionData</code>, which returns a String (JSON) with the user session.</p> iOSAndroidFlutterReact Native <p>This data must then be injected into a global variable called <code>UC_UI_USER_SESSION_DATA</code> in your WKWebView. </p> <pre><code>let sessionData = UsercentricsCore.shared.getUserSessionData()\n\nlet script = \"\"\"\nwindow.ucMobileSdk = {\n    getUserSessionData: function() {\n        return '\\(sessionData)';\n    }\n}\n\"\"\"\n\nlet userScript = WKUserScript(source: script, injectionTime: .atDocumentStart, forMainFrameOnly: true)\nlet contentController = WKUserContentController()\ncontentController.addUserScript(userScript)\n\nlet preferences = WKPreferences()\npreferences.javaScriptEnabled = true\n\nlet webConfiguration = WKWebViewConfiguration()\nwebConfiguration.preferences = preferences\nwebConfiguration.userContentController = contentController\n\nwebView = WKWebView(frame: .zero, configuration: webConfiguration)\nwebView.uiDelegate = self\n\nlet myURL = URL(string:\"https://&lt;some_url&gt;\")\nlet myRequest = URLRequest(url: myURL!)\nwebView.load(myRequest)\n</code></pre> <p>This data must be injected using a <code>JavaScriptInterface</code> with a method <code>getSessionData</code>.</p> <pre><code>webView.settings.javaScriptEnabled = true\nwebView.settings.domStorageEnabled = true\n\nwebView.addJavascriptInterface(SampleJavascriptInterface(userSessionData), \"ucMobileSdk\")\nwebView.loadUrl(\"https://&lt;some_url&gt;\")\n</code></pre> <pre><code>class SampleJavascriptInterface(private val userSessionData: UserSessionData) {\n\n    @JavascriptInterface\n    fun getUserSessionData(): String? {\n        return userSessionData\n    }\n}\n</code></pre> <p>This data must then be injected into a global variable called <code>UC_UI_USER_SESSION_DATA</code>. However due to the <code>webview_flutter</code> library limitations, it is important that you guarantee in some way or another that the data is available at the time the Usercentrics script is executed in the webview. For example:</p> <p><pre><code>FutureBuilder&lt;String&gt;(\n  future: Usercentrics.userSessionData,\n  builder: (context, snapshot) {\n    final userSessionData = snapshot.data;\n    if (userSessionData == null) return const SizedBox();\n    return WebView(\n      onWebViewCreated: (WebViewController controller) async {\n        this.controller = controller;\n        await controller.loadFlutterAsset('assets/webview_index.html'); // loadUrl or whatever\n      },\n      onPageFinished: (String url) async {\n        await controller?.runJavascript(\"\"\"\n        window.UC_UI_USER_SESSION_DATA = $userSessionData;\n        window.dispatchEvent(new Event('Usercentrics_userSessionData_injected'));\n        \"\"\");\n      },\n      javascriptMode: JavascriptMode.unrestricted,\n      debuggingEnabled: true,\n    );\n  }),\n)\n</code></pre> <pre><code>function addUsercentricsScript() {\n    var settingsId = 'Yi9N3aXia';\n    var script = document.createElement('script');\n    script.id = 'usercentrics-cmp';\n    script.setAttribute('data-settings-id', settingsId);\n    script.setAttribute('src', 'https://app.usercentrics.eu/browser-ui/latest/bundle_legacy.js');\n    script.async = true;\n    document.head.appendChild(script);\n}\n\nwindow.addEventListener(\"Usercentrics_userSessionData_injected\", function(){\n    addUsercentricsScript();\n});\n</code></pre> See more here.</p> <p>This data must then be injected into a global variable called <code>UC_UI_USER_SESSION_DATA</code> in your WebView <code>injectedJavaScriptBeforeContentLoaded</code> property. </p> <p><pre><code>&lt;WebView\n    javaScriptEnabled={true}\n    domStorageEnabled={true}\n    injectedJavaScriptBeforeContentLoaded={`window.UC_UI_USER_SESSION_DATA = ${userSessionData};`.toString()}\n    source=... /&gt;\n</code></pre> See more here.</p> <p>Compatibility</p> <p>User Session injection is only supported if your WebView is running version 1.4.0 or higher of the Usercentrics BrowserUI.</p>"},{"location":"apps/help/att/","title":"AppTrackingTransparency Framework - iOS 14.5","text":"<p>Starting with iOS 14.5, Apple requires you to declare the type of data your app is tracking and ask users for permission to track them. For this, Apple has provided the AppTrackingTransparency framework. (ATT)</p> <p></p>"},{"location":"apps/help/att/#does-att-replace-a-cmp","title":"Does ATT replace a CMP?","text":"<p>No, it does not. A CMP collects consent based on the legal requirements of a framework, such as GDPR or CCPA/CPRA, which are valid in their respective jurisdiction. Where as ATT is designed to provide transparency about the tracking practices of an App. The underlying value of ATT is to empower users, by giving them the control over who can have access to their Advertising Identifier (IDFA, an ID used by advertisers to identify a unique user/device and provide personalized ads), by signaling to the app developer, that tracking practices should/should not be enabled.   </p>"},{"location":"apps/help/att/#how-to-support-att","title":"How to support ATT?","text":"<ol> <li> <p>Add NSUserTrackingUsageDescription to your info.plist, with a description explaining why you want to track your user's data, Import the framework.</p> </li> <li> <p>Create an iOS 14 or later function, and request permission with the AppTrackingTransparency framework.</p> <pre><code>import AppTrackingTransparency\n\n@available(iOS 14, *)\nprivate func requestAppTrackingTransparencyPermission() {\n\n    ATTrackingManager.requestTrackingAuthorization { status in\n        switch status {\n        case .authorized:\n            // Handle Approve case\n        case .denied:\n            // Handle Deny case\n        default:\n            // Consider .restricted and .notDetermined states if needed\n        }\n    }\n\n}\n</code></pre> </li> <li> <p>Depending on your App Flow, you may request ATT permission whenever you deem convenient, but we recommend collecting both legal consent via the Usercentrics CMP and ATT permission in consecutive steps. </p> <pre><code>if #available(iOS 14, *) {\n    self.requestAppTrackingTransparencyPermission()\n}\n</code></pre> </li> </ol> <p>If permission has never been requested, the system will prompt the ATT pop-up, and the result will be return on the callback.  Once permission has been collected, any future call to this function will directly return the permission status without presenting the pop-up. </p>"},{"location":"apps/help/att/#is-it-possible-for-a-user-to-change-their-att-decision","title":"Is it possible for a user to change their ATT decision?","text":"<p>In case you change your tracking practices and want to guide your users to re-evaluate their ATT decision, you can always facilitate the path to your App Settings, by calling the following method:</p> <pre><code>if let appSettings = NSURL(string: UIApplication.openSettingsURLString) {\n    UIApplication.shared.open(appSettings as URL, options: [:], completionHandler: nil)\n}\n</code></pre> <p>This will forward users to your specific App settings, where they can change their settings if they so wish.</p> <p> </p> <p>Do NOT force users to give ATT permission</p> <p>We highly discourage limiting functionality or blocking users, if they do not provide ATT permission.</p>"},{"location":"apps/integration/apply-consent/","title":"Applying Consent","text":"<p>Now that you have collected consent, let's make sure to respect the user's choices by applying consent to each SDK.  First, we need a way to match the declared Data Protection Services (DPS) in your configuration, with the SDKs running in the App.</p>"},{"location":"apps/integration/apply-consent/#how-to-match-a-service-with-an-sdk","title":"How to match a service with an SDK?","text":"<p>Every service (DPS) available in our database, such as:</p> <ul> <li>Google Firebase</li> <li>Unity Ads</li> <li>Adjust</li> <li>AppLovin</li> <li>Vungle</li> </ul> <p>will have a unique <code>templateID</code> to identify it. This ID can be found under Service Settings &gt; Data Processing Services &gt; Service Extended Information.</p> <p></p> <p>We will be using this ID to match every declared service with it's SDK.</p>"},{"location":"apps/integration/apply-consent/#when-should-you-apply-consent","title":"When should you apply consent?","text":""},{"location":"apps/integration/apply-consent/#after-collecting-consent","title":"After collecting consent","text":"<p>It is a given that consent will only change if the banner is shown to the user and an action is taken.  When using the UsercentricsUI, the callback will return the new values, and you will need to use it to apply consent:</p> iOSAndroidFlutterReact Native <pre><code>let banner = UsercentricsBanner()\nbanner.showFirstLayer(hostView: self, layout: &lt;UsercentricsLayout&gt;) { userResponse in\n    self.applyConsent(with: userResponse.consents)\n}\n</code></pre> <pre><code>val banner = UsercentricsBanner(&lt;Context&gt;)\nbanner.showFirstLayer(layout = &lt;UsercentricsLayout&gt;) { userResponse -&gt;\n    applyConsent(userResponse?.consents)\n}\n</code></pre> <pre><code>final userResponse = await Usercentrics.showFirstLayer(layout: &lt;UsercentricsLayout&gt;);\napplyConsent(userResponse?.consents);\n</code></pre> <pre><code>const options: FirstLayerOptions = { \n    layout: &lt;UsercentricsLayout&gt; // .full, .sheet, .popup\n};\n\nconst userResponse = await Usercentrics.showFirstLayer(options);\napplyConsent(userResponse.consents);\n</code></pre> <p>In a similar manner, if you are building your own UI, you will need to apply consent after any consent storage action is triggered:</p> iOSAndroidFlutterReact Native <pre><code>let consents = UsercentricsCore.shared.acceptAll(consentType: .explicit_) // also applies for \"deny\" and \"save\"\nself.applyConsent(with: consents)\n</code></pre> <pre><code>val consents = Usercentrics.instance.acceptAll(consentType = UsercentricsConsentType.EXPLICIT) // also applies for \"deny\" and \"save\"\napplyConsent(consents)\n</code></pre> <pre><code>final consents = Usercentrics.acceptAll(consentType: UsercentricsConsentType.explicit); // also applies for \"deny\" and \"save\"\napplyConsent(consents);\n</code></pre> <pre><code>const consents = Usercentrics.acceptAll(UsercentricsConsentType.explicit); // also applies for \"deny\" and \"save\"\napplyConsent(consents);\n</code></pre>"},{"location":"apps/integration/apply-consent/#after-a-new-app-launch","title":"After a new app launch","text":"<p>The first time you launch the app with the Usercentrics SDK, no consent will have been collected, and the <code>status</code> returned in <code>isReady</code> will let you know if you should collect consent.</p> <p>However, in any future initialization after the first one, you will already have a consent status, and you will only need to apply it.</p> iOSAndroidFlutterReact Native <pre><code>UsercentricsCore.isReady { status in\n    if status.shouldCollectConsent {\n        // Collect Consent\n    } else {\n        self.applyConsent(with: status.consents)\n    }\n} onFailure: { error in \n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({ status -&gt;\n    if (status.shouldCollectConsent) {\n        // Collect Consent\n    } else {\n        applyConsent(status.consents)\n    }\n},{ error -&gt;\n    // Handle non-localized error\n})\n</code></pre> <pre><code>try {\n  final status = await Usercentrics.status;\n\n  if (status.shouldCollectConsent) {\n    //Collect Consent\n  } else {\n    applyConsent(status.consents);\n  }\n} catch (error) {\n  // Handle non-localized error\n}\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\ntry {\n  const status = await Usercentrics.status();\n\n  if (status.shouldCollectConsent) {\n    //Collect Consent\n  } else {\n    applyConsent(status.consents);\n  }\n} catch (error) {\n  // Handle non-localized error\n}\n</code></pre> <p>Getting consent on demand</p> <p>You may also call <code>UsercentricsCore.shared.getConsents()</code> to get the consent directly, but make sure to do so after the <code>isReady</code> callback has been triggered.</p>"},{"location":"apps/integration/apply-consent/#how-to-apply-consent","title":"How to apply consent?","text":"<p>SDKs that access and process user and/or device data, are only allowed to do so, if the user has given explicit consent. In order to be compliant, please review every SDK in your App for the following cases:</p>"},{"location":"apps/integration/apply-consent/#sdks-with-a-consent-api","title":"SDKs with a consent API","text":"<p>SDKs that support data privacy compliance, will provide an API to set the user's consent status. The API and it's behaviour will be documented by the SDK's provider.</p> <p>e.g.</p> <ul> <li>Google Analytics for Firebase's Consent Mode</li> <li>Unity Ad's Privacy consent and data API</li> <li>AppLovin's Privacy API</li> </ul> <p>Regulation dedicated APIs</p> <p>Please note that most APIs are dedicated for a specific regulation. e.g. GDPR for Europe, CCPA/CPRA for US/California, COPPA for children protection, etc. Make sure to review the documentation and apply the consent for the correct regulation. </p> <p>To apply consent to these SDKs, identify the target SDK and implement the consent API as documented:</p> iOSAndroidFlutterReact Native <pre><code>func applyConsent(with consents: [UsercentricsServiceConsent]) {\n    for service in consents {\n        switch service.templateId {\n        case \"diWdt4yLB\": // Google Analytics for Firebase Template ID\n\n            // Google Firebase Consent Mode API\n            let firebaseConsentStatus = service.status ? .granted : .denied\n            Analytics.setConsent([\n                .analyticsStorage: firebaseConsentStatus\n                .adStorage: firebaseConsentStatus\n            ])\n            initializeFirebase()\n\n        case \"x-XXXxXx\": // Other Service Template ID\n            // Pass consent to framework with service.status\n        default:\n            // Log a warning if a service was not caught or do nothing\n        }\n    }\n}\n</code></pre> <pre><code>fun applyConsent(consents: List&lt;UsercentricsServiceConsent&gt;?) {\n    consents?.forEach { service -&gt;\n        when (service.templateId) {\n            \"diWdt4yLB\" -&gt; { // Google Analytics for Firebase Template ID\n\n                // Google Firebase Consent Mode API\n                val firebaseConsentStatus = if (service.status) ConsentStatus.GRANTED else ConsentStatus.DENIED\n                Firebase.analytics.setConsent {\n                    analyticsStorage(firebaseConsentStatus)\n                    adStorage(firebaseConsentStatus)\n                }\n                initializeFirebase()    \n\n            }\n            // Other Service Template ID\n            \"x-XXXxXx\" -&gt; {\n                // Initialize or pass consent to framework with service.status\n            }\n            else -&gt; {\n                // Log a warning if a service was not caught or do nothing\n            }\n        }\n    }\n}\n</code></pre> <pre><code>void applyConsent(List&lt;UsercentricsServiceConsent&gt;? consents) {\n  consents?.forEach((service) {\n    switch (service.templateId) {\n      case \"diWdt4yLB\": // Google Analytics for Firebase Template ID\n\n        // Google Firebase Consent Mode API\n        applyConsentToFirebase(service.status) // See iOS and Android examples\n        initializeFirebase()    \n\n        break;\n      case \"x-XXXxXx\": // Other Service Template ID\n        // Initialize or pass consent to framework with service.status\n        break;\n      default:\n        // Log a warning if a service was not caught or do nothing\n    }\n  });\n}\n</code></pre> <pre><code>import { UsercentricsServiceConsent } from '@usercentrics/react-native-sdk';\n\nconst applyConsents = (consents: [UsercentricsServiceConsent]) =&gt; {\n    consents.forEach(service =&gt; {\n        switch (service.templateId) {\n            case \"diWdt4yLB\": // Google Analytics for Firebase Template ID\n\n                // Google Firebase Consent Mode API\n                applyConsentToFirebase(service.status) // See iOS and Android examples\n                initializeFirebase()\n                break;\n\n            // Other Service Template ID\n            case \"x-XXXxXx\":\n                // Initialize or pass consent to framework with service.status\n                break;\n\n            default:\n                // Log a warning if a service was not caught or do nothing\n        }\n    });\n}\n</code></pre> <p>Not all APIs are created equal</p> <p>Please make sure you read through each documentation, as many providers might require other steps to fully be complaint.</p>"},{"location":"apps/integration/apply-consent/#sdks-without-a-consent-api","title":"SDKs without a consent API","text":"<p>For SDKs that track user/device data and do not offer a consent API, the only solution is to not initialize those SDKs, when a user did not provide consent.</p> iOSAndroidFlutterReact Native <pre><code>func applyConsent(with consents: [UsercentricsServiceConsent]) {\n    for service in consents {\n        switch service.templateId {\n        case \"x-XXXxXx\": // Template ID\n\n            // Only initialize an SDK if consent has been given\n            if service.status { initializeSDK() }\n\n        case \"x-xXX-Xx\": // Other Service Template ID\n            //Initialize framework based on service.status\n        default:\n            // Log a warning if a service was not caught or do nothing\n        }\n    }\n}\n</code></pre> <pre><code>fun applyConsent(consents: List&lt;UsercentricsServiceConsent&gt;?) {\n    consents?.forEach { service -&gt;\n        when (service.templateId) {\n            \"x-XXXxXx\" -&gt; { // Template ID\n                // Only initialize an SDK if consent has been given\n                if (service.status) {\n                    initializeSDK()\n                }\n            }\n            \"x-xXX-Xx\" -&gt; { // Other Template ID\n                //Initialize framework based on service.status\n            }\n            else -&gt; {\n                // Log a warning if a service was not caught or do nothing\n            }\n        }\n    }\n}\n</code></pre> <pre><code>void applyConsent(List&lt;UsercentricsServiceConsent&gt;? consents) {\n  consents?.forEach((service) {\n    switch (service.templateId) {\n      case \"x-XXXxXx\": // Template ID\n        // Only initialize an SDK if consent has been given\n        if (service.status) {\n          initializeFirebase();\n        }\n        break;\n\n      case \"x-xXX-Xx\": // Other Template ID\n        // Initialize framework based on service.status\n        break;\n\n      default:\n        // Log a warning if a service was not caught or do nothing\n    }\n  });\n}\n</code></pre> <pre><code>import { UsercentricsServiceConsent } from '@usercentrics/react-native-sdk';\n\nconst applyConsents = (consents: [UsercentricsServiceConsent]) =&gt; {\n    consents.forEach(service =&gt; {\n        switch (service.templateId) {\n            case \"x-XXXxXx\": // Template ID\n                // Only initialize an SDK if consent has been given\n                if (service.status) {\n                    // initializeSDK();\n                }\n                break;\n\n            // Other Service Template ID\n            case \"x-xXX-Xx\":\n                // Initialize framework based on service.status\n                break;\n\n            default:\n                // Log a warning if a service was not caught or do nothing\n        }\n    });\n}\n</code></pre>"},{"location":"apps/integration/apply-consent/#tcf-vendors-following-the-iabs-tcf-22-standard","title":"TCF Vendors following the IAB's TCF 2.2 standard","text":"<p>When using third party services that are certified as TCF Vendors, you will need to declare these services via the Global Vendor List (GVL) tab, in the Service Settings section of your TCF configuration.</p> <p></p> <p>Given you have selected your TCF Vendors in the GVL and published the changes, when a user provides consent, the SDK will generate an encoded string with the consent for these vendors according to the TCF 2.2 standard, called:</p>"},{"location":"apps/integration/apply-consent/#tc-string","title":"TC String","text":"<p>As specified by the IAB, the collected consent for IAB Vendors will be encoded into a TCString and stored locally in <code>NSUserDefaults</code>(iOS) or <code>SharedPreferences</code>(Android).</p> <p>In most cases, the Vendor SDK might automatically pull the TCString, and apply consent to itself automatically. In case the vendor SDK requires you to pass the TCString programmatically, you may use:</p> iOSAndroidFlutterReact Native <pre><code>UsercentricsCore.shared.getTCFData() { tcfData in\n    let tcString = tcfData.tcString\n}\n</code></pre> <pre><code>Usercentrics.instance.getTCFData { tcfData -&gt;\n    val tcString = tcfData.tcString\n}\n</code></pre> <pre><code>Usercentrics.getTCString();\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\nconst tcString = await Usercentrics.getTCFString();\n</code></pre> <p>Alternatively, you can also find it directly in memory with their specific Key.</p> iOSAndroid <pre><code>let defaults = UserDefaults.standard\nlet tcString = defaults.string(forKey: \"IABTCF_TCString\")\n</code></pre> <pre><code>val preferences = PreferenceManager.getDefaultSharedPreferences(this)\nval tcString = preferences.getString(\"IABTCF_TCString\")\n</code></pre>"},{"location":"apps/integration/collect-consent/","title":"Collecting Consent with Usercentrics UI","text":"<p>Usercentrics UI is a native UI component designed to own all the complexity of compliance, while also allowing different levels of customization.</p> <p>This component consists of 2 Layers:</p> <p> </p>"},{"location":"apps/integration/collect-consent/#first-layer","title":"First Layer","text":"<p>The First Layer is designed to be friendly to end-users, compact and highly customizable. This layer can be presented in 3 different ways:</p> PopupSheetFull <p></p> <p></p> <p></p> <p>Recommendation</p> <p>Use the First Layer when collecting consent for the first time or when prompting updates to the consent services. Remember that user's will be able to navigate from the First Layer to the Second Layer.</p> <p>To present the First Layer, simply create an instance of <code>UsercentricsBanner</code>, and call <code>showFirstLayer()</code>. Once the user provides their consent choices, a userResponse object will be returned.</p> iOSAndroidFlutterReact Native <pre><code>let banner = UsercentricsBanner()\nbanner.showFirstLayer() { userResponse in\n    // Handle userResponse\n}\n</code></pre> Passing a specific HostView <p>You may also pass a specific HostView as a parameter of <code>showSecondLayer(hostView: &lt;UIViewController&gt;)</code>. If not provided, the SDK will resolve the HostView from the presented view controller of the first window.</p> Support for Swift UI <p>Support for Swift UI is available starting v2.7.6.  On our iOS Sample App you can find an example of how to integrate with SwiftUI. <pre><code>let banner = UsercentricsBanner()\nbanner.showFirstLayer(layout: &lt;UsercentricsLayout&gt;) { userResponse in\n    // Handle userResponse\n}\n</code></pre></p> <pre><code>val banner = UsercentricsBanner(&lt;Context&gt;)\nbanner.showFirstLayer() { userResponse -&gt;\n    // Handle userResponse\n}\n</code></pre> <p>Use a valid Context</p> <p>We are using the <code>Dialog</code> Android API for the Banner implementation.  It is recommended to use a <code>Context</code> that is an <code>Activity</code> or derived/wrapper from it. Note that the <code>Activity</code> has to be alive for the dialog to be displayed.</p> <pre><code>final userResponse = await Usercentrics.showFirstLayer();\n// Handle userResponse\n</code></pre> <pre><code>const userResponse = await Usercentrics.showFirstLayer();\n// Handle userResponse\n</code></pre>"},{"location":"apps/integration/collect-consent/#second-layer","title":"Second Layer","text":"<p>The Second Layer is designed to own all the complexity of compliance, declare all legally required information and allow for granular choices.</p> <p></p> <p>Recommendation</p> <p>Use the Second Layer to allow users to review their choices from your apps settings.</p> <p>To present the Second Layer, similarly create an instance of <code>UsercentricsBanner</code>, and call <code>showSecondLayer()</code>. The same userResponse object will be returned here as well.</p> iOSAndroidFlutterReact Native <pre><code>let banner = UsercentricsBanner()\nbanner.showSecondLayer() { userResponse in\n    // Handle userResponse\n}\n</code></pre> Passing a specific HostView <p>You may also pass a specific HostView as a parameter of <code>showSecondLayer(hostView: &lt;UIViewController&gt;)</code>. If not provided, the SDK will resolve the HostView from the presented view controller of the first window.</p> Support for Swift UI <p>Support for Swift UI is available starting v2.7.6.  On our iOS Sample App you can find an example of how to integrate with SwiftUI. <pre><code>let banner = UsercentricsBanner()\nbanner.showSecondLayer() { userResponse in\n    // Handle userResponse\n}\n</code></pre></p> <pre><code>val banner = UsercentricsBanner(&lt;Context&gt;)\nbanner.showSecondLayer() { userResponse -&gt;\n    // Handle userResponse\n}\n</code></pre> <p>Use a valid Context</p> <p>We are using the <code>Dialog</code> Android API for the Banner implementation.  It is recommended to use a <code>Context</code> that is an <code>Activity</code> or derived/wrapper from it. Note that the <code>Activity</code> has to be alive for the dialog to be displayed.</p> <pre><code>final userResponse = await Usercentrics.showSecondLayer();\n// Handle userResponse\n</code></pre> <pre><code>const userResponse = await Usercentrics.showSecondLayer();\n// Handle userResponse\n</code></pre>"},{"location":"apps/integration/collect-consent/#handling-userresponse","title":"Handling UserResponse","text":"<p>The <code>userResponse</code> object provided in the callback of <code>UsercentricsBanner.showLayer()</code>, contains the following information:</p> Properties Type Notes consents [UsercentricsServiceConsent] List of the user's consent choices needed to apply consent. userInteraction Enum <ul><li>AcceptAll: User accepted all services. <li>DenyAll: User denied all service. <li>Granular: User gave a granular choice, <li>No Interaction: User dismissed the Banner with no response.  controllerId String A Usercentrics generated ID, used to identify a specific user. This value is required when using Cross-Device Consent Sharing. <p>You have successfully collected consent! \ud83d\ude80</p> <p>Now, it is fundamental that the user's privacy choices are applied to the 3<sup>rd</sup> party SDKs on you App. Please continue to Apply Consent.</p>"},{"location":"apps/integration/configure/","title":"Configuring Usercentrics","text":"<p>Once you have installed the Usercentrics SDK, you will need an account to configure your consent banner.</p> <p>Depending on your setup:</p> <ul> <li>Initialize Usercentrics with a RulesetID, if you are using GeoLocation Rules, and wish to target users based on their location.</li> <li>Initialize Usercentrics with a SettingsID, if you want to have one specific configuration, regardless of user location.</li> </ul> Where to find a RulesetID or SettingsID? RulesetIDSettingsID <p></p> <p></p> <p>Both values should not be used at the same time</p>"},{"location":"apps/integration/configure/#device-options","title":"Device Options","text":"<p>In addition to the <code>SettingsID</code>, you may also configure the following options to control different behaviours at a device-level:</p> Property Type Notes rulesetId String A Usercentircs generated ID, used to identify a bundle of CMP configurations to be used depending on the user's location. settingsID String A Usercentrics generated ID, used to identify a unique CMP configuration. defaultLanguage String Selected based on our language selection hierarchy. This property defines the language used to render the banner.  e.g. \"en\", \"de\", \"fr\". version String To freeze the configuration version shown to your users, you may pass a specific version here. You may find an overview of all versions in your Configuration Dashboard under Configuration &gt; History &gt; Settings History &gt; Version (Column) or Implementation &gt; Script Tag &gt; Version History. e.g. \"3.0.4\". Passing \"latest\" (default) will fetch the latest version of your CMP configuration. Passing \"preview\" will fetch the latest draft of your CMP configuration. timeoutMillis Int Timeout for network requests in milliseconds. We do NOT recommend overwriting this field unless absolutely necessary or for debugging reasons, as well as using any values under 5,000 ms. Default is 10,000 ms (10s). loggerLevel Enum Provides a set of logs for operations being executed in the SDK. debug: includes every other level, warning: non-problematic operations, error: relevant logs to any blocking problems and none (default). consentMediation Bool Enable Consent Mediation, an automated way to pass consent to 3<sup>rd</sup> party frameworks."},{"location":"apps/integration/configure/#language-selection-hierarchy","title":"Language Selection Hierarchy","text":"<p>The SDK uses the following hierarchy, when deciding which language to load on init:</p> <p></p> <p>On first init, Default Language<sup>1</sup> <sup>2</sup> will have first priority, then Device language<sup>1</sup> <sup>2</sup> and finally a hard default to the first language available in your configuration. Once a language has been selected, it will be stored. Any following SDK initializations will use the Stored Language <sup>3</sup>.</p> <ol> <li> <p>To be supported, a language needs to be added and set as visible in the Configuration Dashboard, under Configuration &gt; Setup &gt; Language Settings.\u00a0\u21a9\u21a9</p> </li> <li> <p>This value will only be checked during the first SDK initialized. Afterwards, the stored languages will be used.\u00a0\u21a9\u21a9</p> </li> <li> <p>If a user explicitly selects a new language in the Usercentrics UI, or the language is changed programmatically after init, the stored languages will be updated and take priority in the future.\u00a0\u21a9</p> </li> </ol>"},{"location":"apps/integration/initialize/","title":"Initializing Usercentrics","text":"<p>Before we get started with the integration, let's review some basics on when to initialize Usercentrics and legal requirements.</p>"},{"location":"apps/integration/initialize/#when-to-present-the-banner","title":"When to present the banner?","text":"<p>In general, you are free to decide when to present the banner to your users. e.g. Right after app launch, after login, during app onboarding, etc.</p> <p>There are only 2 requirements when deciding when to do this:</p> <p>Requirement 1</p> <p>Do NOT enable any data tracking from 3<sup>rd</sup> party services/SDKs before a user has given explicit consent. This would otherwise be a breach of data protection regulations, which can result in heavy fines.</p> <p>Requirement 2</p> <p>Don't forget Requirement 1.</p>"},{"location":"apps/integration/initialize/#initialize-usercentrics","title":"Initialize Usercentrics","text":"<ol> <li> <p>Import <code>Usercentrics</code>, configure your options and call the init method of the SDK:</p> iOSAndroidFlutterReact Native <pre><code>// On AppDelegate\nimport Usercentrics\n\nlet options = UsercentricsOptions(settingsId: &lt;SettingsID&gt;)\nUsercentricsCore.configure(options: options)\n</code></pre> <pre><code>// On Application\nimport com.usercentrics.sdk.*\n\nval options = UsercentricsOptions(settingsId = &lt;SettingsID&gt;)\nUsercentrics.initialize(this, options)\n</code></pre> <pre><code>// e.g place this inside the [initState] of the Entry Point Widget\nimport 'package:usercentrics_sdk/usercentrics_sdk.dart';\n\nUsercentrics.initialize(\n    settingsId: &lt;SettingsID&gt;,\n);\n</code></pre> <pre><code>// On your App entrypoint\nimport { Usercentrics, UsercentricsOptions } from '@usercentrics/react-native-sdk';\n\n// React hooks\nuseEffect(() =&gt; {\n    let options = new UsercentricsOptions(&lt;SettingsID&gt;);\n    Usercentrics.configure(options);\n}, []);\n\n// Or via constructor\nconstructor(props: any) {\n    super(props)\n\n    let options = new UsercentricsOptions(&lt;SettingsID&gt;)\n    Usercentrics.configure(options)\n}\n</code></pre> <p>First Init</p> <p>We recommend initializing the SDK in the background as soon as possible after app launch to avoid any loading delays. After the first init, the SDK will cache essential data and following initializations will be immediate.</p> Resetting the SDK <p>Use reset() to clean all local storage and release the initialized instance. You will need to initialize the SDK again after a reset. Make sure you validate the expected behaviour, before using reset in production.</p> Switching SettingsIDs <p>If you need to switch SettingsIDs during runtime, just reinitialize the SDK with the new SettingsID. This will automatically trigger a reset(), and initialize the new configuration.</p> </li> <li> <p>Use <code>isReady</code> to fetch the latest consent status. This status will let you know if you need to show the banner to collect consent or only apply the already collected consent.</p> iOSAndroidFlutterReact Native <pre><code>import Usercentrics\n\nUsercentricsCore.isReady { [weak self] status in\n    guard let self = self else { return }\n    if status.shouldCollectConsent {\n        // Show banner to collect consent\n    } else {\n        // Apply consent with status.consents\n    }\n} onFailure: { error in \n    // Handle non-localized error\n}\n</code></pre> <pre><code>import com.usercentrics.sdk.*\n\nUsercentrics.isReady({ status -&gt;\n    if (status.shouldCollectConsent) {\n        // Show banner to collect consent\n    } else {\n        // Apply consent with status.consents\n    }\n}, { error -&gt;\n    // Handle non-localized error\n})\n</code></pre> <pre><code>import 'package:usercentrics_sdk/usercentrics_sdk.dart';\n\ntry {\n    final status = await Usercentrics.status;\n    if (status.shouldCollectConsent) {\n        // Show banner to collect consent\n    } else {\n        // Apply consent with status.consents\n    }\n} catch (error) {\n    // Handle non-localized error\n}\n</code></pre> <pre><code>import { Usercentrics } from '@usercentrics/react-native-sdk';\n\ntry {\n    const status = await Usercentrics.status();\n    if (status.shouldCollectConsent) {\n        // Show banner to collect consent\n    } else {\n        // Apply consent with status.consents\n    }\n} catch(error) {\n    // Handle error\n}\n</code></pre> <p>Wait for isReady</p> <p>It is required that you wait until isReady is called to use any SDK methods. Not doing so could lead to a crash, as methods called when the SDK has not finished initializing will return an exception.</p> </li> <li> <p>Once you are ready to collect consent, use the status object returned in <code>isReady</code> to know if you <code>shouldCollectConsent</code> or if consent has already been collected.</p> iOSAndroidFlutterReact Native <pre><code>UsercentricsCore.isReady { [weak self] status in\n    guard let self = self else { return }\n    if status.shouldCollectConsent {\n        self.collectConsent()\n    } else {\n        // Apply consent with status.consents\n    }\n} onFailure: { error in\n    // Handle non-localized error\n}\n</code></pre> <pre><code>Usercentrics.isReady({ status -&gt;\n    if (status.shouldCollectConsent) {\n        collectConsent()\n    } else {\n        // Apply consent with status.consents\n    }\n},{ error -&gt;\n    // Handle non-localized error\n})\n</code></pre> <pre><code>try {\n    final status = await Usercentrics.status;\n    if (status.shouldCollectConsent) {\n        collectConsent();\n    } else {\n        // Apply consent with status.consents\n    }\n} catch (error) {\n    // Handle non-localized error\n}\n</code></pre> <pre><code>try {\n    const status = await Usercentrics.status();\n\n    if (status.shouldCollectConsent) {\n        collectConsent();\n    } else { \n        // Apply consents with status.consents\n    } \n} catch(e) { \n    // Handle non-localized error \n}\n</code></pre> </li> </ol> <p>Inside <code>collectConsent()</code>, you will be presenting the consent banner.</p>"},{"location":"apps/integration/initialize/#presenting-the-consent-banner","title":"Presenting the Consent Banner","text":"<p>In order to present the banner, we offer different options depending on your needs:</p>"},{"location":"apps/integration/initialize/#usercentricsui","title":"UsercentricsUI","text":"<p>An out-of-the-box UI component, that owns all the complexity of compliance, designed to be highly customizable. Continue to Collecting Consent with UsercentricsUI.</p> <p></p>"},{"location":"apps/integration/initialize/#build-you-own-ui","title":"Build you own UI","text":"<p>Use our SDK as a data source and render your own consent banner from scratch. Continue to Build your own UI.</p> <p></p>"},{"location":"apps/integration/initialize/#hybrid","title":"Hybrid","text":"<p>If you need a \"in between\" solution, we encourage you to mix these two approaches to get the best of both worlds.</p> <p></p> e.g. Create your own first layer banner, and let UsercentricsUI take care of the complexity on a second layer."},{"location":"apps/integration/install/","title":"Installing the Usercentrics SDK","text":"iOSAndroidFlutterReact Native"},{"location":"apps/integration/install/#ios","title":"iOS","text":"<p>Prerequisites</p> <ul> <li>iOS 11 or higher</li> </ul>"},{"location":"apps/integration/install/#cocoapods","title":"CocoaPods","text":"<ol> <li>In case you haven't, please install CocoaPods and follow these instructions to setup you project.</li> <li> <p>On your Podfile, add the following line:</p> UsercentricsCore + Usercentrics UIUsercentricsCore <pre><code>platform :ios, '11.0'\nuse_frameworks!  \n\npod 'UsercentricsUI'\n</code></pre> <pre><code>platform :ios, '11.0'\nuse_frameworks!  \n\npod 'Usercentrics'\n</code></pre> </li> <li> <p>On the root directory of your project, run the following command to install the pod. <pre><code>pod install\n</code></pre></p> </li> <li> <p>Open your .xcworkspace file.</p> </li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/integration/install/#swift-package-manager-spm","title":"Swift Package Manager (SPM)","text":"<p>From Xcode 11 and above, you can use Swift Package Manager to install our SDK.</p> <ol> <li> <p>On Xcode, Select File &gt; Swift Packages &gt; Add Package Dependency.</p> </li> <li> <p>Enter the package repository URLs:</p> UsercentricsCore + Usercentrics UIUsercentricsCore <pre><code>https://bitbucket.org/usercentricscode/usercentrics-spm-sdk\nhttps://bitbucket.org/usercentricscode/usercentrics-spm-ui\n</code></pre> <pre><code>https://bitbucket.org/usercentricscode/usercentrics-spm-sdk\n</code></pre> </li> <li> <p>Select the version you would like to use. We recommend sticking to \"Up to Next Major\" with the latest release as minor version.</p> </li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/integration/install/#manual","title":"Manual","text":"<ol> <li>Download and unzip the latest version of our SDKs: UsercentricsCore and UsercentricsUI. </li> <li>Drag and drop .xcframework file to your Xcode project.</li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/integration/install/#android","title":"Android","text":"<p>Prerequisites</p> <ul> <li>Android 4.1 (API 16) and higher</li> </ul>"},{"location":"apps/integration/install/#gradle","title":"Gradle","text":"<ol> <li> <p>If not present, add Maven Central repository URL to your top-level build.gradle file: <pre><code>allprojects {\n    repositories {\n        mavenCentral()\n    }\n}\n</code></pre></p> </li> <li> <p>Add the dependency to your app's build.gradle:</p> UsercentricsCore + Usercentrics UIUsercentricsCore <pre><code>dependencies {\n    implementation \"com.usercentrics.sdk:usercentrics-ui\"\n}\n</code></pre> <pre><code>dependencies {\n    implementation \"com.usercentrics.sdk:usercentrics\"\n}\n</code></pre> </li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/integration/install/#manual_1","title":"Manual","text":"<ol> <li>Download and the latest version of our SDKs: Usercentrics Core and Usercentrics UI.</li> <li>Note that we are using other libraries that may be required to be download, the POM file is available in both links above.</li> <li>In case the dependencies are being handled manually, move all .aar and .jar files to your project, if not, upload them to your Nexus solution.</li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/integration/install/#flutter","title":"Flutter","text":"<p>Prerequisites</p> <ul> <li>Android 4.1 (API 16) or higher with Kotlin 1.7 or higher</li> <li>iOS 11 or higher</li> <li>Dart 2.12 or higher</li> <li>Flutter 1.20 or higher</li> </ul> <p>To meet the prerequisites:</p> Android with Kotlin version lower than 1.7 <p>If you have an incompatible Kotlin version you may see the following error when you run app on Android: <pre><code>e: Incompatible classes were found in dependencies. Remove them from the classpath or use '-Xskip-metadata-version-check' to suppress errors\n</code></pre> This error is easy to solve, you only need to increase the version that is usually in the <code>android/build.gradle</code> file. Use a recent stable Kotlin version, for example: <code>1.5.31</code>. </p> Android version lower than 5.0 (API 21) <p>If you support an Android version lower than 5.0 (API 21) and you don't have the multidex enabled in your project, you may see the following error when you run your app on Android: <pre><code>D8: Cannot fit requested classes in a single dex file (# methods: 66055 &gt; 65536)\n</code></pre></p> <p>You can change the minimum version of your application to 5.0 (API 21). That configuration is usually in the <code>android/app/build.gradle</code> file. Make sure that <code>minSdkVersion</code> is <code>21</code> or higher.</p> <p></p> <p>Although Android 5.0 version already supports 99% of all devices, if you still want to have support for Android 4.1 (API 16) you have to do the following:</p> <ol> <li> <p>Add the multidex library to your application dependencies that is usually in the <code>android/app/build.gradle</code> file.     <pre><code>implementation \"androidx.multidex:multidex:2.0.1\"\n</code></pre> </p> </li> <li> <p>Enable the option in the application build <code>defaultConfig</code>. It is usually in the same <code>android/app/build.gradle</code> file.     <pre><code>multiDexEnabled true\n</code></pre> </p> </li> <li> <p>Make your application class initialize multidex. There are several options to do that, in Flutter the easiest way is to add it to the manifest. The manifest is usually located at <code>android/app/src/main/AndroidManifest.xml</code>.     <pre><code>android:name=\"androidx.multidex.MultiDexApplication\"\n</code></pre> </p> </li> </ol> iOS version lower than 11 <p>If you have a iOS target version lower than 11 or you have no version at all (it defaults to version 9) you may see the following error when you run your app on iOS: <pre><code>[!] Automatically assigning platform `iOS` with version `9.0` on target `Runner` because no platform was specified. Please specify a platform for this target in your Podfile. See `https://guides.cocoapods.org/syntax/podfile.html#platform`.\n</code></pre> This error is easy to solve, you have to do the following:</p> <ol> <li> <p>Define or increase the version of your Podfile at least to version 11. It is usually located at <code>ios/Podfile</code>. <pre><code>platform :ios, '11.0'\n</code></pre> </p> </li> <li> <p>Run <code>flutter pub get</code> again and open the iOS project using Xcode. It is usually located at <code>ios/Runner.xcworkspace</code>. Now, you have to select the <code>Runner</code> project and change the <code>Deployment Target</code> to the same version. </p> </li> </ol>"},{"location":"apps/integration/install/#pubdev","title":"Pub.dev","text":"<ol> <li> <p>Add Usercentrics to your project via pub.dev:</p> <pre><code>flutter pub add usercentrics_sdk\n</code></pre> </li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/integration/install/#react-native","title":"React Native","text":"<p>Prerequisites</p> <ul> <li>Android 5.0 (API 21) or higher with Kotlin 1.7 or higher</li> <li>iOS 11 or higher</li> <li>React Native 0.65 or higher</li> <li>React 17.0 or higher</li> </ul>"},{"location":"apps/integration/install/#npm","title":"npm","text":"<ol> <li> <p>Add Usercentrics to your project using npm:</p> <pre><code>npm i @usercentrics/react-native-sdk\n</code></pre> </li> </ol> <p>You are now ready to start integrating Usercentrics! \ud83d\ude80</p>"},{"location":"apps/resources/demos/","title":"Demo Apps","text":"<p>To get a feeling of our SDK and test it's behaviour, we have provided a Demo App showcasing UsercentricsUI. You may play around with one of our Demo Accounts, or add your own configuration.</p> <p>To get started, click on Tap to Play. Once the app has loaded, select a demo configuration from the list or add your <code>SettingsID</code> by clicking +. You may present the First Layer, Second Layer or our Web SDK on a mobile Webview.</p> iOS Demo AppAndroid Demo App <p> Try on other devices</p> <p> Try on other devices</p>"},{"location":"apps/resources/samples/","title":"Sample Apps","text":"<p>Please find sample implementations in the following repos:</p> <ul> <li>iOS Sample App</li> <li>Android Sample App</li> <li>Flutter Sample App</li> <li>React Native Sample App</li> </ul> <p>These examples provide an overview of setup, UsercentricsUI implementation and the API needed to build your own CMP.</p>"},{"location":"config/account-config/","title":"Setting up your Account","text":"<p>Welcome to Usercentrics! Let's get you started with setting up your account, and making sure you are making the best out of our CMP.</p> <p>First, log in to your account with the email you registered during signup. </p> <p></p> <p>Once logged in, you will have access to your dashboard:</p>"},{"location":"config/account-config/#configurations","title":"Configurations","text":"<p>Here you can create new configurations with the following criteria: </p> <ul> <li> <p>Legal Framework: Choose the legal framework that you would like to target to a region or country.</p> <p></p> </li> <li> <p>Platform: Our CMP has dedicated features and configurations for Web and Apps.</p> <p>Dependent on your Subscription</p> <p>Given your subscription or trial, all configuration will default to the platform that you selected during signup. In case you have a subscription to both platforms, during the configuration creation flow, you will be able to choose a Platform.</p> <p></p> </li> <li> <p>Configuration Details: Configuration metadata to keep things in order.</p> </li> </ul> <p>Now that you have a new configuration, you may continue to Banner Configuration</p>"},{"location":"config/account-config/#geolocation-rulesets","title":"Geolocation Rulesets","text":"<p>Here you can define regions to target specific configuration. You may also define a default, which will be used to target any user that is outside of the defined regions. In this case, you may choose to not show a banner at all.</p> <p></p>"},{"location":"config/account-config/#user-management","title":"User Management","text":"<p>Invite and Manage User permission for stakeholders in your organization.</p> <p></p>"},{"location":"config/account-config/#company-details","title":"Company Details","text":"<p>Overview of your company details, and edit Mode.</p>"},{"location":"config/account-config/#do-you-need-further-help","title":"Do you need further help?","text":"<p>See our Customer Support Portal</p>"},{"location":"config/banner-config/","title":"Setting up a Banner Configuration","text":"<p>From your Configurations Dashboard, select any configuration, and a new window will open. This is your Banner Configuration Dashboard:</p>"},{"location":"config/banner-config/#configuration","title":"Configuration","text":"SetupLegal SpecificationsCMP Settings <p>Here you will find the mandatory fields:</p> <ul> <li>Configuration Name: Give your configuration a meaningul name to easily identify it.</li> <li> <p>Data Controller: Name of legal entity collecting consent. </p> </li> <li> <p>Domain Settings: [Web Configurations only] Domains where banner should be permitted.</p> </li> <li>Published Apps: [App Configurations only] Declair published apps to enable App Scanner.</li> </ul> <p>and Language Settings:</p> <ul> <li>Language Settings: Languages that will be available when adding translations. </li> <li>Visible Languages: Languages the CMP will support and will be available in the language toggle.</li> </ul> <p>Depending the selected legal framework, this section will show options related to the regulation.</p> <p>Find CMP settings to enable functionality such as: </p> <ul> <li>Cross-Domain Consent Sharing [Web]</li> <li>Google Consent Mode, </li> <li>Banner Resurfacing options</li> <li>Bot Detection[Web].</li> </ul>"},{"location":"config/banner-config/#service-settings","title":"Service Settings","text":"DPS &amp; App ScannerData Processing ServicesGlobal Vendor ListCategories <p>For both Websites and published mobile Apps, we provide a scanner that will identify third party technologies and map them to Data Processing Services, that you can add to your configuration in a few steps.</p> <p>A Data Processing Service (DPS) represents any third party vendor or technology running on your website or mobile app. </p> <p>There are 4 ways to add a DPS:</p> <ul> <li>Add a DPS via Scanner Results: When running a scan, results will be presented to you, and you may add DPSs directly from there.</li> <li>Add a DPS via Database: Search for a DPS by the vendor's name on our database. e.g. Adjust, Firebase, Twitter, etc.</li> <li>Create a Custom DPS: If you have custom technologies or your legal team would like to have more control over the languages used in the DPS, you may create new ones from scratch.</li> <li>Customize Predefined Service: Create your own DPS, starting with an already existing template.</li> </ul> <p>Only for TCF configurations</p> <p>Declare TCF certified vendors in order to pass consent via the TCString. Please consider that if you declare a vendor in the Global Vendor List, you do not need to add them again as a DPS.</p> <p>Bundle Data Processing Services in Categories for easier user overview:</p> <ul> <li>Categories for Marketing, Functional and Essential are set by default, but you can create, modify and delete categories as you need.</li> <li>All Data Processing Services need to be assigned to a category.</li> </ul>"},{"location":"config/banner-config/#appearance","title":"Appearance","text":"LayoutStyling <p>Here you will find a set of different banner layouts that you can use to render your banner, as well as customization options for the UI.</p> <p>Customize the style of your banner:</p> <ul> <li>Colors: Set colors for Tabs and Button Text and Background individually.</li> <li>Font: Set fonts and size for the text of the CMP. Note that the device system needs to support the font in order for this setting to work, otherwise, please inject your font programmatically.</li> <li>Logo: Provide a .png image URL that can be rendered at the top of the banner. Position can also be edited.</li> </ul>"},{"location":"config/banner-config/#content","title":"Content","text":"First LayerSecond LayerLabels <p>Define content and links for the Banner's First Layer:</p> <ul> <li>Title: Header title of First Layer.</li> <li>Banner Message: Use this space to clarify why you need to track user data and what kind of data you are tracking. </li> <li>Imprint &amp; Privacy Links: Provide links to your legal documents. Links &amp; titles can be edited, if you would like to expose other links. </li> </ul> <p>Define content for the Banner's Second Layer:</p> <ul> <li>Title: Header title of Second Layer.</li> <li>Description: Use this space to provide a description of the services you use and their purpose. </li> </ul> <p>Customize and provide translations:</p> <ul> <li>Buttons: Edit the labels and add translations to all action buttons in the CMP.</li> <li>History: Edit the labela and add translations to history entries found in each service description.</li> </ul>"},{"location":"config/banner-config/#analytics","title":"Analytics","text":"Interaction Analytics OverviewInteraction Analytics Comparison <p>These dasboards will give you an overview of your user's behaviour:</p> <ul> <li>Displays: Times the banner has been shown.</li> <li>Interactions: Times users have saved consent in any direction.</li> <li>Ignores: Displays - Interactions. This number needs to be interpreted depending on your configuration.</li> </ul> <p>The second dashboard \"User Acceptance\" will give you a distribution of the type of interactions customers had with your banner. e.g. Accept, Deny, Custom.</p> <p>Get a comparison board to segregate users consent by country, device type and even banner layer.</p>"},{"location":"config/banner-config/#integrations","title":"Integrations","text":"<p>A marketplace of third party integrations that you can enable with Usercentrics.</p>"},{"location":"config/banner-config/#implementation","title":"Implementation","text":"<p>An overview on how to implement the Web or App SDKs, Version History and A/B Testing.</p>"},{"location":"config/banner-config/#do-you-need-further-help","title":"Do you need further help?","text":"<p>See our Customer Support Portal</p>"},{"location":"games/intro/","title":"Welcome!","text":"<p>We know monetization and user retention is important to you, and it's easy to think that privacy will be an obstacle for these metrics. But we are here to show you a better way, where you can improve your monetization strategy, boost user retention and become compliant with privacy regulations all at the same time.</p>"},{"location":"games/intro/#the-usercentrics-unity-sdk","title":"The Usercentrics Unity SDK","text":"<p>The Usercentrics Unity SDK helps you become compliant with privacy regulations such as GDPR (Europe) &amp; CCPA (US/California) and compliance standards like the IAB's TCF 2.2.</p> <p></p> <p>With our Drag and Drop integration, you will be compliant from the get go, and will have all our optimization and analytics features to unlock a better performance for your monetization and retention, while also being compliant with privacy compliance regulations.</p>"},{"location":"games/intro/#get-started","title":"Get started","text":"<p>Please create a Usercentrics account or starting a free trial in order to test the Usercentrics SDK.</p>"},{"location":"games/intro/#supported-legal-frameworks","title":"Supported Legal Frameworks","text":"<ul> <li>\ud83c\uddea\ud83c\uddfa GDPR - European Union's General Data Protection Regulation</li> <li>\ud83c\udf0e TCF 2.2 - IAB's Transparency &amp; Consent Framework 2.2</li> <li>\ud83c\uddfa\ud83c\uddf8 CCPA/CPRA and other US Frameworks - Regulations in US States</li> <li>\ud83c\udde7\ud83c\uddf7 LGPD - Brazil\u2019s Lei Geral de Prote\u00e7\u00e3o de Dados</li> <li>and many more...</li> </ul>"},{"location":"games/intro/#features","title":"Features","text":"<ul> <li>Easy installation via a package manager</li> <li>Methods to collect &amp; update consent</li> <li>Up-to-date legal information on more than 1,000 technology vendors</li> <li>UsercentricsUI is a plug &amp; play CMP solution with endless customization options</li> <li>Build your own CMP with our UsercentricsCore module, an API that provides all necessary data and action delegates</li> <li>Device language detection</li> <li>tvOS and Android TV support only when building your own CMP</li> <li>Share the same settingsID between multiple apps and web applications</li> <li>Cross-Device consent sharing</li> <li>Consent continuity between the app and embedded WebViews. (Browser SDK is required)</li> <li>Offline Handling</li> <li>Support for Landscape Mode</li> <li>Reporting of service Opt-In rates</li> <li>Reporting of User Interactions</li> </ul>"},{"location":"games/releases/","title":"Releases","text":""},{"location":"games/releases/#release-history","title":"Release History","text":"<p>The following table lists the details of the latest Usercentrics Unity SDK releases:</p> Version Release Date Release Notes 2.9.0 October 4, 2023 <ul><li>[TCF 2.2 Support] As the industry shifts to TCF 2.2 (deadline: November 20, 2024), we are pleased to announce that SDK Version 2.9.0 now offers comprehensive support for this new industry standard. \u26a0\ufe0fImportant Note: Please be aware that this version is incompatible with TCF 2.0. Before upgrading to V 2.9.0, ensure a smooth transition to TCF 2.2 following the guidelines on How to migrate from TCF v2.0 to TCF v2.2 </li><li>[Updated Global Vendor List] We've transitioned to Global Vendor List v3 to align with industry standards.</li><li>[Legitimate Interest] To enhance transparency and privacy, purposes 3 to 6 have been removed, and purpose 11 has been introduced.</li><li>[Improved User Interface] We've made enhancements to the banner's second layer for a better user experience.</li><li>[Vendor Count Display] Users can now easily see the total count of IAB and non-IAB vendors.</li><li>[New Resurface Requirements] We've implemented new resurfacing requirements to keep your CMP compliant with the latest standards.</li></ul> 2.8.7 July 12, 2023 <ul><li>[Unity] New <code>getCMPData</code> API, to unlock <code>activeVariant</code> and <code>publsihedApps</code> properties.</li><li>[Flutter &amp; React Native] Intraction Analytics tracking API is now available.</li><li>[Improvement] \"Default\" label value is now supported for consent history entries.</li><li>[Improvement] Enable support for Hidden Data Processing Services.</li></ul> 2.8.6 May 26, 2023 <ul><li>[Fix] <code>onConsentUpdated</code> event was not triggered after initialization.</li><li>[Fix] Solved issue with Boolean values being sent via consent mediation to Adjust </li><li>[Fix] Solved Apple TV labels being cut off</li><li>[Fix] Solved Android TV issue when showing TCF on 2<sup>nd</sup> layer.</li></ul> 2.8.5 May 08, 2023 <ul><li>[Feature] Add support to US Legal Frameworks.</li><li>[Deprecate] Remove deprecated method <code>showFirstLayer(layout: Layout)</code></li></ul> 2.8.4 April 17, 2023 <ul><li>[Feature] Supporting Limited Fields in Service Descriptions.</li><li>[Improvement] Accessibility in First and Second Layer.</li><li>[Improvement] Custom UI objects are getting the latest values.</li><li>[Fix] General issues.</li></ul> 2.8.3 March 23, 2023 <ul><li>[Fix] General issues.</li><li>[Fix] Switches were showing the wrong value on iOS when pressing too many times repeatedly.</li></ul> 2.8.0 March 03, 2023 <ul><li>[Fix] Issue when toggles were showing on second layer even though they were disabled.</li><li>[Fix] Issue where the first time the app was initialized using the method getTCString, the TCString comes out empty.</li><li>[Fix] Issue where DPSs accepted by default did not appear as accepted when opening second layer.</li></ul> 2.7.15 February 22, 2023 <ul><li>[Feature] Expose PUR enabling properties</li><li>[Improvement] Extend handling of edge case exceptions. </li><li>[Improvement] UI updates to CCPA banner variant. </li><li>[Fix] Issue with third party SDKs being included in POM file.</li></ul>"},{"location":"games/releases/#released-betas","title":"Released Betas","text":"<p>The following table lists the Beta features that are currently available:</p> <p>Beta Disclaimer</p> <p>These features are currently considered experimental. Please make sure you validate the functionality before pushing to production.</p> Feature Minimum Version Description Consent Mediation 2.7.0 To simplify the process of applying consent, we are adding a mediation feature, that is aware of the Consent API of selected SDKs, and will automatically apply/update consent as soon as it is captured."},{"location":"games/specifications/","title":"Technical Specifications","text":"<p>Please note that Package Size is just an estimate of the packages without any runtime storage.</p>"},{"location":"games/specifications/#supported-operating-systems","title":"Supported Operating Systems","text":"Operating System Package Size Version  iOS \u223c3MB 11 and higher  Android \u223c2MB 5.0 (API 21) and higher"},{"location":"games/specifications/#supported-game-engines","title":"Supported Game Engines","text":"Frameworks Package Size Version  Unity \u223c0.36MB 2018.4 and higher"},{"location":"games/api/core-api/","title":"Unity Core API","text":""},{"location":"games/api/core-api/#initialization","title":"Initialization","text":""},{"location":"games/api/core-api/#init","title":"Init","text":"<p>Called to configure and initialize Usercentrics after app launch</p> <pre><code>Usercentrics.Instance.Initialize((status) =&gt; {\n    // Success: Returns UsercentricsReadyStatus object\n}, (errorMessage) =&gt; {\n    // Failure: Returns non-localized error\n});\n</code></pre>"},{"location":"games/api/core-api/#show-usercentricsui-first-layer","title":"Show UsercentricsUI First Layer","text":"<p>When called, it will display First Layer.</p> <pre><code>Usercentrics.Instance.ShowFirstLayer(&lt;UsercentricsLayout&gt;, (userResponse) =&gt; {\n    // Handle userResponse\n});\n</code></pre>"},{"location":"games/api/core-api/#show-usercentricsui-second-layer","title":"Show UsercentricsUI Second Layer","text":"<p>When called, it will display the Second Layer.</p> <pre><code>Usercentrics.Instance.ShowSecondLayer(&lt;showCloseButton&gt; /* true/false */, (usercentricsConsentUserResponse) =&gt; {\n    // Handle userResponse\n});\n</code></pre>"},{"location":"games/api/core-api/#features","title":"Features","text":""},{"location":"games/api/core-api/#restore-user-session","title":"Restore user session","text":"<p>Restore Consents given by a user using its Controller ID.</p> <pre><code>Usercentrics.Instance.RestoreUserSession(&lt;controllerId&gt;, (status =&gt; {}), (errorString =&gt; {});\n</code></pre>"},{"location":"games/api/core-api/#reset","title":"Reset","text":"<p>Resets Usercentrics SDK, deleting all local data and forcing to be initialized again.</p> <pre><code>Usercentrics.Instance.Reset();\n</code></pre>"},{"location":"games/api/core-api/#accept-all","title":"Accept All","text":"<p>Signal to Usercentrics SDK that the Accept All button has been pressed by the user.</p> <pre><code>Usercentrics.Instance.AcceptAll();\n</code></pre>"},{"location":"games/api/core-api/#deny-all","title":"Deny All","text":"<p>Signal to Usercentrics SDK that the Deny All button has been pressed by the user.</p> <pre><code>Usercentrics.Instance.DenyAll();\n</code></pre>"},{"location":"games/api/core-api/#get-firstlayersettings","title":"Get FirstLayerSettings","text":"<p>For now, this method only returns First Layer data when using TCF Framework.</p> <pre><code>Usercentrics.Instance.GetFirstLayerSettings();\n</code></pre>"},{"location":"games/api/core-api/#helpers","title":"Helpers","text":""},{"location":"games/api/core-api/#platform-is-supported","title":"Platform is supported","text":"<p>Get if current selected platform is supported by Usercentrics.</p> <pre><code>Usercentrics.Instance.IsPlatformSupported();\n</code></pre>"},{"location":"games/api/core-api/#get-controller-id","title":"Get Controller ID","text":"<p>Catch user events if you are using Third Party Analytics tools.</p> <p>A Usercentrics generated ID, that represents the consent collected by a User. <pre><code>Usercentrics.Instance.GetControllerID();\n</code></pre></p>"},{"location":"games/api/core-api/#track","title":"Track","text":"<p>Track user events if you are building your own UI, and want to see these events in the Usercentrics Analytics Dashboard. <pre><code>Usercentrics.Instance.Track(&lt;usercentricsAnalyticsEventType&gt;);\n</code></pre></p>"},{"location":"games/api/core-api/#tcf-22-specific-methods","title":"TCF 2.2 Specific Methods","text":""},{"location":"games/api/core-api/#get-tcf-data","title":"Get TCF Data","text":"<p>Retrieve all data related to TCF 2.2, as well as the consent string. (TCString) Your CMP configuration needs to be set for TCF, otherwise this object will be empty.</p> <pre><code>Usercentrics.Instance.GetTCFData((tcfData) =&gt; {\n    var purposes = tcfData.purposes;\n    var specialPurposes = tcfData.specialPurposes;\n    var features = tcfData.features;\n    var specialFeatures = tcfData.specialFeatures;\n    var stacks = tcfData.stacks;\n    var vendors = tcfData.vendors;\n\n    // TCString\n    var tcString = tcfData.tcString;\n});\n</code></pre>"},{"location":"games/api/core-api/#ccpacpra-specific-methods","title":"CCPA/CPRA Specific Methods","text":""},{"location":"games/api/core-api/#get-ccpacpra-usp-data","title":"Get CCPA/CPRA (USP) Data","text":"<p>Retrieve all data related to CCPA/CPRA, as well as the consent string. (USPString) Your CMP configuration needs to be set for CCPA/CPRA, otherwise this object will be empty.</p> <pre><code>Usercentrics.Instance.GetUSPData();\n</code></pre>"},{"location":"games/api/event-api/","title":"Unity Event API","text":""},{"location":"games/api/event-api/#consent-listener","title":"Consent Listener","text":""},{"location":"games/api/event-api/#subscribe","title":"Subscribe","text":"<p>Subscribe to any consent updated event that happens within Usercentrics SDK This API is meant for third-parties, that need to pull consent from the Usercentrics SDK.</p> <pre><code>Usercentrics.Instance.SubscribeOnConsentUpdated((consentEvent) =&gt; {\n    // Handle consentEvent\n});\n</code></pre>"},{"location":"games/api/event-api/#consentevent","title":"ConsentEvent","text":"Property Type Notes consents UsercentricsServiceConsent List of Services with consent choices. controllerId String A Usercentrics generated ID, used to identify a specific user. See Restore User Session tcString String IAB's Transparency &amp; Consent String uspString String IAB's US Privacy String"},{"location":"games/api/event-api/#usercentricsserviceconsent","title":"UsercentricsServiceConsent","text":"Property Type Notes templateId String ID used to match a service with frameworks running on your app. See Applying Consent. status Bool Consent status given to this specific service. dataProcessor String Name of entity processing the data that was collected via this service. version String Legal template version. See Service Settings."},{"location":"games/api/event-api/#dispose-listener","title":"Dispose Listener","text":"<p>Dispose any subscription to this API.</p> <pre><code>Usercentrics.Instance.DisposeOnConsentUpdatedSubscription();\n</code></pre>"},{"location":"games/features/build_own_ui/","title":"Building your own UI","text":"<p>Only for IAB TCF 2.2 certified customers</p> <p>Currently you can only use this solution if you are building a Banner that adheres to the IAB's TCF 2.2 Standard. For this you will need to be certified as a CMP by the IAB.</p> <p>Use our Data Source and Action Delegates to fetch all the information you need to build you Banner, and add functionality.</p>"},{"location":"games/features/build_own_ui/#data-source","title":"Data Source","text":"<pre><code>//Fetch Banner properties to build you UI\nvar firstLayerSettings = Usercentrics.Instance.GetFirstLayerSettings();\nvar title = firstLayerSettings.title;\nvar description = firstLayerSettings.description;\n// see below the full list of fields available\n\n// IAB's TCF Data\nUsercentrics.Instance.GetTCFData((tcfData) =&gt; {\n    var purposes = tcfData.purposes;\n    var specialPurposes = tcfData.specialPurposes;\n    var features = tcfData.features;\n    var specialFeatures = tcfData.specialFeatures;\n    var stacks = tcfData.stacks;\n    var vendors = tcfData.vendors;\n    var tcString = tcfData.tcString;\n});\n</code></pre>"},{"location":"games/features/build_own_ui/#content-mapping","title":"Content Mapping","text":"First Layer SDK Property 1. First layer title firstLayerSettings.title 2. First layer description firstLayerSettings.description 3. First layer additional Info firstLayerSettings.additionalInfo 4. First layer resurface note firstLayerSettings.resurfaceNote 5. Vendorlist link title firstLayerSettings.vendorListLinkTitle 6. Manage settings link title firstLayerSettings.manageSettingsLinkTitle 7. Label purposes firstLayerSettings.purposesLabel 8. Label features firstLayerSettings.featuresLabel Buttons SDK Property 1. Accept all button title firstLayerSettings.acceptAllButton 2. Deny all button title firstLayerSettings.denyAllButton 3. Save button title firstLayerSettings.saveButton Vendors SDK Property 1. Label title vendor.name 2. Purpose Name vendor.purposes[n].[findByPurposeId].name 3. Legitimate Interest Purpose name vendor.legitimateInterestPurposes[n].[findByPurposeId].name 4. Special purpose name vendor.specialPurposes[n].[findByPurposeId].name 5. Feature name vendor.features[n].[findByPurposeId].name 6. Special Feature name vendor.specialFeatures[n].[findByPurposeId].name 7. Cookie refresh value vendor.cookieRefresh 8. Cookie Age value vendor.cookieMaxAgeSeconds 9. Cookie storage value vendor.usesCookie 10. Non-cookie storage value vendor.usesNonCookieAccess Purposes SDK Property 1. Label title purpose.name 2. Legitimate interest consent purpose.legitimateInterestConsent 3. Legal Description purpose.descriptionLegal 4. Purpose Description purpose.purposeDescription 5. Consent purpose.consent Special Purposes SDK Property 1. Label title specialPurpose.name 2. Legal Description specialPurpose.descriptionLegal 3. Purpose Description purpose.purposeDescription Features SDK Property 1. Label title feature.name 2. Legitimate interest consent feature.legitimateInterestConsent 3. Legal Description feature.descriptionLegal Special Features SDK Property 1. Label title specialFeature.name 2. Consent specialFeature.consent 3. Description specialFeature.purposeDescription 4. Legal Description specialFeature.descriptionLegal Stacks SDK Property 1. Label title stack.name 3. Description stack.description 3. Purposes stack.purposeIds 4. Special Features stack.specialFeatureIds"},{"location":"games/features/build_own_ui/#set-cmp-id","title":"Set CMP ID","text":"<p>When building your own TCF 2.2 CMP, it is required to have your CMP UI design certified by the IAB. Once certified, you will need to provide your CMP ID as follows:</p> <pre><code>Usercentrics.Instance.setCMPId(&lt;ID&gt;);\n</code></pre>"},{"location":"games/features/build_own_ui/#action-delegates","title":"Action Delegates","text":"<p>In order to collect consent, we have provided the following two functions:</p> <p>Accept All</p> <pre><code>Usercentrics.Instance.AcceptAll();\n</code></pre> <p>Deny All</p> <pre><code>Usercentrics.Instance.DenyAll();\n</code></pre>"},{"location":"games/features/build_own_ui/#interaction-analytics","title":"Interaction Analytics","text":"<p>To gather events in the Usercentrics analytics dashboard the following API is provided to track the available events:</p> <pre><code>Usercentrics.Instance.Track(&lt;usercentricsAnalyticsEventType&gt;);\n</code></pre> <p>Events</p> Event Notes CmpShown The banner was displayed to the user. It doesn't matter which layer. AcceptAllFirstLayer The Accept All button was pressed from the first layer. DenyAllFirstLayer The Deny All button was pressed from the first layer. SaveFirstLayer The Save button was pressed from the first layer. Save is mainly used for granular decisions. AcceptAllSecondLayer The Accept All button was pressed from the second layer. DenyAllSecondLayer The Deny All button was pressed from the second layer. SaveSecondLayer The Save button was pressed from the second layer. Save is mainly used for granular decisions. ImprintLink The Imprint link/button was pressed. MoreInformationLink The More Information link/button was pressed. This button is usually used to navigate from first layer to second layer. PrivacyPolicyLink The Privacy policy link/button was pressed. <p>Continue to Apply Consent</p> <p>Now, it is fundamental that the user's privacy choices are applied to the 3<sup>rd</sup> party SDKs on you App. Please continue to Apply Consent.</p>"},{"location":"games/features/consent-mediation/","title":"Consent Mediation","text":"<p>BETA</p> <p>This feature is currently in beta, and only available starting v2.7.0. Please make sure that consent is being passed correctly before pushing this feature to production.</p> <p>To simplify the process of applying consent, we are adding a mediation feature, that is aware of the Consent API of selected SDKs, and will apply/update consent whenever needed.</p>"},{"location":"games/features/consent-mediation/#enable-mediation","title":"Enable Mediation","text":"<p>That's it! \ud83d\ude80 we will now apply consent automatically to all supported SDKs.</p> <p>Make sure you apply consent to not supported SDKs as well.</p>"},{"location":"games/features/consent-mediation/#supported-sdks","title":"Supported SDKs","text":"SDK Template ID Added in version Source Google Analytics for Firebase diWdt4yLB 2.7.0 Google's Consent Mode Unity Ads hpb62D82I 2.7.0 Privacy consent and data APIs AppLovin fHczTMzX8 2.7.0 Privacy-Consent and Data API for iOS and Android ironSource 9dchbL797 2.7.0 Regulation Advanced Settings for iOS and Android Crashlytics cE0B0wy4Z 2.7.12 Privacy-Consent and Data API for iOS and Android Adjust Jy6PlrM3 2.7.12 Privacy-Consent and Data API for iOS and Android"},{"location":"games/features/consent-mediation/#supported-mediation-sdks","title":"Supported Mediation SDKs","text":"<p>These SDKs mediate consent for selected SDKs themselves. Make sure you setup the correct TemplateIDs to automatically pass consent to mediated SDKs.</p>"},{"location":"games/features/consent-mediation/#adjust","title":"Adjust","text":"SDK Template ID Apple Ads weoN4Lb_MjWLuu Facebook ocv9HNX_g Google Ads S1_9Vsuj-Q Google Marketing Platform t-TPeXsRi Snapchat QcD9GVNXZ Tencent tMLzMavbHZoxW0 TikTokSan 6-qobRfu Twitter Skj79NodobQ Yahoo Gemini HJSPc4ids-Q Yahoo Japan Search gUbemZYaQwqxss"},{"location":"games/features/consent-mediation/#debugging","title":"Debugging","text":"<p>Debug Mode</p> <p>To see debug messages, please set the SDK's loggerLevel to DEBUG.</p> <p>When running your application with Consent Mediation enabled, you should expect the following events:</p> <p>Enable Confirmation</p> <p>Immediately after initialization, you will get a confirmation that Consent Mediation is Enabled: <pre><code>[USERCENTRICS] Consent Mediation is Enabled\n</code></pre></p> <p>Scan</p> <p>After your configuration has been loaded, the SDK will provide an overview of the supported services: <pre><code>[USERCENTRICS][Mediation] 2/6 Services are supported: Unity Ads | Google Analytics for Firebase\n</code></pre> Mediation</p> <p>Whenever a user provides consent or the SDK has been initialized, the SDK will apply the latest user choices to each supported SDK:</p> <pre><code>[USERCENTRICS][Mediation] \u2705 Google Analytics for Firebase: TRUE\n[USERCENTRICS][Mediation] \u2705 Unity Ads: FALSE\n</code></pre> <p>Default Consent</p> <p>On first launch, you will see consent is applied immediately after initialization, even when a user still has not given consent. This happens because the default consent provided in your configuration is being applied.</p>"},{"location":"games/help/att/","title":"AppTrackingTransparency Framework - iOS 14.5","text":"<p>Starting with iOS 14.5, Apple requires you to declare the type of data your app is tracking and ask users for permission to track them. For this, Apple has provided the AppTrackingTransparency framework. (ATT)</p> <p></p>"},{"location":"games/help/att/#does-att-replace-a-cmp","title":"Does ATT replace a CMP?","text":"<p>No, it does not. A CMP collects consent based on the legal requirements of a framework, such as GDPR and CCPA/CPRA, which are valid in their respective jurisdiction. Where as ATT is designed to provide transparency about the tracking practices of an App. The underlying value of ATT is to empower users, by giving them the control over who can have access to their Advertising Identifier (IDFA, an ID used by advertisers to identify a unique user/device and provide personalized ads), by signaling to the app developer, that tracking practices should/should not be enabled.</p>"},{"location":"games/help/att/#how-to-support-att","title":"How to support ATT?","text":"<ol> <li> <p>Drag the ATTManager game object into your scene    </p> </li> <li> <p>Configure ATT with a message that explains why you would like to have access to user's data, and make sure you enable the \"ATT Enabled\" checkmark.    </p> </li> <li> <p>Depending on your App Flow, you may request ATT permission whenever you deem convenient, but we recommend collecting both legal consent via the Usercentrics CMP and ATT permission in consecutive steps.     The system will handle showing the popup, you will just need to call this function.</p> <pre><code>AppTrackingTransparency.Instance.PromptForAppTrackingTransparency((status) =&gt;\n{\n    switch (status)\n    {\n        case AuthorizationStatus.AUTHORIZED:\n            // You may enable tracking frameworks\n        case AuthorizationStatus.DENIED:\n            // You should disable tracking frameworks\n        case AuthorizationStatus.NOT_DETERMINED:\n            // State before prompt is shown. No further action.\n        case AuthorizationStatus.RESTRICTED:\n            // Restricted. See: https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/authorizationstatus/restricted\n    }\n});\n</code></pre> </li> </ol> <p>Handling for versions under iOS 14</p> <p>Since ATT permission is not supported in versions lower than iOS 14. We will always return AUTHORIZED, if this method is called in not supported versions.</p> <p>If permission has never been requested, the system will prompt the ATT pop-up, and the result will be return on the callback. Once permission has been collected, any future call to this function will directly return the permission status without presenting the pop-up.</p>"},{"location":"games/integration/apply_consent/","title":"Applying Consent","text":"<p>Now that you have collected consent, let's make sure to respect the user's choices by applying consent to each SDK. First, we need a way to match the 3<sup>rd</sup> party technologies declared in your configuration, with the SDKs running in the Game.</p>"},{"location":"games/integration/apply_consent/#when-should-you-apply-consent","title":"When should you apply consent?","text":""},{"location":"games/integration/apply_consent/#after-collecting-consent-the-first-time","title":"After collecting consent the first time","text":"<p>The first time you launch the app with the Usercentrics SDK, no consent will have been collected and <code>status.shouldCollectConsent</code> returned in <code>isReady</code> will be TRUE, letting you know that you should collect consent by showing the banner. Once a user has responded, a <code>userResponse</code> will be returned on the banner callback, which will contain the consent object. <pre><code>Usercentrics.Instance.ShowFirstLayer(&lt;UsercentricsLayout&gt;, (userResponse) =&gt; {\n    applyConsent(userResponse.consents);\n});\n</code></pre></p>"},{"location":"games/integration/apply_consent/#as-early-as-possible-on-any-future-app-launch","title":"As early as possible on any future app launch","text":"<p>In any future initialization after collecting consent for the first time, you will already have a consent status stored on device, and you will only need to apply it as early as possible in the app cycle. In this case, the callback of the initialization will return FALSE for <code>status.shouldCollectConsent</code>, and you may apply consent directly.</p> <pre><code>Usercentrics.Instance.Initialize((status) =&gt; {\n    if (status.shouldCollectConsent) {\n        // Collect Consent\n    } else {\n        applyConsent(status.consents);\n    }\n},(errorMessage) =&gt; {\n    // Failure: Returns non-localized error\n});\n</code></pre>"},{"location":"games/integration/apply_consent/#how-to-apply-consent","title":"How to apply consent?","text":"<p>SDKs that access and process user and/or device data, are only allowed to do so, if the user has given explicit consent. In order to be compliant, please review every SDK in your Game for the following cases:</p>"},{"location":"games/integration/apply_consent/#tcf-vendors","title":"TCF Vendors","text":"<p>When using third party services that are certified as TCF Vendors, you will need to declare these services via the Global Vendor List (GVL) tab, in the Service Settings section of your TCF configuration. </p> <p></p> <p>Given you have selected your TCF Vendors in the GVL and published the changes, when a user provides consent, the SDK will generate an encoded string with the consent for these vendors according to the TCF 2.2 standard, called:</p>"},{"location":"games/integration/apply_consent/#tc-string","title":"TC String","text":"<p>As specified by the IAB, the collected consent for IAB Vendors will be encoded into a TCString and stored locally in <code>NSUserDefaults</code>(iOS) or <code>SharedPreferences</code>(Android). You may access these values with their specific Keys.</p> <p>In most cases, the Vendor SDK might automatically pull the TCString, and apply consent to itself automatically. In case the vendor SDK requires you to pass the TCString programmatically, you may use:</p> <pre><code>Usercentrics.Instance.GetTCFData((tcfData) =&gt; {\n    var tcString = tcfData.tcString;\n});\n</code></pre> <p>Consent for Non-IAB vendors NEEDS to be applied programmatically</p>"},{"location":"games/integration/apply_consent/#non-tcf-vendors","title":"Non-TCF Vendors","text":""},{"location":"games/integration/apply_consent/#how-to-match-a-service-with-an-sdk","title":"How to match a service with an SDK?","text":"<p>Every service (DPS) available in our database, such as:</p> <ul> <li>Google Firebase</li> <li>Unity Ads</li> <li>Adjust</li> <li>AppLovin</li> <li>Vungle</li> </ul> <p>will have a unique <code>templateID</code> to identify it. This ID can be found under Service Settings &gt; Data Processing Services &gt; Service Extended Information.</p> <p></p> <p>We will be using this ID to match every declared service with it's SDK.</p>"},{"location":"games/integration/apply_consent/#sdks-with-a-consent-api","title":"SDKs with a consent API","text":"<p>SDKs that support data privacy compliance, will provide an API to set the user's consent status. The API and it's behaviour will be documented by the SDK's provider.</p> <p>e.g.</p> <ul> <li>Google Analytics for Firebase's Consent Mode</li> <li>Unity Ad's Privacy consent and data API</li> <li>AppLovin's Privacy API</li> </ul> <p>Regulation dedicated APIs</p> <p>Please note that most APIs are dedicated for a specific regulation. e.g. GDPR for Europe, CCPA/CPRA for California, COPPA for children protection, etc. Make sure to review the documentation and apply the consent for the correct regulation.</p> <p>To apply consent to these SDKs, identify the target SDK and implement the consent API as documented:</p> <pre><code>private void applyConsent(List&lt;UsercentricsServiceConsent&gt; consents){\n    foreach (var serviceConsent in consents) {\n        switch (serviceConsent.templateId) {\n            case \"hpb62D82I\": // Unity Ads Template ID\n                // UnityAdsConsentAPI.Enabled = service.consent.status;\n                break;\n            case \"YYyyYyYYY\": // Other SDK Template ID\n                // Pass consent to framework with service.status\n                break;\n            default:\n                // Log a warning if a service was not caught or do nothing\n                break;\n        }\n    }\n}\n</code></pre> <p>Not all APIs are created equal</p> <p>Please make sure you read through each documentation, as many providers might require other steps to fully be complaint.</p>"},{"location":"games/integration/apply_consent/#sdks-without-a-consent-api","title":"SDKs without a consent API","text":"<p>For SDKs that track user/device data and do not offer a consent API, the only solution is to not initialize those SDKs, when a user did not provide consent.</p> <pre><code>private void applyConsent(List&lt;UsercentricsServiceConsent&gt; consents){\n    foreach (var serviceConsent in consents) {\n        switch (serviceConsent.templateId) {\n            case \"x-XXXxXx\": // Template ID\n                // Only initialize an SDK if consent has been given\n                if (service.status) { initializeSDK() }\n                break;\n            case \"YYyyYyYYY\": // Other SDK Template ID\n                //Initialize framework based on service.status\n                break;\n            default:\n                // Log a warning if a service was not caught or do nothing\n                break;\n        }\n    }\n}\n</code></pre>"},{"location":"games/integration/collect-consent/","title":"Collecting Consent with Usercentrics UI","text":"<p>Usercentrics UI is a native UI component designed to own all the complexity of compliance, while also allowing different levels of customization.</p> <p>This component consists of 2 Layers:</p> <p></p>"},{"location":"games/integration/collect-consent/#first-layer","title":"First Layer","text":"<p>The First Layer is designed to be friendly to end-users, compact and highly customizable. This layer can be presented in 3 different ways:</p> PopupSheetFull <p></p> <p></p> <p></p> <p>Recommendation</p> <p>Use the First Layer when collecting consent for the first time or when prompting updates to the consent services. Remember that user's will be able to navigate from the First Layer to the Second Layer.</p> <p>To present the First Layer, simply call <code>showFirstLayer()</code> from a <code>Usercentrics</code> instance. Once the user provides their consent, a userResponse object will be returned.</p> <pre><code>Usercentrics.Instance.ShowFirstLayer(&lt;UsercentricsLayout&gt;, (userResponse) =&gt; {\n    // Handle userResponse\n});\n</code></pre>"},{"location":"games/integration/collect-consent/#second-layer","title":"Second Layer","text":"<p>The Second Layer is designed to own all the complexity of compliance, declare all legally required information and allow for granular choices.</p> <p></p> <p>Recommendation</p> <p>Use the Second Layer to allow users to review their choices from your game settings. Allowing for review and editing of consent is part of privacy compliance.</p> <p>To present the Second Layer, similarly call <code>showSecondLayer()</code> from a <code>Usercentrics</code> instance, and . The same userResponse object will be returned here as well.</p> <pre><code>Usercentrics.Instance.ShowSecondLayer(&lt;showCloseButton&gt;, (userResponse) =&gt; {\n    // Handle userResponse\n});\n</code></pre>"},{"location":"games/integration/collect-consent/#handling-userresponse","title":"Handling UserResponse","text":"<p>The <code>userResponse</code> object provided in the callback of UsercentricsUI, contains the following information:</p> Properties Type Notes consents [UsercentricsServiceConsent] List of the user's consent choices needed to apply consent. userInteraction Enum Response given by user: AcceptAll: User accepted all services, DenyAll: User denied all service. Granular: User gave a granular choice, No Interaction: User dismissed the Banner with no response. controllerId String A Usercentrics generated ID, used to identify a specific user. This value is required when using Cross-Device Consent Sharing. <p>You have successfully collected consent! \ud83d\ude80</p> <p>Now, it is fundamental that the user's privacy choices are applied to the 3<sup>rd</sup> party SDKs on you App. Please continue to Apply Consent.</p>"},{"location":"games/integration/configure/","title":"Configuring Usercentrics","text":"<p>Once you have installed the Usercentrics SDK, you will need an account to configure your consent banner.</p>"},{"location":"games/integration/configure/#configuration-id","title":"Configuration ID","text":"<p>You may configure Usercentrics in the two following ways:</p> <p></p> <ul> <li>SettingsID: Initialize Usercentrics with a SettingsID, if you want to have one specific configuration, regardless of user location.</li> <li>RulesetID: Initialize Usercentrics with a RulesetID, if you are using GeoLocation Rules, and wish to target users based on their location.</li> </ul> Where to find a RulesetID or SettingsID? RulesetIDSettingsID <p> </p> <p></p> <p>Both values should not be used at the same time</p>"},{"location":"games/integration/configure/#device-options","title":"Device Options","text":"<p>In addition to the <code>SettingsID</code>, you may also configure the following options to control different behaviours at a device-level:</p> Property Type Notes settingsID String A Usercentrics generated ID, used to identify a unique CMP configuration. rulesetID String A Usercentircs generated ID, used to identify a bundle of CMP configurations to be used depending on the user's location. defaultLanguage String Selected based on our language selection hierarchy. This property defines the language used to render the banner.  e.g. \"en\", \"de\", \"fr\". version String To freeze the configuration version shown to your users, you may pass a specific version here. You may find an overview of all versions in the Configuration Dashboard under Configuration &gt; History &gt; Settings History &gt; Version (Column) or Implementation &gt; Script Tag &gt; Version History. e.g. \"3.0.4\". Passing \"latest\" (default) will fetch the latest version of your CMP configuration. Passing \"preview\" will fetch the latest draft of your CMP configuration. timeoutMillis Int Timeout for network requests in milliseconds. We do NOT recommend overwriting this field unless absolutely necessary or for debugging reasons, as well as using any values under 5,000 ms. Default is 10,000 ms (10s). debugMode Bool Get all errors, warning and logs when running the SDK. <p>These options will be available on the Usercentrics (Script) menu in your Unity IDE.</p> <p></p>"},{"location":"games/integration/configure/#language-selection-hierarchy","title":"Language Selection Hierarchy","text":"<p>The SDK uses the following hierarchy, when deciding which language to load on init:</p> <p></p> <p>On first init, Default Language<sup>1</sup> <sup>2</sup> will have first priority, then Device language<sup>1</sup> <sup>2</sup> and finally a hard default to the first language available in your configuration. Once a language has been selected, it will be stored. Any following SDK initializations will use the Stored Language <sup>3</sup>.</p> <ol> <li> <p>To be supported, a language needs to be added and set as visible in the Admin Interface, under Configuration &gt; Setup &gt; Language Settings.\u00a0\u21a9\u21a9</p> </li> <li> <p>This value will only be checked during the first SDK initialized. Afterwards, the stored languages will be used.\u00a0\u21a9\u21a9</p> </li> <li> <p>If a user explicitly selects a new language in the Usercentrics UI, or the language is changed programmatically after init, the stored languages will be updated and take priority in the future.\u00a0\u21a9</p> </li> </ol>"},{"location":"games/integration/initialize/","title":"Initializing Usercentrics","text":"<p>Before we get started with the integration, let's review some basics on when to initialize Usercentrics and legal requirements.</p>"},{"location":"games/integration/initialize/#when-to-present-the-banner","title":"When to present the banner?","text":"<p>In general, you are free to decide when to present the banner to your users. e.g. Right after app launch, after login, during app onboarding, etc.</p> <p>There are only 2 requirements when deciding when to do this:</p> <p>Requirement 1</p> <p>Do NOT enable any data tracking from 3<sup>rd</sup> party services/SDKs before a user has given explicit consent. This would otherwise be a breach of data protection regulations, which can result in heavy fines.</p> <p>Requirement 2</p> <p>Don't forget Requirement 1. </p>"},{"location":"games/integration/initialize/#initializing-the-sdk","title":"Initializing the SDK","text":"<p>There are two ways you can initialize the SDK:</p>"},{"location":"games/integration/initialize/#auto-init","title":"Auto Init","text":"<p>Use Case</p> <p>Use Auto Init to present the banner automatically when a scene starts. This integration only supports using our Usercentrics UI, which can be customized via our Configuration Dashboard. To have more control over when to show the banner, please continue to Programmatic Init.</p> <ol> <li>Enable Auto Initialize in the Inspector Tab. When the Scene is shown for the first time, the consent banner will appear automatically when needed. </li> </ol> <p></p> <p>Done! \ud83d\ude80 The SDK will now be initialized when the scene starts. Please continue to Apply Consent to finish the integration.</p>"},{"location":"games/integration/initialize/#programmatic-init","title":"Programmatic Init","text":"<p>Use Case</p> <p>Use Programmatic Init to have control over when to present the banner in a given scene. This integration supports creating your own Banner, which can unlock a much higher performance for opt-in rates.</p> <p>Disable Auto Initialize</p> <p>For a custom integration, please make sure Auto Initialize is disabled.</p> <ol> <li> <p>Import <code>Usercentrics</code> to the Scene      <pre><code>using Unity.Usercentrics;\n</code></pre></p> </li> <li> <p>On Scene start, call <code>Initialize()</code> from a <code>Usercentrics</code> instance. On success, evaluate <code>status.shouldCollectConsent</code>.     <pre><code>Usercentrics.Instance.Initialize((status) =&gt; {\n    if (status.shouldCollectConsent) { \n        // Collect Consent\n    } else {\n        // Apply Consent with status.consents\n    }\n},(errorMessage) =&gt; {\n    // Failure: Returns non-localized error\n});    \n</code></pre></p> <p>Handling <code>status.shouldCollectConsent</code></p> <p><code>shouldCollectConsent</code> will let you know if you should present the banner. e.g If consent has never been collected, or if the banner needs to be shown again do to changes on your configuration.</p> <p>If consent has already been collected, you can simply apply the consent given, which will be available in <code>status.consent</code></p> </li> <li> <p>Present the Consent Banner when <code>status.shouldCollectConsent</code> is TRUE or apply consent if <code>status.shouldCollectConsent</code> is FALSE. </p> </li> </ol> <p>Handle init errors</p> <p>In case of an error on init (most likely caused by connection issues), please catch this error and continue the user flow as expected. We recommend to treat this as if the user did not give consent. The next time the SDK is initialized correctly you should collect consent normally.</p>"},{"location":"games/integration/initialize/#presenting-the-consent-banner","title":"Presenting the Consent Banner","text":"<p>In order to present the banner, we offer different options depending on your needs:</p>"},{"location":"games/integration/initialize/#usercentricsui","title":"UsercentricsUI","text":"<p>Use our out-of-the-box UI component, that owns all the complexity of compliance, and can be customized via our Configuration Dashboard. Continue to Collecting Consent with UsercentricsUI.</p> <p></p>"},{"location":"games/integration/initialize/#build-you-own-banner","title":"Build you own Banner","text":"<p>Build a Banner that fits your game design language, and let us take care of the rest. Continue to Build your own UI.</p> <p></p> <p>Only for IAB TCF 2.2 certified customers</p> <p>Currently you can only use this solution if you are building a Banner that adheres to the IAB's TCF 2.2 Standard. For this you will need to be certified as a CMP by the IAB.</p>"},{"location":"games/integration/initialize/#hybrid","title":"Hybrid","text":"<p>If you need a \"in between\" solution, we encourage you to mix these two approaches to get the best of both worlds. e.g. Create your own first layer banner, and let UsercentricsUI take care of the complexity on a second layer.</p>"},{"location":"games/integration/install/","title":"Installing the Usercentrics Unity Package","text":""},{"location":"games/integration/install/#download","title":"Download","text":"<p>Download the latest release of our Unity Package.</p> Static Linkage Support for iOS <p>Because we use ExternalDependencyManager, the project output when building for iOS, will be a CocoaPods workspace, which offers an option to Link frameworks statically. If you need support for Static Linkage on iOS, please download the latest package with the <code>-static</code> suffix. *e.g. <code>Usercentrics-2.X.X-static.unitypackage</code>.</p>"},{"location":"games/integration/install/#install","title":"Install","text":"<p>Prerequisites</p> <ul> <li>Android 5.0 (API 21), or higher, for the Minimum API Level and Android 12 (API 31) for the Target API Level</li> </ul> <ul> <li>Java version 8 or 11 depending on the Unity Version</li> <li>Kotlin 1.7 or higher</li> <li>iOS 11 or higher</li> </ul>"},{"location":"games/integration/install/#on-unity-ide","title":"On Unity IDE","text":"<ol> <li> <p>Drag and drop <code>Usercentrics.unitypackage</code> into your Unity project. Alternatively, you can select the package from the menu <code>Assets &gt; Import Package &gt; Custom Package</code></p> <p>ExternalDependencyManager</p> <p>If you have already imported ExternalDependencyManager for Unity in your project, you can deselect it in the pop-up, to keep your previous configuration.</p> <p></p> </li> <li> <p>Click on \"Import\".</p> </li> <li>From <code>Usercentrics/Prefabs</code>, drag <code>Usercentrics</code> prefab into your Scene, this will represent the Game Object for our Banner.</li> </ol> <p></p> <p>The name of this object needs to be <code>Usercentrics</code>.</p> <p>Usercentrics Package is now installed, lets continue to Configure! \ud83d\ude80</p>"},{"location":"games/integration/install/#troubleshooting","title":"Troubleshooting","text":"UnityiOS SetupAndroid Setup <p>Unity Editor is NOT Supported</p> <p>The Unity Editor is not supported at the moment. In order to test and debug the CMP you will need to run the project on a simulator or real device.</p> <p>Supporting iOS &amp; Xcode</p> <p>Cocoapods must be installed for iOS builds to work, check their installation guide.</p> <p>When opening the project built by Unity, you should always select the .xcworkspace file created by Cocoapods.</p> <p>ExternalDependencyManager and Building</p> <p>When using this plugin for the first time, a popup will appear asking if you want to enable \"Android Auto-resolution\", we highly recommend to enable, since it's natural for some Android libraries have conflicting dependencies. Enabling this \"auto-resolution\", the plugin will take care of everything for you.</p> <p></p> <p>Internet Access is Required</p> <p>The Usercentrics SDK needs internet in order to initialize. Make sure you enable a required connection in your Android Player Settings. File &gt; Build Settings &gt; Android (selected) &gt; Player Settings &gt; Other Settings &gt; Internet Access &gt; Required</p> <p>Dependencies</p> <p>When Android is selected as Build Platform, the dependency manager will ask you to download the dependencies that Usercentrics needs. We recommend enabling Android Auto-resolution to handle this. Make sure you have downloaded all Android Build Support Modules including OpenJDK.</p>"},{"location":"tv/config/","title":"Configuring the Banner","text":""},{"location":"tv/config/#remote-customization","title":"Remote Customization","text":""},{"location":"tv/config/#logo","title":"Logo","text":"<p>Set an image to appear at the top of your banner by providing a URL:</p> <p></p> <p>Supported URL Image Formats</p> <p>When passing a URL to fetch an image, the SDK supports: iOS: PNG and JPEG. Android: PNG, JPEG, BMP, GIF and WebP.</p>"},{"location":"tv/config/#programmatic-customization","title":"Programmatic Customization","text":""},{"location":"tv/config/#bannersettings","title":"BannerSettings","text":""},{"location":"tv/config/#logo_1","title":"Logo","text":"tvOSAndroidTV <pre><code>import UsercentricsUI\n\nlet bannerSettings = BannerSettings(logo: &lt;UIImage?&gt;)\nlet banner = UsercentricsBanner(bannerSettings: bannerSettings)\n</code></pre> <pre><code>import com.usercentrics.sdk.ui.tv.BannerSettings\nimport com.usercentrics.sdk.ui.tv.UsercentricsBanner\nimport com.usercentrics.sdk.UsercentricsImage\n\nval image1 = UsercentricsImage.ImageDrawableId(&lt;Int&gt;)\nval image2 = UsercentricsImage.ImageDrawable(&lt;Drawable&gt;)\nval image3 = UsercentricsImage.ImageBitmap(&lt;Bitmap&gt;)\nval image4 = UsercentricsImage.ImageUrl(&lt;String&gt;)\n\nval bannerSettings = BannerSettings(\n    logo = image,\n)\n\nval banner = UsercentricsBanner(\n    context = &lt;Context&gt;,\n    settings = bannerSettings\n)\n</code></pre>"},{"location":"tv/config/#font","title":"Font","text":"AndroidTV <pre><code>import com.usercentrics.sdk.ui.tv.BannerSettings\nimport com.usercentrics.sdk.ui.tv.UsercentricsBanner\n\nval font1 = Typeface.createFromAsset(&lt;Context&gt;.assets, &lt;String&gt;)\nval font2 = ResourcesCompat.getFont(&lt;Context&gt;, &lt;Int&gt;)\n\nval bannerSettings = BannerSettings(\n    font = font1,\n)\n\nval banner = UsercentricsBanner(\n    context = &lt;Context&gt;,\n    settings = bannerSettings\n)\n</code></pre>"},{"location":"tv/install/","title":"Installing the TV SDK","text":"tvOSAndroidTV"},{"location":"tv/install/#requirements","title":"Requirements","text":"<ul> <li>tvOS 11.0 or higher</li> </ul>"},{"location":"tv/install/#using-cocoapods","title":"Using CocoaPods","text":"<ol> <li> <p>On your Podfile, add the following line:     <pre><code>platform :tvos, '11.0'\nuse_frameworks!  \n\npod 'UsercentricsUI'\n</code></pre></p> </li> <li> <p>On the root directory of your project, run the following command to install the pod.     <pre><code>pod install\n</code></pre></p> </li> <li> <p>Open your .xcworkspace file.</p> </li> <li>\ud83d\ude80 You are ready to start the SDK integration.</li> </ol>"},{"location":"tv/install/#using-swift-package-manager-spm","title":"Using Swift Package Manager (SPM)","text":"<ol> <li> <p>On Xcode, Select File &gt; Swift Packages &gt; Add Package Dependency.</p> </li> <li> <p>Enter the package repository URLs:     <pre><code>https://bitbucket.org/usercentricscode/usercentrics-spm-sdk\nhttps://bitbucket.org/usercentricscode/usercentrics-spm-ui\n</code></pre></p> </li> <li> <p>Select the version you would like to use. We recommend sticking to \"Up to Next Major\" with the latest release as minor version.</p> </li> <li>\ud83d\ude80 You are ready to start the SDK integration.</li> </ol>"},{"location":"tv/install/#requirements_1","title":"Requirements","text":"<ul> <li>Android 4.1 (API 16) and higher</li> </ul>"},{"location":"tv/install/#using-gradle","title":"Using Gradle","text":"<ol> <li> <p>Add the dependency to your app's build.gradle:     <pre><code>dependencies {\n    implementation \"com.usercentrics.sdk:usercentrics-tv\"\n}\n</code></pre></p> </li> <li> <p>\ud83d\ude80 You are ready to start the SDK integration. </p> </li> </ol>"},{"location":"tv/intro/","title":"The Usercentrics TV SDK","text":"<p>We have officially launched Consent Management Platform support for TV platforms: tvOS and AndroidTV.</p> <p>Support for Tizen (Samsung), webOS Smart TV (LG) and Roku will be coming next.</p> <p></p> <p>Taking advantage of the native design language of each platform, our new TV SDK brings all the features of our CMP to a bigger screen. With a really simple integration and out-of-the-box solution, we are confident we are continuing our high standard of developer experience and ease of integration.</p> <p>Please note that there are some differences when integrating the TV CMP, and we have highlighted them in this section. For the rest, please follow our standard documentation.</p>"},{"location":"tv/present/","title":"Presenting the TV Banner","text":"<p>You can decide to present the First Layer or Second Layer as you deem necessary for your user experience. However, we recommend to:</p> <ul> <li>Use the First Layer when collecting consent for the first time. Remember that user's will be able to navigate from the First Layer to the Second Layer.</li> <li>Use the Second Layer for when customers want to review their choices. e.g. In your app's settings.</li> </ul>"},{"location":"tv/present/#presenting-the-first-layer","title":"Presenting the First Layer","text":"tvOSAndroidTV <pre><code>import UsercentricsUI\n\nlet banner = UsercentricsBanner()\nbanner.showFirstLayer(hostView: self // Host UIViewController) { userResponse in\n// Handle userResponse\n}\n</code></pre> <pre><code>import com.usercentrics.sdk.ui.tv.BannerSettings\nimport com.usercentrics.sdk.ui.tv.UsercentricsBanner\n\nval banner = UsercentricsBanner(\n    context = &lt;Context&gt;,\n    settings = &lt;BannerSettings?&gt;\n)\nbanner.showFirstLayer { userResponse -&gt;\n// Handle userResponse\n}\n</code></pre> <p>Use a valid Context</p> <p>We are using the <code>Dialog</code> Android API for the Banner implementation.  It is recommended to use a <code>Context</code> that is an <code>Activity</code> or derived/wrapper from it. Note that the <code>Activity</code> has to be alive for the dialog to be displayed.</p>"},{"location":"tv/present/#presenting-the-second-layer","title":"Presenting the Second Layer","text":"tvOSAndroidTV <pre><code>import UsercentricsUI\n\nlet banner = UsercentricsBanner()\nbanner.showSecondLayer(hostView: self // Host UIViewController) { userResponse in\n// Handle userResponse\n}\n</code></pre> <pre><code>import com.usercentrics.sdk.ui.tv.BannerSettings\nimport com.usercentrics.sdk.ui.tv.UsercentricsBanner\n\nval banner = UsercentricsBanner(\n    context = &lt;Context&gt;,\n    settings = &lt;BannerSettings?&gt;\n)\nbanner.showSecondLayer { userResponse -&gt;\n    // Handle userResponse\n}\n</code></pre> <p>Use a valid Context</p> <p>We are using the <code>Dialog</code> Android API for the Banner implementation.  It is recommended to use a <code>Context</code> that is an <code>Activity</code> or derived/wrapper from it. Note that the <code>Activity</code> has to be alive for the dialog to be displayed.</p>"},{"location":"tv/present/#handling-user-response","title":"Handling User Response","text":"<p>After a user provides their consent choices, you will receive a UsercentricsConsentUserResponse object in the banner presentation callback. This object will provide you with all the information you need in order to apply consent, make decisions based on the user's interaction or store the user's ControllerID if you wish to support Cross-Device Consent Sharing.</p>"},{"location":"web/intro/","title":"Usercentrics Web CMP v3 coming soon...","text":"<p>We are working on something special for you.</p> <p>In the meanwhile, please continue to our Web CMP v2 documentation.</p>"},{"location":"web/releases/","title":"Releases","text":""},{"location":"web/releases/#release-history","title":"Release History","text":"<p>The following table lists the details of the latest Usercentrics Web releases:</p> Version Release Date Release Notes 1.0.0 TBD <ul><li>First V3 release</li></ul>"},{"location":"web/specifications/","title":"Technical Specifications","text":"<p>TODO: These versions should be updated once we have a final decision DO NOT RELEASE DOCS UNTIL WE HAVE THE FINAL DECISION</p>"},{"location":"web/specifications/#for-desktop","title":"For Desktop","text":"Browser Version  Chrome 37  Edge 15  Firefox 41  Internet Explorer 11  Opera 31  Safari 11  Yandex 17.6"},{"location":"web/specifications/#for-mobile","title":"For Mobile","text":"Operating System Browser Version  Android Android Internet BrowserGoogle ChromeOperaFirefox Android 4.4  Android 7+  Android 7+  Android 7+  iOS SafariChromiumFirefox iOS 10.3iOS 12.0iOS 12.0"},{"location":"web/v3/","title":"Why V3?","text":"<p>V2 was created with the Browser SDK and minimal package size in mind. While the SDK proved to be a good idea, the package size of both UI &amp; SDK increased over time.</p> <p>This creates performance issues and makes it difficult to achieve good Core Web Vitals / Lighthouse results.</p> <p>The CMP V3 addresses and solves these problems.</p>"},{"location":"web/v3/#how-are-the-improvements-achieved","title":"How are the improvements achieved?","text":""},{"location":"web/v3/#v2","title":"V2","text":"<p>All business logic reside within the Browser SDK.</p> <p>The information is spread across multiple files, representing multiple domains of business logic (core, dps, settings, translation, tcf vendors list, etc.).</p>"},{"location":"web/v3/#v3","title":"V3","text":"<p>Critical parts of the above-mentioned business logic have been moved to a backend API, which produces tailored responses for all of our customers.</p> <p>This API returns many of the actual properties that were previously calculated on the SDK, in one cacheable JSON response. </p>"},{"location":"web/v3/#performance-metrics","title":"Performance Metrics","text":"<p>V3 shows great improvements in all business-critical areas: In comparison with V2, V3 reduces the kB transferred in the client by ~70% and the amount of network requests performed by ~60%. The smaller fingerprint of this CMP, results in better Lighthouse scores &amp; Core Web Vitals.</p>"},{"location":"web/features/api/control-the-ui/","title":"Control the ui","text":""},{"location":"web/features/api/control-the-ui/#control-the-ui","title":"Control the UI","text":""},{"location":"web/features/api/control-the-ui/#introduction","title":"Introduction","text":"<p>The following methods can be accessed through the window function that should be present:</p> <pre><code>  window.__ucCmp\n</code></pre> <p>To check Interfaces, Types, ENUMS, please refer to the Interfaces page.</p>"},{"location":"web/features/api/control-the-ui/#showfirstlayer","title":"showFirstLayer","text":"<p>Programmatic way to show the First Layer</p> <pre><code>  window.__ucCmp.showFirstLayer()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-the-ui/#showsecondlayer","title":"showSecondLayer","text":"<p>Programmatic way to show the Second Layer</p> <pre><code>  window.__ucCmp.showSecondLayer()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-the-ui/#closecmp","title":"closeCmp","text":"<p>Programmatic way to close the CMP</p> <pre><code>  window.__ucCmp.closeCmp()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-the-ui/#acceptallconsents","title":"acceptAllConsents","text":"<p>Programmatic way to accept all consents</p> <pre><code>  window.__ucCmp.acceptAllConsents()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-the-ui/#denyallconsents","title":"denyAllConsents","text":"<p>Programmatic way to deny all consents</p> <pre><code>  window.__ucCmp.denyAllConsents()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-the-ui/#refreshscripts","title":"refreshScripts","text":"<p>Programmatic way to recheck the unblocking of scripts e.g. for Single Page Applications that add script tags dynamically</p> <pre><code>  window.__ucCmp.refreshScripts()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-the-ui/#showservicedetails","title":"showServiceDetails","text":"<p>Programmatic way to show the details of a service</p> <pre><code>  window.__ucCmp.showServiceDetails(serviceId)\n</code></pre> Input Input Type Return Type serviceId string <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-the-ui/#getconsentdetails","title":"getConsentDetails","text":"<p>Programmatic way to get the current consent details</p> <pre><code>  window.__ucCmp.getConsentDetails()\n</code></pre> Input Return Type - <code>Promise&lt;ConsentDetails | undefined&gt;</code>"},{"location":"web/features/api/control-the-ui/#updatecategoriesconsents","title":"updateCategoriesConsents","text":"<p>Programmatic way to update consent based on category</p> <pre><code>  window.__ucCmp.updateCategoriesConsents(categoriesConsent)\n</code></pre> Input Input Type Return Type categoriesConsent CategoriesConsents <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-the-ui/#updateservicesconsents","title":"updateServicesConsents","text":"<p>Programmatic way to update service consents</p> <pre><code>  window.__ucCmp.updateServicesConsents(servicesConsents)\n</code></pre> Input Input Type Return Type servicesConsents ServicesConsents <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-the-ui/#updatetcfconsents","title":"updateTcfConsents","text":"<p>Programmatic way to update TCF consents</p> <pre><code>  window.__ucCmp.updateTcfConsents(tcfConsents)\n</code></pre> Input Input Type Return Type tcfConsents TCFConsents <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-the-ui/#saveconsents","title":"saveConsents","text":"<p>Programmatic way to save the updated consent</p> <pre><code>  window.__ucCmp.saveConsents(consentType)\n</code></pre> Input Input Type Return Type consentType ConsentType <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-the-ui/#changelanguage","title":"changeLanguage","text":"<p>Programmatic way to change the CMP language</p> <pre><code>  window.__ucCmp.changeLanguage(language)\n</code></pre> Input Input Type Return Type language string <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/control-the-ui/#getactivelanguage","title":"getActiveLanguage","text":"<p>Programmatic way to get the currently selected language in the CMP </p> <pre><code>  window.__ucCmp.getActiveLanguage()\n</code></pre> Input Return Type - <code>Promise&lt;string&gt;</code>"},{"location":"web/features/api/control-the-ui/#getcontrollerid","title":"getControllerId","text":"<p>Programmatic way to get the Controller ID</p> <pre><code>  window.__ucCmp.getControllerId()\n</code></pre> Input Return Type - <code>Promise&lt;string&gt;</code>"},{"location":"web/features/api/control-the-ui/#updatethemes","title":"updateThemes","text":"<p>Programmatic way to update the Themes</p> <pre><code>  window.__ucCmp.updateThemes(themeData)\n</code></pre> Input Input Type Return Type themeData ThemeData <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/enums/","title":"Enums","text":""},{"location":"web/features/api/enums/#enums","title":"ENUMS","text":""},{"location":"web/features/api/enums/#close_option","title":"CLOSE_OPTION","text":"<pre><code>enum CLOSE_OPTION {\n    ICON = \"ICON\",\n    LINK = \"LINK\"\n}\n</code></pre>"},{"location":"web/features/api/functionality/","title":"Functionality","text":""},{"location":"web/features/api/functionality/#browser-ui-api","title":"Browser UI API","text":""},{"location":"web/features/api/functionality/#introduction","title":"Introduction","text":"<p>The following methods can be accessed on the following object that the CMP registers on the window object in the browser:</p> <pre><code>  window.__ucCmp\n</code></pre>"},{"location":"web/features/api/functionality/#getconsentdetails","title":"getConsentDetails","text":"<p>Retrieves all the Consent Details </p> <pre><code>  window.__ucCmp.getConsentDetails()\n</code></pre> Input Return Type - <code>Promise&lt;ConsentDetails&gt;</code>"},{"location":"web/features/api/functionality/#acceptallconsents","title":"acceptAllConsents","text":"<p>Accepts all consents</p> <pre><code>  window.__ucCmp.acceptAllConsents()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/functionality/#denyallconsents","title":"denyAllConsents","text":"<p>Denies all consents</p> <pre><code>  window.__ucCmp.denyAllConsents()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/functionality/#updateservicesconsents","title":"updateServicesConsents","text":"<p>Updates consents for individual or multiple services</p> <pre><code>const serviceConsents = [\n    {id: 'HkocEodjb7', consent: true}, // Google Analytics\n    {id: 'S1_9Vsuj-Q', consent: false}, // Google Ads\n]\n\nawait __ucCmp.updateServicesConsents(serviceConsents);\n</code></pre> Input Input Type Return Type servicesConsents ServicesConsents <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/functionality/#updatecategoriesconsents","title":"updateCategoriesConsents","text":"<p>Updates consents for whole categories of services</p> <pre><code>const categoriesConsents = [\n    {id: 'marketing', consent: true}, // Marketing Category\n    {id: 'functional', consent: false}, // Functional Category\n]\n\nwindow.__ucCmp.updateCategoriesConsents(categoriesConsents)\n</code></pre> Input Input Type Return Type categoriesConsents CategoriesConsents <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/functionality/#saveconsents","title":"saveConsents","text":"<p>Saves the consents after being updated.</p> <pre><code>  window.__ucCmp.saveConsents()\n</code></pre> Input Return Type - <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/functionality/#changelanguage","title":"changeLanguage","text":"<p>Programmatic way to change the language in the CMP</p> <p>Two character country code, e.g. \"en\" = set language to English</p> <pre><code>  window.__ucCmp.changeLanguage(language)\n</code></pre> Input Input Type Return Type language string <code>Promise&lt;void&gt;</code>"},{"location":"web/features/api/interfaces/","title":"Interfaces","text":""},{"location":"web/features/api/interfaces/#interfaces","title":"Interfaces","text":""},{"location":"web/features/api/interfaces/#themedata","title":"ThemeData","text":"<pre><code>interface ThemeData {\n    breakPoints?: {\n        desktop: number;\n        tablet: number;\n        mobile: number;\n    };\n    layers?: ScreenTypes&lt;LayerTheme&gt;;\n    privacyButton?: ScreenTypes&lt;Partial&lt;PrivacyButtonTheme&gt;&gt;;\n    embeddings?: ScreenTypes&lt;EmbeddingsTheme&gt;;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#screentypes","title":"Screentypes","text":"<pre><code>interface ScreenTypes&lt;ThemeType&gt; {\n    desktop?: ThemeType;\n    tablet?: ThemeType;\n    mobile?: ThemeType;\n    xs?: ThemeType;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#layertheme","title":"LayerTheme","text":"<pre><code>interface LayerTheme {\n  base?: Partial&lt;CmpTheme&gt;;\n  first?: Partial&lt;CmpTheme&gt;;\n  second?: Partial&lt;CmpTheme&gt;;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#cmptheme","title":"CmpTheme","text":"<pre><code>interface CmpTheme {\n    border: {\n        radius: string;\n    };\n    borderRadiusLayer: OptionalSettingsData;\n    borderRadiusButton: OptionalSettingsData;\n    buttons: CmpButtonsType[][];\n    colors: {\n        acceptBg?: OptionalSettingsData;\n        acceptTxt?: OptionalSettingsData;\n        background?: OptionalSettingsData;\n        border?: OptionalSettingsData;\n        denyBg?: OptionalSettingsData;\n        denyTxt?: OptionalSettingsData;\n        link?: OptionalSettingsData;\n        moreBg?: OptionalSettingsData;\n        moreTxt?: OptionalSettingsData;\n        neutral?: OptionalSettingsData;\n        overlay?: OptionalSettingsData;\n        primary?: OptionalSettingsData;\n        privacyBg?: OptionalSettingsData;\n        privacyIcon?: OptionalSettingsData;\n        saveBg?: OptionalSettingsData;\n        saveTxt?: OptionalSettingsData;\n        tabActive?: OptionalSettingsData;\n        tabInactive?: OptionalSettingsData;\n        toggleActive?: OptionalSettingsData;\n        toggleInactive?: OptionalSettingsData;\n        toggleDisabled?: OptionalSettingsData;\n        toggleActiveIcon?: OptionalSettingsData;\n        toggleInactiveIcon?: OptionalSettingsData;\n        toggleDisabledIcon?: OptionalSettingsData;\n        tertiary?: OptionalSettingsData;\n        text?: OptionalSettingsData;\n        ccpaButtonColor?: OptionalSettingsData;\n        ccpaButtonTextColor?: OptionalSettingsData;\n    };\n    scrollbar: {\n        thumbColor?: OptionalSettingsData;\n    };\n    direction: 'ltr' | 'rtl';\n    fonts: {\n        family: string;\n    };\n    hideDenyBtn: boolean;\n    hideLanguageSwitch: boolean;\n    logo: {\n        url: string;\n        alt: string;\n        position: 'left' | 'center' | 'right';\n    };\n    footer: {\n        isCentered: boolean;\n    };\n    maxBannerWidth: string;\n    name: string;\n    overlayOpacity: string;\n    position: 'left' | 'center' | 'right' | 'bottom';\n    removeCcpaToggle?: boolean;\n    secondLayerTrigger: string;\n    spacing: Spacing;\n    typography: {\n        color?: OptionalSettingsData;\n        font?: OptionalSettingsData;\n        size?: number | undefined;\n    };\n    useBackgroundShadow: boolean;\n    useOverlay?: boolean;\n    closeOption?: CLOSE_OPTION | null;\n    tcf?: {\n        showDescriptions?: boolean;\n        hideNonIab?: boolean;\n        hideToggles?: boolean;\n        showSharedOutsideEu?: boolean;\n    };\n    showCategoriesToggles: boolean;\n    showMoreInformationLink?: boolean;\n    hideDataProcessingServices?: boolean;\n    hideServicesToggles?: boolean;\n    defaultTab: 'FIRST' | 'SECOND';\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#privacybuttontheme","title":"PrivacyButtonTheme","text":"<pre><code>interface PrivacyButtonTheme {\n    position: 'left' | 'right';\n    size: number;\n    backgroundColor: string;\n    pages: string[];\n    iconUrl: string;\n    iconColor: string;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#consentdetails","title":"ConsentDetails","text":"<pre><code>interface ConsentDetails {\n    consent: ConsentData;\n    services: Record&lt;string, ServiceData&gt;;\n    categories: Record&lt;string, CategoryData&gt;;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#consentdata","title":"ConsentData","text":"<pre><code>interface ConsentData {\n    status: 'ALL_ACCEPTED' | 'ALL_DENIED' | 'SOME_ACCEPTED' | 'SOME_DENIED';\n    serviceIds?: string[];\n    required: boolean;\n    version: number;\n    controllerId: string;\n    language: string;\n    createdAt: number;\n    updatedAt: number;\n    updatedBy: ConsentActionType;\n    setting: SettingData;\n    type: ConsentType;\n    hash: string;\n    gpcSignal?: boolean;\n    isBot?: true;\n    isOutsideEu?: true;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#settingdata","title":"SettingData","text":"<pre><code>interface SettingData {\n    id: string;\n    type: SettingType;\n    version: string;\n    abVariant?: string;\n    sandbox?: true;\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#servicedata","title":"ServiceData","text":"<pre><code>interface ServiceData {\n    name: string;\n    version: string;\n    category: string;\n    essential: boolean;\n    consent?: {\n        given: boolean;\n        type: 'IMPLICIT' | 'EXPLICIT';\n    };\n    gcm?: {\n        analyticsStorage?: true;\n        adStorage?: true;\n    };\n    subservices?: Record&lt;string, ServiceData&gt;;\n    thirdCountryDataTransfer?: boolean;\n    status?: 'added';\n}\n</code></pre>"},{"location":"web/features/api/interfaces/#categorydata","title":"CategoryData","text":"<pre><code>interface CategoryData {\n    essential?: boolean;\n    state: 'ALL_DENIED' | 'SOME_ACCEPTED' | 'ALL_ACCEPTED';\n    dps: Record&lt;string, boolean&gt; | null;\n    hidden?: boolean;\n}\n</code></pre>"},{"location":"web/features/api/types/","title":"Types","text":""},{"location":"web/features/api/types/#types","title":"Types","text":""},{"location":"web/features/api/types/#themetype","title":"ThemeType","text":"<pre><code>type ThemeType = {\n  colors: {\n    black: string,\n    white: string,\n    layout: {\n      mainPage: {\n        left: {\n          background: string,\n        },\n        right: {\n          background: string,\n        },\n      },\n      managePage: {\n        left: {\n          background: string,\n        },\n        right: {\n          background: string,\n        },\n      },\n      qrCode: {\n        left: {\n          background: string,\n        },\n        right: {\n          background: string,\n        },\n      },\n    },\n    toggle: {\n      on: {\n        background: string,\n      },\n      off: {\n        background: string,\n      },\n    },\n    text: {\n      color: string,\n      color95: string,\n      color90: string,\n      color08: string,\n    },\n  },\n  padding: {\n    leftContainer: {\n      mainPage: {\n        vertical: number,\n        horizontal: number,\n      },\n      managePage: {\n        vertical: number,\n        horizontal: number,\n      },\n      qrCode: {\n        vertical: number,\n        horizontal: number,\n      },\n    },\n    rightContainer: {\n      mainPage: {\n        vertical: number,\n        horizontal: number,\n      },\n      managePage: {\n        vertical: number,\n        horizontal: number,\n      },\n      qrCode: {\n        vertical: number,\n        horizontal: number,\n      },\n    },\n    card: {\n      vertical: number,\n      horizontal: number,\n    },\n    dpsInfoCard: {\n      vertical: number,\n      horizontal: number,\n    },\n    qrCodeModal: {\n      vertical: number,\n      horizontal: number,\n    },\n  },\n  font: {\n    size: {\n      layout: {\n        large: number,\n        medium: number,\n      },\n      button: {\n        large: number,\n        medium: number,\n      },\n      card: {\n        large: number,\n        medium: number,\n      },\n      cardList: {\n        large: number,\n        medium: number,\n      },\n      dpsInfoCard: {\n        large: number,\n        medium: number,\n      },\n      qrCodeModal: {\n        large: number,\n        medium: number,\n      },\n    },\n    weight: {\n      regular: number,\n      semiBold: number,\n    },\n  },\n  metrics: {\n    mainPage: {\n      leftContainer: {\n        width: string,\n      },\n      rightContainer: {\n        width: string,\n      },\n    },\n    managePage: {\n      leftContainer: {\n        width: string,\n      },\n      rightContainer: {\n        width: string,\n      },\n    },\n  },\n};\n</code></pre>"},{"location":"web/features/api/types/#cmpbuttonstype","title":"CmpButtonsType","text":"<pre><code>type CmpButtonsType = 'accept' | 'deny' | 'more' | 'save' | 'ok';\n</code></pre>"},{"location":"web/features/api/types/#optionalsettingsdata","title":"OptionalSettingsData","text":"<pre><code>type OptionalSettingsData = string | null | undefined;\n</code></pre>"},{"location":"web/features/api/types/#embeddingstheme","title":"EmbeddingsTheme","text":"<pre><code>type EmbeddingsTheme = CmpTheme;\n</code></pre>"},{"location":"web/features/api/types/#consentactiontype","title":"ConsentActionType","text":"<pre><code>export type ConsentActionType = 'onAcceptAllServices' | 'onDenyAllServices' | 'onEssentialChange' | 'onInitialPageLoad' | 'onNonEURegion' | 'onSessionRestored' | 'onTcfStringChange' | 'onUpdateServices' | 'onMobileSessionRestore';\n</code></pre>"},{"location":"web/features/api/types/#settingtype","title":"SettingType","text":"<pre><code>type SettingType = 'TCF' | 'GDPR' | 'CCPA';\n</code></pre>"},{"location":"web/features/api/types/#consenttype","title":"ConsentType","text":"<pre><code>type ConsentType = 'IMPLICIT' | 'EXPLICIT';\n</code></pre>"},{"location":"web/features/custom-css/configuration/","title":"Custom CSS usage","text":"<p>To offer the utmost degree of customization, V3 allows direct addressing of all elements within the Consent Management Platform (CMP) using custom CSS.</p>"},{"location":"web/features/custom-css/configuration/#applying-css-changes","title":"Applying CSS changes","text":"<p>To enable the utilization of custom CSS, it is necessary to input your CSS code into the 'Custom CSS' field. This field is accessible within the Usercentrics Admin Interface under the 'Appearance' -&gt; 'Styling' section. It is noteworthy that a key distinction between V2 and V3 lies in their handling of custom CSS. In V2, styling was limited to a predefined set of classes, while in V3, custom CSS is not parsed in any way, but is directly embedded within a <code>&lt;style&gt;</code> tag in the Shadow DOM housing the CMP.</p> <p>Disclaimer</p> <p>By using Custom CSS, you will be in control of your custom UI. Please be aware that your CSS adjustments will affect the layout of your CMP and possibly also of your website. You'll make these adjustments at your own risk and outside of the sphere of the Usercentrics support.</p>"},{"location":"web/features/custom-css/configuration/#entry-points","title":"Entry points","text":"<p>To enhance the usability of custom CSS, user-friendly selectors have been introduced for the most frequently requested elements that can be modified within the CMP. Presented below is a list of these selectors. </p>"},{"location":"web/features/custom-css/configuration/#cmp","title":"CMP","text":"CSS Selector Description Visual Guide Link <code>#uc-main-dialog</code> References the main CMP container Visual Guide <code>#uc-privacy-title</code> References the title in the main CMP text area Visual Guide <code>#uc-privacy-description</code> References the description in the main CMP text area Visual Guide <code>#more</code> References the \"More\" action button Visual Guide <code>#deny</code> References the \"Deny\" action button Visual Guide <code>#accept</code> References the \"Accept\" action button Visual Guide <code>#save</code> References the \"Save\" action button Visual Guide <code>.uc-button-link</code> References every link under the CMP text area Visual Guide <code>.uc-toggle</code> References every toggle in the CMP Visual Guide <code>#uc-[identifier]-[id]-toggle</code> References a specific toggle in the CMP Visual Guide <code>#uc-tabs-header</code> References the second layer tab header Visual Guide <code>.uc-expandable-card</code> References every expandable card in the CMP Visual Guide <code>#controller-id-item</code> References the Controller ID specific expandable card Visual Guide <code>.uc-details-title</code> References every title for every service section inside the expandable cards Visual Guide <code>.uc-details-description</code> References every description in every service section inside the expandable cards Visual Guide <code>.uc-details-tag</code> References every tag in every service section inside the expandable cards Visual Guide"},{"location":"web/features/custom-css/configuration/#service-modal","title":"Service modal","text":"<p>When a service (or a subservice) is opened in a standalone view, a modal is generated for this specific purpose. Multiple modals can be open at the same time and they share their internal structure with the expandable cards within the CMP. As a result, <code>.uc-details-[..]</code> namespaced selectors such as <code>.uc-details-title</code> and <code>.uc-details-description</code> are also applicable within this context. The modal-specfic entry points are:</p> CSS Selector Description Visual Guide Link <code>.uc-modal-overlay</code> References every modal wrapper Visual Guide <code>.uc-modal</code> References every modal main container Visual Guide <code>.uc-modal-header</code> References every modal header element Visual Guide <code>.uc-modal-footer</code> References every modal footer element Visual Guide <p>Info</p> <p>Read more about how to style both the CMP and modals conditionally under Conditional Styling</p> <p>Tip</p> <p>It is important to emphasize that custom CSS can technically be applied to any element; however, these predefined entry points are provided to streamline the customization process for your convenience.</p>"},{"location":"web/features/custom-css/configuration/#conditional-styling","title":"Conditional styling","text":"<p>The selector <code>#uc-main-dialog</code> designates the primary container within the CMP. </p> <p>Illustration</p> <p> </p> <p>This container may have additional classes that allow for the targeting of elements on specific CMP layers or under specific device and configuration conditions. To apply CSS targeting based on devices or layers, these classes can be concatenated with the selector for the main container. The following classes represent various device-related criteria, layer distinctions, language direction, and framework indicators available for customization on the main dialog container.</p>"},{"location":"web/features/custom-css/configuration/#devices","title":"Devices","text":"Class Screen size Breakpoint <code>.xs</code> Extra small &lt; 360 px <code>.mobile</code> Small &gt; 360 px <code>.tablet</code> Medium &gt; 768 px <code>.desktop</code> Large &gt; 1024 px"},{"location":"web/features/custom-css/configuration/#layers","title":"Layers","text":"Class Layer name <code>.first</code> First layer <code>.second</code> Second layer"},{"location":"web/features/custom-css/configuration/#language-direction","title":"Language direction","text":"Class Language Direction <code>.ltr</code> Left-to-Right <code>.rtl</code> Right-to-Left"},{"location":"web/features/custom-css/configuration/#framework-indicator","title":"Framework indicator","text":"Class Legal Framework <code>.gpdr</code> General Data Protection Regulation (GDPR) <code>.tcf</code> Transparency and Consent Framework (TCF) <code>.ccpa</code> California Consumer Privacy Act (CCPA)"},{"location":"web/features/custom-css/configuration/#examples-cmp","title":"Examples (CMP)","text":"<pre><code>#uc-main-dialog.mobile.second {\n    /* Custom CSS styles for the cmp container on the second layer on mobile devices */\n    /* Add your styles here */\n}\n</code></pre> <p>If you intend to direct your styling towards a specific element within the CMP on a particular device, you can utilize the device modifier by attaching it to the main container as the root targeting element.</p> <pre><code>#uc-main-dialog.tablet .uc-expandable-card {\n    /* Custom CSS styles for expandable cards on tablet */\n    /* Add your styles here */\n}\n</code></pre>"},{"location":"web/features/custom-css/configuration/#service-modal_1","title":"Service modal","text":"<p>The selector <code>.uc-modal-overlay</code> designates every primary modal wrapper. </p> <p>Illustration</p> <p> </p> <p>The service modal elements exist as standalone components outside the primary CMP container. As a result, the device-related classes are also present on the modal wrappers.</p>"},{"location":"web/features/custom-css/configuration/#examples-modal","title":"Examples (Modal)","text":"<pre><code>.uc-modal-wrapper.desktop .uc-details-title {\n    /* Custom CSS styles for modal service section titles on desktop */\n    /* Add your styles here */\n}\n\n.uc-modal-footer button {\n    /* Custom CSS styles for the modal footer button */\n    /* Add your styles here */\n}\n</code></pre> <p>Tip</p> <p>It is worth noting that the utilization of our device modifier is optional, as you can place your own media queries for precise screen targeting within Custom CSS if this is more suitable.</p>"},{"location":"web/features/custom-css/configuration/#visual-guide","title":"Visual guide","text":""},{"location":"web/features/custom-css/configuration/#cmp-first-layer","title":"CMP First Layer","text":"<p>Illustration</p> <p> </p>"},{"location":"web/features/custom-css/configuration/#cmp-second-layer","title":"CMP Second Layer","text":"<p>Illustration (1 / 2)</p> <p> </p> <p>Illustration (2 / 2)</p> <p> </p>"},{"location":"web/features/custom-css/configuration/#service-modal_2","title":"Service Modal","text":"<p>Illustration</p> <p> </p>"},{"location":"web/features/embeddings/embeddings/","title":"Embeddings","text":"<p>Design your privacy policy page with our embeddings so you don't have to maintain the difference between your privacy policy and your CMP. Keep your legally required information easily up to date, instead of extracting the information from our CMP and manually integrate it into your privacy policy page.</p>"},{"location":"web/features/embeddings/embeddings/#coming-from-v2","title":"Coming from V2?","text":"<p>If you already have an implementation for Embeddings on your website using our CMP V2, please refer to the Migration Guide.</p>"},{"location":"web/features/embeddings/embeddings/#embedding-all-dps","title":"Embedding all DPS","text":"<p>In order to simplify the Embeddings usage, in this new version, the embeddings were streamlined to be a reflection of the CMP itself. That means that all the information present on the CMP will also be present on the Embeddings.</p>"},{"location":"web/features/embeddings/embeddings/#example","title":"Example","text":"GDPRTCF <pre><code>&lt;div class=\"uc-embed\"&gt;&lt;/div&gt;\n</code></pre> <pre><code>&lt;div class=\"uc-embed-tcf\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"web/features/embeddings/embeddings/#gdpr","title":"GDPR","text":""},{"location":"web/features/embeddings/embeddings/#embedding-a-specific-dps","title":"Embedding a specific DPS","text":"<p>You can also choose to only embed one single DPS instead, for that you should use the properties <code>uc-embed-type</code> and <code>uc-embed-service-id</code> for both the type of embed and the ID of the service, respectively.</p>"},{"location":"web/features/embeddings/embeddings/#example_1","title":"Example","text":"<pre><code>    &lt;div \n      class=\"uc-embed\"\n      uc-embed-type=\"service-specific\"\n      uc-embed-service-id=\"BJz7qNsdj-7\"&gt;\n    &lt;/div&gt;\n</code></pre> Illustration"},{"location":"web/features/embeddings/embeddings/#embedding-categories","title":"Embedding Categories","text":"<p>You can choose to either display all Categories information (that includes their respective services) or choose to only display Categories (without their respective services).</p>"},{"location":"web/features/embeddings/embeddings/#example_2","title":"Example","text":"Categories (with Service information)Categories only <pre><code>&lt;div\n  class=\"uc-embed\"\n  uc-embed-type=\"category\"&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>&lt;div\n  class=\"uc-embed\"\n  uc-embed-type=\"category-only\"&gt;\n&lt;/div&gt;\n</code></pre> Illustration uc-embed-type=\"category\"uc-embed-type=\"category-only\""},{"location":"web/features/embeddings/embeddings/#tcf","title":"TCF","text":""},{"location":"web/features/embeddings/embeddings/#embedding-purposes","title":"Embedding Purposes","text":"<p>When using the TCF option, you can embed Purposes using the following example.</p>"},{"location":"web/features/embeddings/embeddings/#example_3","title":"Example","text":"<pre><code>    &lt;div\n      class=\"uc-embed-tcf\"\n      uc-embed-type=\"purposes\"&gt;\n    &lt;/div&gt;\n</code></pre> Illustration"},{"location":"web/features/embeddings/embeddings/#embedding-vendors","title":"Embedding Vendors","text":"<p>When using the TCF option, you can embed Vendors using the following example.</p>"},{"location":"web/features/embeddings/embeddings/#example_4","title":"Example","text":"<pre><code>    &lt;div\n      class=\"uc-embed-tcf\"\n      uc-embed-type=\"vendors\"&gt;\n    &lt;/div&gt;\n</code></pre> Illustration"},{"location":"web/features/embeddings/embeddings/#other-properties","title":"Other properties","text":"<p>The following properties are applicable to any configuration, regardless of the legislation (GDPR and/or TCF), unless stated otherwise.</p>"},{"location":"web/features/embeddings/embeddings/#showhide-toggles","title":"Show/Hide Toggles","text":"<p>In order to show or hide all toggles, you should use the property <code>uc-embed-show-toggle</code>. By default this is set to false, meaning no toggles will be shown.</p> Illustration uc-embed-show-toggle=\"true\"uc-embed-show-toggle=\"false\" <p></p> <p></p>"},{"location":"web/features/embeddings/embeddings/#properties","title":"Properties","text":""},{"location":"web/features/embeddings/embeddings/#class","title":"class","text":"<p>Can be either <code>uc-embed</code> if you are on GDPR and <code>uc-embed-tcf</code> if you are on TCF.</p> Value Description uc-embed Embeddings for GDPR uc-embed-tcf Embeddings for TCF"},{"location":"web/features/embeddings/embeddings/#uc-embed-show-toggle","title":"uc-embed-show-toggle","text":"<p>You can choose to show or hide toggles on the Embeddings. Its value is <code>false</code> by default.</p> Value Description true Shows all toggles false (default) Hides all toggles"},{"location":"web/features/embeddings/embeddings/#uc-embed-service-id","title":"uc-embed-service-id","text":"<p>This property is only applicablen when <code>class=\"uc-embed\"</code></p> <p>To be used together with <code>uc-embed-type=\"service-specific\"</code>. It should hold the Service ID to be displayed.</p>"},{"location":"web/features/embeddings/embeddings/#uc-embed-type","title":"uc-embed-type","text":"<p>Choose what type of information is to be displayed on the Embeddings. Its value is <code>all</code> by default.</p> Value Description all (default) Embeds all the DPS information category Embeds categories with their respective services category-only Embeds only categories service-specific Embeds a single service (used together with <code>uc-embed-service-id</code>) purposes Embeds only purposes (TCF specific) vendors Embeds only vendors (TCF specific)"},{"location":"web/features/events/consent-events/","title":"Consent events","text":"<p>Usercentrics provides Data Layer and Window events that specifically fire on consent changes.</p> <p>You can check the contents of the dataLayer by using <code>window.dataLayer</code></p> <p>Below the structure of the <code>consent_status</code> is represented:</p> <pre><code>{\n    \"action\": \"onInitialPageLoad\",\n    \"event\": \"consent_status\",\n    \"type\": \"EXPLICIT\",\n    \"Service One\": true,\n    \"Usercentrics Consent Management Platform\": true,\n    \"Service Two\": false,\n    \"ucCategory\": {\n      \"essential\": true,\n      \"functional\": false,\n      \"marketing\": null,\n    },\n    (...)\n}\n</code></pre> Property Description action The action that triggered the event event Name of the event (<code>consent_status</code>) type Type of the event ucCategory Object containing the identifier of all the categories and their consent status <code>SERVICE_NAME</code> Entry that contains the status of the service"},{"location":"web/features/events/consent-events/#action","title":"action","text":"<p>The action that triggered the event. Below are all the possible values for this property:</p> Value Description onAcceptAllServices Triggered once you click \u201cAccept All\u201d onDenyAllServices Triggered once you click \u201cDeny All\u201d onEssentialChange onInitialPageLoad Triggered on page load onNonEURegion onSessionRestored Triggered in one of these three situations: <ul><li>When you replace current consents by using a given Controller ID </li><li>When you use Cross Domain Consent Sharing </li><li>Via WebView User Session Continuity</li></ul> onTcfStringChange onUpdateServices Triggered once you edit a specific set of services or a single service and these choices are saved. onMobileSessionRestore"},{"location":"web/features/events/consent-events/#type","title":"type","text":"<p>Type of the event. Below are all the possible values for this property:</p> Value Description <code>IMPLICIT</code> When the user didn't interact with the banner <code>EXPLICIT</code> When the user actively gives any type of consent"},{"location":"web/features/events/consent-events/#uccategory","title":"ucCategory","text":"<p>Object containing the identifier of all the categories and their consent status. The consent status in this object can either be:</p> Value Description <code>true</code> If all services belonging to this category have the state <code>true</code> <code>false</code> If all services belonging to this category have the state <code>false</code> <code>null</code> If services belonging to this category have mixed consent states: e.g. Marketing: null if one service is false while other services in this category are true"},{"location":"web/features/events/uc-ui-cmp-event/","title":"Uc ui cmp event","text":"<p>The <code>UC_UI_CMP_EVENT</code> event is triggered by the most important actions that can be performed in the CMP, enabling you to listen to user interactions.</p> <p>This event might prove useful when trying to compare the different variants when using the AB testing feature</p> <p>The structure of the detail (<code>event.detail</code>) is the following: <pre><code>{\n  abTestVariant: undefined,\n  source: \"second\",\n  type: \"CMP_SHOWN\"\n}\n</code></pre></p>"},{"location":"web/features/events/uc-ui-cmp-event/#abtestvariant","title":"abTestVariant","text":"<p>String that identifies the AB Test Variant currently in use, if none, the value will be <code>undefined</code>.</p>"},{"location":"web/features/events/uc-ui-cmp-event/#source","title":"source","text":"<p>Where the event was triggered, it can be:</p> Source Description \"none\" Triggered when the CMP was not being shown \"button\" Triggered when the Privacy Button was being shown \"first\" Triggered when the First Layer was being shown \"second\" Triggered when the Second Layer was being shown \"embeddings\" Triggers when the Embeddings were being shown \"__ucCmp\" Triggered by the <code>__ucCmp</code> window object"},{"location":"web/features/events/uc-ui-cmp-event/#type","title":"type","text":"Event Name Description CMP_SHOWN Triggered when the CMP is shown ACCEPT_ALL Triggered by clicking the Accept All button DENY_ALL Triggered by clicking the Deny All button SAVE Triggered by clicking the Save button MORE_INFORMATION_LINK Triggered by clicking the More Information button IMPRINT_LINK Triggered by clicking the Imprint link PRIVACY_POLICY_LINK Triggered by clicking the Privacy Policy link"},{"location":"web/features/events/uc-ui-cmp-event/#example","title":"Example","text":"Example<pre><code>window.addEventListener('UC_UI_CMP_EVENT', function(event) {\n  console.log('UC_UI_CMP_EVENT event detail', event.detail)\n});\n</code></pre>"},{"location":"web/features/events/uc-ui-initialized/","title":"Uc ui initialized","text":"<p>This is an example of how to wait for the CMP to initialise before executing code</p>"},{"location":"web/features/events/uc-ui-initialized/#example","title":"Example","text":"Example<pre><code>window.addEventListener('UC_UI_INITIALIZED', function(event) {\n  // Initialized\n});\n</code></pre>"},{"location":"web/features/events/uc-ui-view-changed/","title":"Uc ui view changed","text":"<p>This event gets triggered when the user:</p> <ul> <li>Opens a layer</li> <li>Switches from layer one to layer two</li> <li>Switches from layer two to layer one</li> <li>Closes all layers</li> </ul> <p>The event also holds additional information with more details about the user behaviour. It is possible to know the current and previous layer displayed to the user.</p> <p>Possible values for the additional data:</p> Value Description first The first layer none No layer is/was shown button The Privacy Button second The second Layer"},{"location":"web/features/events/uc-ui-view-changed/#example","title":"Example","text":"Example<pre><code>window.addEventListener('UC_UI_VIEW_CHANGED', function(event) {\n  console.log('Current view is: ' + event.detail.view);\n  console.log('Previous view is: ' + event.detail.previousView);\n});\n</code></pre>"},{"location":"web/features/events/examples/add-script-to-head/","title":"Add a script to the head via Event Listener","text":""},{"location":"web/features/events/examples/add-script-to-head/#example-1","title":"Example 1","text":"<p>This example shows how to inject the script tag of a service into the <code>&lt;head&gt;</code> element of the page when a user gives consent. If the user gave consent in the past, the iframe will be loaded after the page loads.</p> <pre><code>&lt;script&gt;\n  window.addEventListener('ucEvent', function (e) {\n  if (e.detail.type == 'EXPLICIT' &amp;&amp; e.detail['SERVICE_NAME']) {\n    const sc = eval(document.createElement('script'));\n    sc.setAttribute('src', 'SCRIPT_SRC');\n    sc.setAttribute('type', 'text/javascript');\n    document.head.appendChild(sc);\n  }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/add-script-to-head/#example-2","title":"Example 2","text":"<p>This example shows how to inject script tags for services that consent has previously been given for, i.e. on page re-visit or reload.</p> <pre><code>&lt;script&gt;\n  window.addEventListener('UC_UI_INITIALIZED', function (event) {\n  // initialized\n  if (__ucCmp.getServices().filter((data) =&gt; (data.id === 'SERVICE_ID') &amp; (data.consent.status === true)).length == 1) {\n    const sc = eval(document.createElement('script'));\n    sc.setAttribute('src', 'SCRIPT_SRC');\n    sc.setAttribute('type', 'text/javascript');\n    document.head.appendChild(sc);\n  }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/first-visit/","title":"Detecting first-time visits by listening to the consent status in dataLayer","text":"<pre><code>&lt;script&gt;\n  var page = 0;\n  window.addEventListener('uc-event', function (e) {\n    if (e.detail.event == 'consent_status' &amp;&amp; e.detail.type == 'implicit' &amp;&amp; page == 0) {\n      page = 1;\n      dataLayer.push('FirstUserVisit');\n    } else {\n      if (e.detail.event == 'consent_status' &amp;&amp; e.detail.type == 'explicit' &amp;&amp; page == 0) {\n        page = 1;\n        dataLayer.push('UserAlreadyConsented');\n      } else {\n        if (e.detail.event == 'consent_status' &amp;&amp; e.detail.type == 'explicit' &amp;&amp; page == 1) {\n          dataLayer.push('UserChangedConsents');\n        }\n      }\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/hide-iframes/","title":"Hide iframes when the banner is shown","text":"<p>Requirements</p> <p>In both examples it is necessary to add a <code>&lt;div&gt;</code> in the place where you want to add the iframe <pre><code>&lt;div id=\"log\"&gt;&lt;/div&gt;\n</code></pre></p> <pre><code>&lt;script&gt;\n  window.addEventListener(\"CMP_SHOWN\", function (e) {\n    document.getElementById('log').innerHTML = '';\n  }\n  });\n  window.addEventListener(\"SAVE\", function (e) {\n    document.getElementById('log').innerHTML = '&lt;iframe id=\"IFRAME_ID\" src=\"IFRAME_SRC\"&gt;&lt;/iframe&gt;';\n  }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/load-iframe/","title":"Load iframe via Event Listener","text":"<p>You can load iframes for services via an event listener. Below are two different examples, one with the <code>consent_status</code> event, and another with the <code>UC_UI_INITIALIZED</code> event.</p> <p>Requirements</p> <p>In both examples it is necessary to add a <code>&lt;div&gt;</code> in the place where you want to add the iframe <pre><code>&lt;div id=\"log\"&gt;&lt;/div&gt;\n</code></pre></p>"},{"location":"web/features/events/examples/load-iframe/#consent_status","title":"<code>consent_status</code>","text":"<p>In this example, the iframe is injected when the user gives consent. If the user gave consent in the past the iframe will be injected after page load.</p> <p>If during the session a user decides to deny consent, the iframe will also be removed without the need of refreshing the page.</p> <pre><code>&lt;script&gt;\n  window.addEventListener('ucEvent', function (e) {\n  if (e.detail.type == 'EXPLICIT' &amp;&amp; e.detail['SERVICE_NAME']) {\n    document.getElementById('log').innerHTML =\n      '&lt;iframe frameborder=\"0\" height=\"200\" width=\"200\" src=\"IFRAME_SRC\"&gt;&lt;/iframe&gt;';\n  } else {\n    document.getElementById('log').innerHTML = '';\n  }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/load-iframe/#uc_ui_initialized","title":"<code>UC_UI_INITIALIZED</code>","text":"<p>This example only works if the user gave consent in the past, or by reloading after consent is given.</p> <pre><code>&lt;script&gt;\n  window.addEventListener('UC_UI_INITIALIZED', function (event) {\n  if (__ucCmp.getServices().filter((data) =&gt; (data.id === 'SERVICE_ID') &amp; (data.consent.status === true)).length == 0) {\n    document.getElementById('log').innerHTML = '';\n  } else {\n    document.getElementById('log').innerHTML =\n      '&lt;iframe id=\"IFRAME_ID\" src=\"IFRAME_SCR\"&gt;&lt;/iframe&gt;';\n  }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/reload-page/","title":"Reload page after customer gives or changes consents","text":"<p>This script will perform a page refresh when a user gives or changes their consents.</p> <p>This script sets a variable to differentiate between the page load and the consent change</p> <pre><code>&lt;script&gt;\n  var page = 0;\n  window.addEventListener('uc-event', function (e) {\n    if (e.detail.event == 'consent_status' &amp;&amp; e.detail.type == 'implicit' &amp;&amp; page == 0) {\n      page = 1;\n    } else {\n      if (e.detail.event == 'consent_status' &amp;&amp; e.detail.type == 'explicit' &amp;&amp; page == 0) {\n        page = 1;\n      } else {\n        if (e.detail.event == 'consent_status' &amp;&amp; e.detail.type == 'explicit' &amp;&amp; page == 1) {\n          location.reload();\n        }\n      }\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/events/examples/window-events/","title":"Listening to Window Event dispatches","text":"<p>It is also possible to listen to events that we dispatch with Window Event.</p> <p>The window event name can be configured in the admin interface under Implementation -&gt; Data Layer and Events -&gt; Window Event.</p> <p>In the following example we assume that you configured the Window Event events that we dispatch, with the name \"ucEvent\" in your admin interface.</p> <pre><code>window.addEventListener(\"ucEvent\", function (e) {    \n  if(e.detail &amp;&amp; e.detail.event == \"consent_status\") {\n    // check for consent status of service \"Google Ads Remarketing\"\n    if(e.detail['Google Ads Remarketing'] === true) {\n      console.log('Google Ads Remarketing has consent');\n    }\n    else {\n      console.log('Google Ads Remarketing has no consent');\n    }\n  }\n});\n</code></pre>"},{"location":"web/features/google-consent-mode/general-information/","title":"General information","text":"<p>With Consent Mode Google has provided a solution for advertisers to adjust the behaviour of Google tags on their website based on the user consent status. </p> <p>By pairing the Consent Mode API with the Usercentrics Consent Management Platform (CMP) advertisers can indicate if the user has given consent for cookie usage related to ads and/or advertising. The supported Google tags will respect this signal and adjust their behaviour accordingly, as they will only utilize cookies if consent was granted for the specific purposes.</p> <p>Google also supports the IABs TCF 2.2 framework with its ad systems. Consent Mode is meant to be used by advertisers not using a TCF 2.2 CMP implementation.</p> <p>You may use Consent Mode instead of initially blocking the Google tags. The benefit is that Google will use the signal to adjust the behaviour of their tags based on the user's consent in the Usercentrics CMP instead of having them blocked when no consent is given.</p> <p>Details on the tag behaviour with Consent Mode can be found here.</p>"},{"location":"web/features/google-consent-mode/implementation-example/","title":"Implementation example","text":"<p>Implementing Consent Mode with the Usercentrics CMP solution as an alternative to prior blocking requires the following:</p>"},{"location":"web/features/google-consent-mode/implementation-example/#step-1-adjust-the-existing-google-tag-manager-code","title":"Step 1: Adjust the existing Google Tag Manager code","text":"<p>Your current Google Tag Manager code may currently look like this:</p> <pre><code>&lt;script type=\"text/plain\" data-usercentrics=\"Google Tag Manager\"&gt;\n(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\nnew Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\nj=d.createElement(s),dl=l!='dataLayer'?'&amp;l='+l:'';j.async=true;j.src=\n'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n})(window,document,\u2019script','dataLayer','GTM-XXXXXX');&lt;/script&gt;\n</code></pre> <p>This needs to be changed to the following:</p> <p>Please make sure to put these scripts at the very top of the head tag and on the same order as below.</p> <p>To adjust the default measurement capabilities, set the default values for the command to run on every page of your site before any commands that send measurement data (such as config or event). For more information please check Adjust Tag Behavior</p> <pre><code>    &lt;script type=\"text/javascript\"&gt;\n        // create dataLayer\n        window.dataLayer = window.dataLayer || [];\n        function gtag() {\n            dataLayer.push(arguments);\n        }\n\n        // set \"denied\" as default for both ad and analytics storage,\n        gtag(\"consent\", \"default\", {\n            ad_storage: \"denied\",\n            analytics_storage: \"denied\",\n            wait_for_update: 2000 // milliseconds to wait for update\n        });\n\n        // Enable ads data redaction by default [optional]\n        gtag(\"set\", \"ads_data_redaction\", true);\n    &lt;/script&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        // Google Tag Manager\n        (function(w, d, s, l, i) {\n            w[l] = w[l] || [];\n            w[l].push({\n                'gtm.start': new Date().getTime(),\n                event: 'gtm.js'\n            });\n            var f = d.getElementsByTagName(s)[0],\n                j = d.createElement(s),\n                dl = l != 'dataLayer' ? '&amp;l=' + l : '';\n            j.async = true;\n            j.src =\n                'https://www.googletagmanager.com/gtm.js?id=' + i + dl;\n            f.parentNode.insertBefore(j, f);\n        })(window, document, 'script', 'dataLayer', 'GTM-XXXXX'); //replace GTM-XXXXXX with Google Tag Manager ID\n    &lt;/script&gt;\n</code></pre> Explanation <ul> <li>The first part of the script initializes a plain data layer and provides the gtag function before the gtm.js/gtag.js is loaded</li> </ul> <pre><code>&lt;script type=\"text/javascript\"&gt;\n    // create dataLayer\n    window.dataLayer = window.dataLayer || [];\n    function gtag() {\n        dataLayer.push(arguments);\n    }\n</code></pre> <ul> <li>In the middle part of the code the default values for both Consent Mode keys ad_storage and analytics_storage are defined. Additionally we set ads_data_redaction to true which means, that ad-click identifiers (e.g., GCLID / DCLID) in consent and conversion pings are redacted and network requests will also be sent through a cookieless domain. This is only in effect when ad_storage is set to 'denied', if ad_storage is 'granted', ads_data_redaction has no effect. Setting ads_data_redaction to true is optional. More details on behaviour can be found here.</li> </ul> <pre><code>  // set \"denied\" as default for both ad and analytics storage,\n  gtag(\"consent\", \"default\", {\n      ad_storage: \"denied\",\n      analytics_storage: \"denied\",\n      wait_for_update: 2000 // milliseconds to wait for update\n  });\n\n    // Enable ads data redaction by default [optional]\n    gtag(\"set\", \"ads_data_redaction\", true);\n\n    &lt;/script&gt;    \n</code></pre> <ul> <li>The last part is the Google Tag Manager script. If you want to use Consent Mode as alternative to prior blocking, the type of the script tag is \"text/javascript\". If you use the Smart Data Protector you may have to exclude Google Tag Manager, Google Analytics and/or Google Ads Remarkting from being automatically blocked by the SDP.</li> </ul> <pre><code>&lt;script type=\"text/javascript\"&gt;\n    // Google Tag Manager\n    (function(w, d, s, l, i) { \n        w[l] = w[l] || [];\n        w[l].push({\n            'gtm.start': new Date().getTime(),\n            event: 'gtm.js'\n        });\n        var f = d.getElementsByTagName(s)[0],\n            j = d.createElement(s),\n            dl = l != 'dataLayer' ? '&amp;l=' + l : '';\n        j.async = true;\n        j.src =\n            'https://www.googletagmanager.com/gtm.js?id=' + i + dl;\n        f.parentNode.insertBefore(j, f);\n    })(window, document, 'script', 'dataLayer', 'GTM-XXXXX'); //replace GTM-XXXXXX with Google Tag Manager ID\n&lt;/script&gt;\n</code></pre>"},{"location":"web/features/google-consent-mode/implementation-example/#step-2-optional-use-the-usercentrics-cmp-events-to-signal-the-consent-status-via-the-consent-mode-api-for-custom-data-processing-services","title":"Step 2 (optional): Use the Usercentrics CMP events to signal the consent status via the Consent Mode API for Custom Data Processing Services","text":"<p>In case you use custom data processing services, follow the steps below. Otherwise, please jump to step 3.</p> <p>In order to trigger the Consent Mode API for custom Data Processing Services, you need to first add a window event. On the Admin Interface under Implementation -&gt; Web please click on Add new Data Layer and select Window Event. Then expand the Window Event card and on the Window Event Name field, please insert the name of the event. It can be anything, but just make sure to use the same event name on the script below. Then click on the + button and click Save.</p> <p>Assuming you already have a window event in your Usercentrics CMP, add the following script to call the Consent Mode API in order to update the consent mode keys based on the consent status. In this example we use the event name 'ucEvent' and the 2 custom data processing services 'Google Ads Remarketing' and 'Google Analytics'. (If you have chosen to use different names for the data processing services use your customized ones instead.)</p> <pre><code>&lt;script type=\"text/javascript\"&gt;\n// Please replace 'ucEvent' with the event you have just created\nwindow.addEventListener(\"ucEvent\", function (e) {\n    if( e.detail &amp;&amp; e.detail.event == \"consent_status\") {\n        // Please replace the analytics service name here with the customized service    \n        var ucAnalyticsService = 'Google Analytics';\n        // Please replace the ad service name here with the customized service\n        var ucAdService = 'Google Ads Remarketing';\n\n        if(e.detail.hasOwnProperty(ucAnalyticsService) &amp;&amp; e.detail.hasOwnProperty(ucAdService))\n        {\n            gtag(\"consent\", \"update\", {\n                ad_storage: e.detail[ucAdService] ? 'granted':'denied',\n                analytics_storage: e.detail[ucAnalyticsService] ? 'granted':'denied'\n            });\n        }\n        else {            \n            if(e.detail.hasOwnProperty(ucAdService)) {\n                gtag(\"consent\", \"update\", {\n                    ad_storage: e.detail[ucAdService] ? 'granted':'denied'\n                });\n            }            \n            if(e.detail.hasOwnProperty(ucAnalyticsService)) {\n              gtag(\"consent\", \"update\", {\n                    analytics_storage: e.detail[ucAnalyticsService] ? 'granted':'denied'\n                });\n            }\n        }\n    }\n});\n&lt;/script&gt;\n</code></pre> Explanation <ul> <li>The event is fired on each page load and every time the user actively changes his consent decision.</li> <li>Based on the status for both services the Consent Mode API is called to signal the granted or denied state.</li> </ul>"},{"location":"web/features/google-consent-mode/implementation-example/#step-3-enable-google-consent-mode-on-the-usercentrics-admin-interface","title":"Step 3: Enable Google Consent Mode on the Usercentrics Admin Interface","text":"<p>For new customers, Google Consent Mode is enabled by default.</p> <p>Assuming you've completed the steps above, it's now time to enable the feature.</p> <p>Go to Usercentrics Admin Interface -&gt; Configuration -&gt; CMP Settings, enable Google Consent Mode and click Save.</p>"},{"location":"web/features/google-consent-mode/pre-requisites/","title":"Pre requisites","text":"<p>Consent Mode requires that you use gtag.js or Google Tag Manager. If you use older tags versions (like ga.js or analytics.js) you need to update to the latest tag versions first.</p>"},{"location":"web/features/google-consent-mode/supported-google-services/","title":"Supported google services","text":"<p>The following Google services currently support the Consent Mode:</p> Name Template Id Consent Type Notes Google Analytics HkocEodjb7 analytics_storage - Google Analytics 4 87JYasXPF analytics_storage - Google Ads Conversion Tracking twMyStLkn ad_storage - Google Ads Remarketing B1Hk_zoTX ad_storage - Conversion Linker LykAT-gy ad_storage - DoubleClick Floodlight ByzZ5EsOsZX ad_storage DEPRECATED Google Campaign Manager pxiRY9112 ad_storage DEPRECATED Display &amp; Video 360 UekC8ye4S ad_storage - Search Ads 360 DHS2sEi4b ad_storage - Google Ads S1_9Vsuj-Q ad_storage - Google Campaign Manager 360 dyHOCwp5Y ad_storage -"},{"location":"web/features/google-tag-manager/configuration/","title":"Google Tag Manager Configuration","text":"<p>Get detailed information on how to configure your Google Tag Manager with the Usercentrics Browser SDK.</p>"},{"location":"web/features/google-tag-manager/configuration/#prerequisites","title":"Prerequisites","text":"<p>In order to follow this documentation, we assume you have:</p> <ul> <li>A Google Tag Manager account.</li> <li>Created a Google Tag Manager container on you website.</li> <li>Inserted the Google Tag Manager script into your website.</li> <li> <p>Inserted your Usercentrics script into your website. Learn how to do this here.</p> <p>You can also directly integrate the Usercentrics Script via the Google Tag Manager. Usercentrics does NOT recommend this. However, you can learn how to do it here.</p> </li> <li> <p>Your personal Usercentrics script</p> </li> </ul>"},{"location":"web/features/google-tag-manager/configuration/#background-information","title":"Background Information","text":"<p>Google Tag Manager can be tricky at times. If you're having trouble understanding it, the following information is meant to clarify some basic issues:</p> <ul> <li>Google Tag Manager helps you configure when the Javascript tags on your website are activated.</li> <li>Each tag needs to have at least one trigger.</li> <li>Triggers listen for certain website events (e.g. the website is fully loaded). Once this event takes place the trigger determines if the tag is activated.</li> <li>Triggers can be firing or exception triggers:<ul> <li>Exception triggers determine when a tag is NOT fired and take precedence over other triggers.</li> <li>Firing triggers determine when a tag is fired.</li> </ul> </li> <li>Triggers can be reliant on variables. The firing of a tag will be blocked, if a condition based on the value of such a variable is not met. </li> <li>Usercentrics uses a special type of variable, a data layer variable, to communicate between your Google Tag Manager settings and your CMP.</li> </ul>"},{"location":"web/features/google-tag-manager/configuration/#adding-data-processing-technologies","title":"Adding Data-Processing Technologies","text":"<p>Note</p> <p>This documentation will use Google Analytics 4 as an example. However, the following process needs to be repeated separately for each technology.</p> <ul> <li> Replace \"Google Analytics 4\" in the naming of tags, triggers and variables with the name of the technology you are currently implementing, e.g Matomo.</li> </ul> <p>If you already have a Google Analytics 4 tag in your Google Tag Manager configuration, you can jump to the Create a new Google Analytics variable section.</p>"},{"location":"web/features/google-tag-manager/configuration/#google-consent-mode","title":"Google Consent Mode","text":"<p>Important</p> <p>The Google Consent Mode is activated by default in the Admin Interface. To deactivate the Google Consent Mode, go to the Admin Interface under Configuration / CMP Settings [CMP V2]. As the implementation differs for the Google Tags supported by the Google Consent Mode, please see our technical documentation for more information on the Google Consent Mode and the correct templates to use with your CMP. </p>"},{"location":"web/features/google-tag-manager/configuration/#create-a-new-google-analytics-4-tag","title":"Create a new Google Analytics 4 tag","text":"<ul> <li> Navigate to \"Tags\" in the side-menu and then click on \"New\".</li> <li> Add a new tag of type \"Google Analytics: GA4 Configuration\".</li> <li> Name it \"Google Analytics 4 Tag\".</li> <li> Set your Measurment ID (You can read more here)</li> <li> <p> Navigate to \"Tag firing options\" under \"Advanced Settings\" and select \"Once per page\".</p> <p>Explanation</p> <p>If you want a certain technology to fire more than once per page view, you should set the tag firing option to \"Unlimited\". \"Once per page\", however, is Usercentrics' recommended setup.</p> </li> <li> <p> Save \"Google Analytics 4 Tag\".</p> </li> </ul> <p></p>"},{"location":"web/features/google-tag-manager/configuration/#create-a-new-google-analytics-4-variable","title":"Create a new Google Analytics 4 variable","text":"<p>You have to create consent default status variables for each of your non-IAB vendor script tags so that they are not triggered without consent.</p> <ul> <li> Navigate to \"Variables\" in the side-menu and then click on \"New\".</li> <li> Add a new variable of type \"Data Layer Variable\".</li> <li> In the top left, name the variable \"Google Analytics Variable\".</li> <li> <p> Under \"Data Layer Variable Name\", insert \"Google Analytics 4\".</p> <p>Note</p> <p>Correct spelling, hyphenation and capitalization are mandatory for this field. Every technology must be added the way it is spelled in the Usercentrics Admin Interface. Here: \"Google Analytics 4\".</p> </li> <li> <p> Tick \"Set Default Value\" and set the default value to false.</p> </li> <li> Save \"Google Analytics 4 Variable\".</li> </ul> <p></p>"},{"location":"web/features/google-tag-manager/configuration/#create-a-google-analytics-4-trigger","title":"Create a Google Analytics 4 trigger","text":"<p>Note</p> <p>There are several ways to implement this logic. Usercentrics recommends the following option, however, depending on your setup, other structures might be more reasonable. </p> <ul> <li> Navigate to \"Triggers\" in the side-menu and click on \"New\".</li> <li> Add a new trigger of type \"Custom Event\".</li> <li> In the top left, name the trigger \"Google Analytics 4 Trigger\".</li> <li> Tick \"Use regex matching\" next to the \"Event Name\" input field</li> <li> <p> Under \"Event Name\", insert \"(consent_status.*)\".</p> <p>Note</p> <p>Correct spelling, hyphenation and capitalization are mandatory for this field.</p> </li> <li> <p> Tick \"Some Custom Events\".</p> </li> <li> <p> In the drop-down menus, set the following condition: \"Google Analytics 4 Variable\" contains true.</p> <p>Explanation</p> <p>The variable contains the user's consent information (variable=true - user opted in || variable=false - user opted out) for a specific technology. Hence, the trigger should only be fired (and tag therefore activated), if the variable=true.</p> </li> <li> <p> Save \"Google Analytics 4 Trigger\".</p> </li> </ul> <p></p> <ul> <li> Add the trigger to \"Google Analytics 4 Tag\".</li> </ul> <p></p> <p>Note</p> <p>Repeat this for each non-IAB vendor script in your Tag Manager.</p>"},{"location":"web/features/google-tag-manager/configuration/#testing-in-preview-mode","title":"Testing in Preview Mode","text":"<p>In order to make sure your Google Tag Manager setup works, you need to test it in preview mode.</p> <ul> <li>Activate preview mode by clicking on \"Preview\" in the top-right corner.</li> <li>Visit your website.</li> <li>Open the development tools of your browser and navigate to the \"Network\" tap.</li> <li>Network requests of the implemented data-processing technologies should not be visible, unless they were defined as \"Essential\" in your Admin Interface.</li> <li>Press \"Accept All\" on the Usercentrics CMP.</li> <li>Now network requests of the implemented data-processing technologies should be visible in the \"Network\" tap.</li> </ul>"},{"location":"web/features/interaction-analytics/csv-download/","title":"CSV Download","text":"<p>An option to download the report as CSV file for deeper insights is provided via the \u201cDownload Report\u201d button. The CSV file can be uploaded to any other data visualization tool like Google Data Studio to create custom dashboards based on your unique needs.</p> <p></p>"},{"location":"web/features/interaction-analytics/dashboards/","title":"Dashboards","text":"<p>The following dashboard provide distinctive insights into your users' behaviour with the CMP.</p>"},{"location":"web/features/interaction-analytics/dashboards/#user-interaction-kpis","title":"User Interaction KPIs","text":"<p>Get insights on the received responses for your CMP layers.</p> <p></p> <ul> <li>CMP Displays: The amount of CMP_SHOWN events for the selected time range and filter</li> <li>CMP Interactions: The amount of user consent interactions (\\({\\texttt{ACCEPT_ALL} + \\texttt{DENY_ALL} + \\texttt{SAVE}}\\))</li> <li>CMP Ignores: The difference between the shown CMP and actual interactions from users (\\({\\texttt{CMP_SHOWN} - (\\texttt{ACCEPT_ALL} + \\texttt{DENY_ALL} + \\texttt{SAVE})}\\))</li> <li>Interaction Rate: How many (in %) events were actual interactions</li> </ul>"},{"location":"web/features/interaction-analytics/dashboards/#interactions-vs-ignores","title":"Interactions vs. Ignores","text":"<p>Get insights on the Interaction performance of your current CMP configuration.</p> <p></p> <p>This graph compares the number of consent interactions (ACCEPT_ALL + DENY_ALL + SAVE) vs ignores.</p>"},{"location":"web/features/interaction-analytics/dashboards/#daily-interaction-rate","title":"Daily Interaction Rate","text":"<p>Get detailed insights on the Interaction rate over time.</p> <p></p> <ul> <li>Daily statistics on Interactions.</li> <li>Compare Interaction peaks with CMP shown peaks for an even better understanding of the data</li> <li>Compare the Interaction distribution to changes you made to your setup on a certain day</li> </ul>"},{"location":"web/features/interaction-analytics/dashboards/#displays-vs-interactions","title":"Displays vs. Interactions","text":"<p>Get a granular view of the total number of CMP displays vs consent interactions.</p> <p></p> <p>Daily total numbers on displays &amp; interactions.</p>"},{"location":"web/features/interaction-analytics/dashboards/#user-acceptance-kpis","title":"User Acceptance KPIs","text":"<p>Get insights into the type of interaction the users have with the banner.</p> <p></p> <ul> <li>Accept All: The amount of ACCEPT_ALL events for the selected time range and filter</li> <li>Deny All: The amount of DENY_ALL events for the selected time range and filter</li> <li>Custom: The amount of SAVE events for the selected time range and filter</li> <li>Accept Rate: How many (in %) consent events were actual Accepts (\\(\\frac{\\texttt{ACCEPT_ALL}}{\\texttt{ACCEPT_ALL} + \\texttt{DENY_ALL} + \\texttt{SAVE}}\\))</li> </ul>"},{"location":"web/features/interaction-analytics/dashboards/#accept-vs-deny-vs-custom","title":"Accept vs. Deny vs. Custom","text":"<p>Get insights into the consent interaction distribution.</p> <p></p> <p>Compares the weights between the different consent interactions (ACCEPT_ALL vs DENY_ALL vs SAVE).</p>"},{"location":"web/features/interaction-analytics/dashboards/#daily-accept-rate","title":"Daily Accept Rate","text":"<p>Get detailed insights on the accept rate over time.</p> <p></p> <ul> <li>Daily statistics on Accept rate.</li> <li>Compare Accept peaks with CMP shown peaks for an even better understanding of the data</li> <li>Compare the Accept rate distribution to changes you made to your setup on a certain day.</li> </ul>"},{"location":"web/features/interaction-analytics/dashboards/#accept-all-vs-deny-all-vs-custom-total","title":"Accept All vs Deny All vs Custom (Total)","text":"<p>Get a granular view of the total number of the different consent interactions.</p> <p></p> <p>Daily total numbers on Accept All vs Deny All vs Custom choice.</p>"},{"location":"web/features/interaction-analytics/dashboards/#comparison-overview","title":"Comparison Overview","text":"<p>Compare your interaction &amp; acceptance rate over the different dimensions such as country, device, layer and variant (if A/B testing is activated).</p> <p></p> <ul> <li>Identify optimization needs for specific devices in order to optimize the overall rates.</li> <li>Understand if specific banner configurations are required for specific countries.</li> <li>Understand if there is a need to further optimize the 1<sup>st</sup> or 2<sup>nd</sup> layer of your CMP.</li> <li>Have a straightforward overview of which A/B testing variant is performing better.</li> </ul>"},{"location":"web/features/interaction-analytics/faq/","title":"Faq","text":"<p>How long can the data for Interaction Analytics be accessed in the Admin Interface?</p> <p>For both Interaction Analytics &amp; Consent Analytics, the data for the last 90 days can be accessed in the Admin Interface.</p> <p>How do you handle bot traffic?</p> <p>Events triggered by bots will be recognized and counted by our product and appear in your Raw Data Download CSV with \"browser\" = \u201cbot\u201d. The dashboard in your Admin Interface won't include any bot traffic for accurate KPI measurement. Information on which bots are detected for Interaction Analytics can be found in the following FAQ.</p> <p>How do you handle page reloads?</p> <p>In case the page is being reloaded, resulting in the CMP being shown again to the user, we count a second <code>CMP_SHOWN</code>.</p> <p>How can I calculate the Interaction and Acceptance rates across platforms (web / app)?</p> <p>When using a configuration for app and web, the Interaction Analytics graphs already show the combined values. In the raw data, however, a distinction is made between the first layer (L1) and the second layer (L2) for web. In order to manually calculate a common rate for web and app from the raw data (also for different configurations), the following formulas result:</p> <p>Interaction Rate across platforms</p> <p>\\(\\frac{\\texttt{ACCEPT_ALL_L1}+\\texttt{ACCEPT_ALL_L2}+\\texttt{ACCEPT_ALL}+\\texttt{DENY_ALL_L1}+\\texttt{DENY_ALL_L2}+\\texttt{DENY_ALL}+\\texttt{SAVE_L1}+\\texttt{SAVE_L2}+\\texttt{SAVE}}{\\texttt{CMP_SHOWN}}\\)</p> <p>Accept Rate across platforms</p> <p>\\(\\frac{\\texttt{ACCEPT_ALL_L1}+\\texttt{ACCEPT_ALL_L2}+\\texttt{ACCEPT_ALL}}{\\texttt{ACCEPT_ALL_L1}+\\texttt{ACCEPT_ALL_L2}+\\texttt{ACCEPT_ALL}+\\texttt{DENY_ALL_L1}+\\texttt{DENY_ALL_L2}+\\texttt{DENY_ALL}+\\texttt{SAVE_L1}+\\texttt{SAVE_L2}+\\texttt{SAVE}}\\)</p>"},{"location":"web/features/interaction-analytics/introduction/","title":"Introduction","text":"<p>Use Interaction Analytics to get insights into how your users interact with the CMP. Keep track of important CMP KPIs to maximize data capture and study how your CMP configuration choices impact user behaviour.</p> <p></p>"},{"location":"web/features/interaction-analytics/overview/","title":"Overview","text":""},{"location":"web/features/interaction-analytics/overview/#work-with-kpis","title":"Work with KPIs","text":"CMP Displays <p>             - How often has the CMP been shown to users         </p> Interaction Rate <p>             - How many users do not interact with the CMP         </p> <p>             - To which extent are users interacting with the CMP         </p> Accept Rate <p>             - Ratio of accept all to other consent interactions         </p>"},{"location":"web/features/interaction-analytics/overview/#analyse-how-users-interact-with-the-cmp","title":"Analyse how users interact with the CMP","text":"Monitor User Interactions <p>             - How do users interact with the CMP         </p> <p>             - Recognize changes in user behaviour if you have recently made major design changes to your CMP         </p> <p>             - Identify opportunities to optimize your accept &amp; interactions rates         </p> Device-specific Rates <p>             - Are there device-based differences in user interaction with your CMP         </p> <p>             - Should you optimize for specific devices         </p> Country-specific Rates <p>             - How are users from specific countries interacting with your CMP         </p> <p>             - Does it make sense to have a separate banner for different countries         </p> Layer-specific Rates <p>             - How are users interacting with your different layers         </p> <p>             - Which layer should be a priority for optimization.         </p> A/B Testing <p>             - How are users interacting with your different A/B testing variants         </p> <p>             - Test which variants work best for your implementation and compare the KPIs.         </p>"},{"location":"web/features/interaction-analytics/overview/#interaction-analytics-vs-granular-analytics","title":"Interaction Analytics vs. Granular Analytics","text":"<p>Usercentrics provides two different ways to gain detailed insights into your users' behaviour: Interaction Analytics and Granular Analytics.</p> <p>Interaction Analytics</p> <p>Interaction Analytics gives you insights into how users react to your CMP and allows you to monitor the impact of setup changes you make. The Interaction Analytics Dashboard provides you with general KPIs of the CMP on your website, such as Interaction Rates or Accept All Rates. The provided data and graphs allow you to take data-driven business decisions and help you</p> <ul> <li>to easily keep track of the most relevant KPIs.</li> <li>to monitor the overall success of your CMP strategy.</li> <li>to get insights on how the CMP setup impacts the interactions of your website users.</li> </ul> <p>Granular Analytics</p> <p>Granular Analytics provides you with granular data based on single consent decisions for Data Processing Services. Consent decisions are explicit decisions made by users who have interacted with the CMP by clicking Accept, Deny or Save. Users who do not interact with the CMP do not take any consent decisions. The provided data and graphs allow you to get the full picture of your users' behaviour and help you</p> <ul> <li>to identify the right category for your DPS to improve the consent for specific services.</li> <li>to better understand how the consent rate for individual DPS is composed in order to improve your data-driven decision-making.</li> </ul>"},{"location":"web/features/interaction-analytics/tracked-interactions-events/","title":"Tracked interactions events","text":"<p>For Interaction Analytics the following interactions with the CMP are tracked as events and sent along with additional data to the backend.</p>"},{"location":"web/features/interaction-analytics/tracked-interactions-events/#events","title":"Events","text":"Event Description CMP_SHOWN CMP displayed to the user ACCEPT_ALL_L1 User clicked the Accept-All button on the first Layer DENY_ALL_L1 User clicked the Deny-All button on the first Layer SAVE_L1 User clicked the Save button on the first Layer ACCEPT_ALL_L2 User clicked the Accept-All button on the second Layer DENY_ALL_L2 User clicked the Deny-All button on the second Layer SAVE_L2 User clicked the Save button on the second Layer"},{"location":"web/features/interaction-analytics/tracked-interactions-events/#additional-events","title":"Additional Events","text":"<p>These events are not being used on the dashboards, but they are available on the downloadable report.</p> Event Description CCPA_TOGGLES_OFF User clicked on the OK button while CCPA toggle is off CCPA_TOGGLES_ON User clicked on the OK button while CCPA toggle is on PRIVACY_POLICY_LINK User clicked on the privacy policy link IMPRINT_LINK User clicked on the legal notice link MORE_INFORMATION_LINK User clicked on the more info link <p>Whenever the CMP is displayed, we measure a <code>CMP_SHOWN</code> event. Once the user gave a choice by clicking any CMP button or triggering any programmatic methods, we measure the choice as an event: <code>ACCEPT_ALL</code>, <code>DENY_ALL</code>, or <code>SAVE</code></p> <p>Please note that the Usercentrics Interaction Analytics tracks interactions with the CMP. We do not measure website views or bounces.</p>"},{"location":"web/features/interaction-analytics/tracked-interactions-events/#examples","title":"Examples","text":""},{"location":"web/features/interaction-analytics/tracked-interactions-events/#a-new-user-visits-the-website-for-the-first-time-and-clicks-on-the-accept-all-button","title":"A new user visits the website for the first time and clicks on the Accept-All button","text":"<p>Events</p> <p><code>CMP_SHOWN</code> and <code>ACCEPT_ALL</code></p>"},{"location":"web/features/interaction-analytics/tracked-interactions-events/#the-same-user-comes-back-the-next-day-and-the-cmp-does-not-get-displayed-again","title":"The same user comes back the next day and the CMP does not get displayed again","text":"<p>Events</p> <p>No event</p>"},{"location":"web/features/interaction-analytics/tracked-interactions-events/#the-same-user-now-clicks-on-the-privacy-button-to-check-their-current-privacy-settings-and-closes-it-afterwards","title":"The same user now clicks on the Privacy Button to check their current Privacy Settings and closes it afterwards","text":"<p>Events</p> <p><code>CMP_SHOWN</code></p>"},{"location":"web/features/interaction-analytics/tracked-interactions-events/#the-same-user-now-clicks-on-the-privacy-button-to-check-their-current-privacy-settings-and-clicks-on-the-save-button-afterward","title":"The same user now clicks on the Privacy Button to check their current Privacy Settings and clicks on the Save Button afterward","text":"<p>Events</p> <p><code>CMP_SHOWN</code> + <code>SAVE</code></p>"},{"location":"web/features/tcf2/configure-tcf-2-framework-settings/","title":"Configure TCF 2.2 Framework Settings","text":"<p>To use TCF 2.2 enable the framework in the Admin Interface under \u201cConfiguration\u201d / \u201cLegal Specifications\u201d.</p> <p>Once the framework is activated, you are able to define any settings related to the Framework Configuration, including different Resurfacing options for the UI.</p> <p>Additionally you are able to not disclose purpose 1.</p> <p></p>"},{"location":"web/features/tcf2/configure-the-design-layout/","title":"Configure the Design / Layout","text":"The CMP UILayoutStylingContent <p>The first layer contains all the textual information required by the framework, as well as the list of purposes that apply to the vendors you configured. The user may choose on this first layer to opt in/out of certain purposes or go to the second layer to view more details.</p> <p></p> <p>The second layer gives users details about the enabled vendors and purposes. On this layer the user has more detailed opt in/out options.</p> <p></p> <p>You also have the choice to decide how you want to give your users access to their current Privacy Settings - via Privacy Button or Privacy Link. </p> <p>The CMP UI is customisable and you may choose for example your background color, an overlay, fonts, headlines, logo and individual toggle and button colours.</p> <p>Under the \u201cAppearance\u201d \u2192 \u201cLayout\u201d section you may choose your layout options.</p> <p>In the \"Layout\" section you are able to edit what options do you want to show in each layer and also how you want to show Privacy Trigger.</p> <p>For the First Layer, you are able to display the following options:</p> <p></p> <ul> <li>Show Descriptions for Purposes and Stacks,</li> <li>Show the \"Deny All\" Button,</li> <li>Show Non-IAB Purposes,</li> <li>Show Toggles in First Layer, and</li> <li>Show information on data transfer outside of the EU / EEA</li> </ul> <p>For the Second Layer, you can choose to display the \"Deny All\" button:</p> <p></p> <p>For the Privacy Trigger, we offer two choices for the layout:</p> <p></p> <ul> <li>Privacy Button, where you can choose to render it on Bottom Left or Bottom Right</li> <li>Privacy Link</li> </ul> <p>Under the \u201cAppearance\u201d \u2192 \u201cStyling\u201d section you may choose your styling options.</p> <p>In the Styling section, you are presented with a significant number of options to stylize your CMP:</p> <ul> <li>Layout: You can decide to choose the colors of your CMP (Background, Text, Tabs and Links). Further you can define how round the corners of the CMP will be and activate a background shadow and overlay.</li> <li>Logo: You can display your own logo in the CMP,</li> <li>Font: You can decide if you want to use one of the system defined fonts in the CMP or if you want to use a custom font for the CMP.</li> <li>Buttons: You can define the colors of each different button and the corner radius.</li> <li>Toggles: You can define the colors for each state of a toggle, whether is active, inactive or disabled.</li> <li>Privacy Trigger: You can define style changes to the icon, where you can choose one of our system defined icons or if you want to use a custom icon. Additionally it is possible to set the color and size of the button for both desktop and mobile.</li> </ul> <p>The CMP also offers customisation options under the \u201cContent\u201d section. Some texts must remain as provided due to TCF 2.2 requirements and can not be edited.</p> <p></p> <p>Following are the customisable elements:</p> <ul> <li>Layer titels</li> <li>Additional banner messages</li> <li>Data transfer outside of the EU / EEA message</li> <li>Resurface Description for Web</li> <li>Resurface Description for App</li> <li>Imprint link URL</li> <li>Privacy policy URL</li> <li>Privacy policy link text</li> <li>Button labels</li> </ul>"},{"location":"web/features/tcf2/configure-the-vendors/","title":"Configure the Vendors","text":""},{"location":"web/features/tcf2/configure-the-vendors/#global-vendor-list-gvl","title":"Global Vendor List (GVL)","text":"<p>Under \u201cService Settings\u201d you can configure the vendors or Data Processing Services you are using on your site. The list shown under \u201cTransparency &amp; Consent Framework 2.0\u201d contains the vendors of the IAB GVL. The CMP automatically manages updates to that list. The list of available vendors is provided by the IAB and vendor information must be used as it is.</p> <p>By checking the box on the left of each vendor, you can activate the vendor. This means the user will be informed in the CMP banners that you are using this vendor on your site. You can deactivate the vendor at any time by unchecking the same checkbox.</p> <p>Data Transfer Outside of EU/EEA</p> <p>Inside each vendor, you can specify if the vendor is transferring data outside the EU / EEA\u201d. The information will be displayed inside the respective vendor on the second layer of the CMP. </p> <p></p>"},{"location":"web/features/tcf2/configure-the-vendors/#stacks","title":"Stacks","text":"<p>Stacks are combinations of Purposes and/or Special Features of processing personal data used by the participants in the Framework.</p> <p>These stacks may be used to substitute Initial Layer information about two or more Purposes and/or Special Features.</p> <p>Important</p> <p>Purposes must not be included in more than one stack and must not be presented as part of a Stack and outside of Stacks at the same time.</p> <p>Conversely, any stacks used must not include the same Purpose more than once, nor Purposes should be presented separately from stacks.</p> <p></p>"},{"location":"web/features/tcf2/configure-the-vendors/#publisher-restrictions","title":"Publisher Restrictions","text":"<p>TCF 2.2 allows you to signal restrictions on how the vendors may process personal data. It is possible to either restrict the purposes for which personal data is processed or specify the legal basis for vendors that signaled flexibility on the legal basis in the Global Vendor List.</p> <p>Once a purpose has been restricted in the Admin Interface, a vendor must respect the restriction signal that disallows the processing for the specific purpose regardless of whether or not they have declared that purpose to be flexible.</p> <p>Behaviour for flexible purposes</p> <p>In the case that a vendor declared a purpose with a default legal basis (consent or legitimate interest) but also declared this purpose as flexible, the legal basis restriction must be respected if set in the Admin Interface. That means for example if a vendor declared a purpose as legitimate interest but also declared that purpose to be flexible and the legal basis was restricted to consent, the vendor must check for the consent signal and must not apply the legitimate interest signal.</p> <p>Disable legitimate interest</p> <p>In case you want to disable legitimate interest for your TCF 2.2 CMP, you need to restrict all purposes to consent in the Admin Interface.</p> <p></p>"},{"location":"web/features/tcf2/configure-the-vendors/#non-iab-vendors","title":"Non-IAB Vendors","text":"<p>The configuration of non-IAB vendors works the usual way. You may define the service categories and choose from our list of fully prepared services or define your own custom services. There is nothing TCF 2.2 specific to consider with the configuration of the non-IAB services.</p> <p></p>"},{"location":"web/features/tcf2/general-information/","title":"General Information","text":"<p>The Usercentrics CMP is IAB TCF 2.2 certified and therefore meets the requirements of the specification of the IAB TCF 2.0 framework.</p> <p>The standard regulates how user consent information has to be captured and used within the programmatic advertising ecosystem, with the goal of a frictionless functioning of the ecosystem through following a standardised approach of implementing data privacy regulations.</p> <p>We are briefly explaining here some key concepts of the framework:</p> <p>The tcString is a technical concept which encodes the consent information in a machine readable format. The tcString contains all required information for any system in the ecosystem to validate what consent has been given by a user and what processing is allowed based on that. The tcString is generated and provided by a CMP at the point where users make consent decisions. Each vendor service that collects data must take the information encoded in the tcString into account and decide if and what consent the user has given.</p> <p>The TCF 2.2 API is the technical concept that allows the vendors integrated in a website or app to interact with the CMP in order to e.g. obtain the tcString in a standardised way. Any IAB TCF 2.0 certified CMP implements this API.</p> <p>The Global Vendor List (GVL) is a list of all service vendors who registered for the IAB TCF 2.2 framework. By registering for the TCF 2.0 framework these vendors confirm that they comply with the framework policies. The list is maintained by the IAB and regular updates are provided, typically on a weekly basis. The list contains all necessary information about the vendors, that is required by the framework such as descriptions of the services and the data the service uses, the purposes for which the service uses the data, the duration of operation of cookies or similar information that the service stores on a user\u2019s device.</p> <p>The TCF 2.2 framework also prescribes rather strict UX behaviours for CMPs. This impacts the design but also the content shown in a CMP and leaves little room for own optimisation. Aspects like the contrast ratio of colours and the messages that must be shown to users at certain layers of the CMP dialogues are some examples of clearly specified conditions to be met.</p> <p>TCF 2.2 follows the Service-Specific Scope. The Service-Specific Scope means that a user given consent applies only to the specific website/app and cannot be propagated to other sites. This is the scope that is broadly supported within the ad tech ecosystem and the Usercentrics CMP</p> <p>For further and more detailed reading on the TCF 2.2 framework, please visit this page.</p>"},{"location":"web/features/tcf2/service-integration/","title":"Service Integration","text":"<p>Here a few important notes on what you need to consider when integrating vendors / services under TCF 2.2.</p>"},{"location":"web/features/tcf2/service-integration/#iab-vendors","title":"IAB Vendors","text":"<p>The Usercentrics CMP exposes the IAB TCF 2.2 API which offers a standardised way for publishers and vendors to fetch the users consent information. IAB certified vendors are able to work with the TCF 2.2 API, which means in most cases no further modification or adjustments to vendor scripts are needed. </p> <p>This means vendors can request the consent state when the CMP is loaded using the __tcfapi function with the command getTCData. </p> Sample<pre><code>__tcfapi('getTCData', 2, (tcData, success) =&gt; {\n    console.log(tcData)\n});\n</code></pre> <p>In order to react on changes of the consent state vendors can make use of the event listener provided by the API using the __tcfapi function with the command addEventListener.</p> Sample<pre><code>__tcfapi('addEventListener', 2, function(tcData,success){\n    // inital tc string information\n    if(success &amp;&amp; tcData.eventStatus === 'tcloaded') {\n        console.log(' TCF tcLoaded Event - tcString: '+tcData.tcString);        \n    }\n    // tc string after user interaction completed\n    else if(success &amp;&amp; tcData.eventStatus === 'useractioncomplete') {\n        console.log('TCF useractioncomplete Event - tcString: '+tcData.tcString);\n    }\n    else {\n        // do something else\n    }\n});\n</code></pre> <p>More details about the TCF 2.2 CMP API and its commands can be found here.</p>"},{"location":"web/features/tcf2/service-integration/#non-iab-vendors","title":"Non-IAB Vendors","text":"<p>Non-IAB vendors do not follow the framework\u2019s concepts and therefore do not use the TCF API or tcString. For those, there is nothing TCF 2.2 specific to be considered. Use our Direct Integration Guide to handle non-IAB vendors.</p>"},{"location":"web/features/tcf2/service-integration/#tag-management-systems","title":"Tag Management Systems","text":"<p>If you are using a tag manager for vendor script integration, you should consider the following information.</p> <p>IAB registered vendors have to be loaded in order to request the tcString from our CMP and understand the information. Therefore, no tag manager triggers should be configured around those vendor tags.</p> <p>Non-IAB vendors need to be handled manually. The CMP version 2 uses an event \u201cconsent_status\u201d which should be used in your tag manager to trigger the services.  Here's an example configuration for the Google Tag Manager</p>"},{"location":"web/implementation/sdk/","title":"Sdk","text":""},{"location":"web/implementation/sdk/#introduction","title":"Introduction","text":"<p>With the Usercentrics Web CMP SDK our aim is to provide a lightweight library which enables you to build your own fully customiziable Consent Solution, while still leveraging the backend infrastructure that we provide at Usercentrics.</p> <p>Follow this guide in order to have the Browser SDK fully prepared for your own UI design in no time.</p> <p>Looking for supported attributes?  You can find them in the following links:</p> <ul> <li>Classes </li> <li>Enums </li> <li>Interfaces </li> <li>Types </li> </ul>"},{"location":"web/implementation/sdk/#integrate-the-browser-sdk","title":"Integrate the Browser SDK","text":""},{"location":"web/implementation/sdk/#installing-the-dependency","title":"Installing the dependency","text":"<p>For starters, you will need to install the dependency. For that use the following command:</p> <pre><code>npm install @usercentrics/cmp-browser-sdk --save\n</code></pre>"},{"location":"web/implementation/sdk/#creating-the-browser-sdk-instance","title":"Creating the Browser SDK Instance","text":"<p>To initialize the BrowserSDK class, please use the following:</p> Without InitOptionsWith InitOptions <pre><code>import { BrowserSdk } from '@usercentrics/cmp-browser-sdk';\n\nconst browserSdk = new BrowserSdk();\n</code></pre> <p>InitOptions definition available here</p> <pre><code>import { BrowserSdk } from '@usercentrics/cmp-browser-sdk';\n\nconst initOptions = {\n  disableTracking: false,\n  euMode: true,\n  language: \"en\",\n  location: {\n    country: \"DE\",\n    region: \"BY\",\n    city: \"\",\n  },\n  sandbox: false\n}\n\nconst browserSdk = new BrowserSdk(initOptions);\n</code></pre>"},{"location":"web/implementation/sdk/#initialize","title":"Initialize","text":"<p>Now with the BrowserSDK instance we can initialize the SDK. There are two methods you can choose between on how to initialize the SDK: via RulesetId or SettingsId.</p> <p>Both methods can also receive the controllerId as an optional parameter</p> SettingsIdRulesetId <pre><code>const settingsId = \"/* YOUR SETTINGSID */\";\nconst controllerId = \"/* OPTIONAL CONTROLLER ID */\"\nconst cmpController = await browserSdk.initBySetting(settingsId);\nconst cmpController = await browserSdk.initBySetting(settingsId, controllerId);\n</code></pre> <pre><code>const rulesetId = \"/* YOUR RULESETID */\";\nconst controllerId = \"/* OPTIONAL CONTROLLER ID */\"\nconst cmpController = await browserSdk.initByRuleSet(rulesetId);\nconst cmpController = await browserSdk.initByRuleSet(rulesetId, controllerId);\n</code></pre>"},{"location":"web/implementation/sdk/#using-the-browser-sdk","title":"Using the Browser SDK","text":""},{"location":"web/implementation/sdk/#getting-the-initial-view","title":"Getting the initial view","text":"<p>Now that you have your <code>cmpController</code> ready, you can check which view you should show.</p> <pre><code>const { ui } = cmpController;\n\nswitch (ui.initialView) {\n  case 'button':\n    // Show the Privacy Button\n    break;\n  case 'first':\n    // Show the First Layer\n    break;\n  case 'second':\n    // Show the Second Layer\n    break;\n  default:\n    break;\n}\n</code></pre>"},{"location":"web/implementation/ui/","title":"Ui","text":""},{"location":"web/implementation/ui/#browser-ui-integration","title":"Browser UI integration","text":""},{"location":"web/implementation/ui/#1-add-the-javascript-tag","title":"1. Add the JavaScript Tag","text":"<p>Integrate the Usercentrics script into in the <code>&lt;head&gt;</code> tag of your website, and place this before any third-party scripts that will require consent. </p> <p>Note</p> <p>You can find your personal script with your Settings-ID in the Admin Interface Implementation section.</p> <p>If you're using TCF, before using the script tag please go through the configuration for TCF 2.2</p> Javascript tag<pre><code>&lt;script\n    id=\"usercentrics-cmp\"\n    data-settings-id=\"YOUR_SETTINGS_ID\"\n    src=\"https://web.cmp.usercentrics.eu/ui/loader.js\"\n&lt;/script&gt;\n</code></pre>"},{"location":"web/implementation/ui/#2-replace-script-type-with-textplain","title":"2. Replace script type with text/plain","text":""},{"location":"web/implementation/sdk/classes/","title":"Classes","text":""},{"location":"web/implementation/sdk/classes/#languages-model","title":"Languages Model","text":"<pre><code>class LanguagesModel {\n  languages: Languages;\n  /**\n   * Determines wether or not a language is available\n   * @param {string} language - Language code.\n   * @returns {boolean} - True if language is available.\n   */\n  getHasLanguage(language: string): boolean;\n  /**\n   * Get the language direction (ltr or rtl)\n   * @param {string} language - Language code.\n   * @returns {string} - The language direction.\n   */\n  getLanguageScreenDirection(language: string): \"ltr\" | \"rtl\";\n}\n</code></pre>"},{"location":"web/implementation/sdk/classes/#uimodel","title":"UIModel","text":"<pre><code>class UiModel {\n    initialView: UiView;\n    closedView: 'none' | 'button';\n    language: string;\n    gpcSignalHonored: boolean;\n    dpsDisplayFormat: 'ALL' | 'SHORT';\n\n    /**\n     * Get the ui chosen language\n     * @returns {string} - The ui language.\n     */\n    getLanguage(): string;\n    /**\n     * Set the ui language\n     * @param {string} language - Chosen language.\n     * @returns {void}\n     */\n    setLanguage(language: string): void;\n    /**\n     * Get the ui initial view\n     * @returns {UiView | undefined} - The initial UI view.\n     */\n    getInitialView(): UiView | undefined;\n    /**\n     * Determine which view should be shown upon closing the CMP (none | button)\n     * @returns {string} - The UI view to be shown after closing CMP.\n     */\n    getClosedView(): \"none\" | \"button\";\n}\n</code></pre>"},{"location":"web/implementation/sdk/classes/#dpsmodel","title":"DpsModel","text":"<pre><code>class DpsModel implements DpsData {\n  services: DpsData['services'];\n  categories: DpsData['categories'];\n  granularConsentDisabled: DpsData['granularConsentDisabled'];\n  updatedBy?: DpsData['updatedBy'];\n  constructor({ services, categories, granularConsentDisabled }: DpsData);\n  /**\n   * Accept all services consents\n   * @returns {void}\n   */\n  acceptAll(): void;\n  /**\n   * Deny all services consents\n   * @returns {void}\n   */\n  denyAll(): void;\n  /**\n   * Accept a set of services consents\n   * @param {ServicesConsents} consents - Set of services to be accepted.\n   * @returns {void}\n   */\n  acceptSome(consents: ServicesConsents): void;\n  /**\n   * Deny a set of services consents\n   * @param {ServicesConsents} consents - Set of services to be denied.\n   * @returns {void}\n   */\n  denySome(consents: ServicesConsents): void;\n  /**\n   * Update a set of services consents\n   * @param {ServicesConsents} consents - Set of services to be updated.\n   * @returns {void}\n   */\n  updateSome(consents: ServicesConsents): void;\n  /**\n   * Update a set of categories' consents\n   * @param {CategoriesConsents} categoriesConsents - Set of categories to be updated.\n   * @returns {void}\n   */\n  updateCategoriesConsents(categoriesConsents: CategoriesConsents): void;\n  /**\n   * Get all accepted services\n   * @param {string} key - Key that will identify each service on the final result.\n   * @returns {Record&lt;string, ServiceData&gt;} - The set of accepted services.\n   */\n  getAcceptedServices(key?: 'id' | 'name'): Record&lt;string, import(\"@usercentrics/cmp-browser-api\").ServiceData&gt;;\n  /**\n   * Get all services consent state\n   * @param {string} key - Key that will identify each service on the final result.\n   * @returns {Record&lt;string, boolean&gt;} - The set of services with the respective consent state.\n   */\n  getServicesConsents(key?: 'id' | 'name'): Record&lt;string, boolean&gt;;\n  /**\n   * Get all categories consent state\n   * @returns {Record&lt;string, CategoryData['state']&gt;} - The set of categories with the respective consent state.\n   */\n  getCategoriesConsents(): Record&lt;string, \"ALL_DENIED\" | \"SOME_ACCEPTED\" | \"ALL_ACCEPTED\"&gt;;\n  /**\n   * Get category consent state\n   * @param {string} id - Category Id.\n   * @returns {CategoryData['state']} - The consent state of the category.\n   */\n  getCategoryConsent(id: string): \"ALL_DENIED\" | \"SOME_ACCEPTED\" | \"ALL_ACCEPTED\" | undefined;\n  /**\n   * Get category id from service id\n   * @param {string} serviceId - Service Id.\n   * @returns {string} - The category Id.\n   */\n  getCategoryIdFromServiceId(serviceId: string): string;\n  /**\n   * Get global consent status (based on all services)\n   * @returns {ConsentData['status']} - The global consent status.\n   */\n  getConsentStatus(): ConsentData['status'];\n  /**\n   * Get the list of services ids which belong to the some_accepted or some_denied cases\n   * @returns {string[]} - The list of services ids.\n   */\n  getConsentServiceIds(): string[];\n  /**\n   * Get service data by id\n   * @param {string} serviceId - Service id.\n   * @returns {ServiceData | undefined} - The service data.\n   */\n  getService(serviceId: string): import(\"@usercentrics/cmp-browser-api\").ServiceData | undefined;\n}\n</code></pre>"},{"location":"web/implementation/sdk/classes/#cmpcontroller","title":"CmpController","text":"<pre><code>export class CmpController {\n  public languages: LanguagesModel;\n  public ui: UiModel;\n\n  public dps: DpsModel;\n  public gcm?: GoogleConsentModeModel;\n  public setting: SettingModel;\n\n  public consent?: GdprConsentModel | CcpaConsentModel | TcfConsentModel;\n  public i18n?: GdprI18nModel | CcpaI18nModel | TcfI18nModel;\n  public tcf?: TcfModel;\n  public template?: TemplateModel;\n  public theme: ThemeModel;\n\n  /**\n   * Get the consent details\n   * @returns {Promise&lt;ConsentDetails | undefined&gt;} - The consent data used inside our UCstring.\n   */\n  getConsentDetails(): Promise&lt;ConsentDetails | undefined&gt;;\n  /**\n   * Fetch the translated data from the API and created the respective variant i18n models\n   * @returns {Promise&lt;void&gt;}\n   */\n  initI18nData(): Promise&lt;void&gt;;\n  /**\n   * Clears the Local Storage including Cross Domain\n   * @returns {Promise&lt;void&gt;}\n   */\n  clearStorage(): Promise&lt;void&gt;;\n  /**\n   * Unblock the scripts which need consent to be run\n   * @returns {Promise&lt;string[]&gt;} - A list with the services names which were unblocked.\n   */\n  unblockScriptsWithConsent(): Promise&lt;string[]&gt;;\n  /**\n   * Get the Controller Id\n   * @returns {string | undefined} - The controller id value.\n   */\n  getControllerId(): string | undefined;\n  /**\n   * Get the current selected language\n   * @returns {string} the selected language\n   */\n  getLanguage(): string;\n  /**\n   * Get consent required\n   * @returns {boolean | undefined} - True if consent is required from user.\n   */\n  getIsConsentRequired(): boolean | undefined;\n  /**\n   * Sets the CMP language to the new given language\n   * @param {string} language - New language\n   * @returns {Promise&lt;void&gt;}\n   */\n  changeLanguage(language: string): Promise&lt;void&gt;;\n  /**\n   * Will set the analytics pixel via network call and will fire the custom events defined on the AI\n   * @param {CMP_EVENT_TYPE} cmpEventType - The type of event which trigered the analytics call.\n   * @param {CmpEventSource} source - The source from where the event was fired originally.\n   * @returns {void}\n   */\n  setAnalyticsPixel(cmpEventType: CMP_EVENT_TYPE, source?: CmpEventSource): void;\n  /**\n   * Accepts all consents inside the CMP\n   * @returns {Promise&lt;void&gt;}\n   */\n  acceptAllConsents(): Promise&lt;void&gt;;\n  /**\n   * Denys all consents inside the CMP\n   * @returns {Promise&lt;void&gt;}\n   */\n  denyAllConsents(): Promise&lt;void&gt;;\n  /**\n   * Updates a list of consents with the respective state\n   * @param {ServicesConsents} consents - List of (serviceId, consentState) pair.\n   * @returns {Promise&lt;void&gt;}\n   */\n  updateServicesConsents(consents: ServicesConsents): Promise&lt;void&gt;;\n  /**\n   * Updates a specific consent with the respective state\n   * @param {ServiceConsent} consent - The service to be updated (serviceId, consentState) pair.\n   * @returns {Promise&lt;void&gt;}\n   */\n  updateServiceConsent(consent: ServiceConsent): Promise&lt;void&gt;;\n  /**\n   * Updates a list of categories with the respective state\n   * @param {CategoriesConsents} categoriesConsents - List of (categoryId, consentState) pair.\n   * @returns {Promise&lt;void&gt;}\n   */\n  updateCategoriesConsents(categoriesConsents: CategoriesConsents): Promise&lt;void&gt;;\n  /**\n   * Updates a specific category with the respective state\n   * @param {CategoriesConsents} categoriesConsents - The category to be updated (categoryId, consentState) pair.\n   * @returns {Promise&lt;void&gt;}\n   */\n  updateCategoryConsent(categoryConsent: CategoryConsent): Promise&lt;void&gt;;\n  /**\n   * Save the consents\n   * @param {ConsentType} consentType - Type of consent (Implicit/Explicit).\n   * @returns {Promise&lt;void&gt;}\n   */\n  saveConsents(consentType?: ConsentType, fromEmbeddings?: boolean): Promise&lt;void&gt;;\n  /**\n   * Save the consents remotely on API\n   * @returns {Promise&lt;void&gt;}\n   */\n  saveConsentRemotely(): Promise&lt;void&gt;;\n  /**\n   * Check if all consents are granted\n   * @returns {boolean} - True if all consents accepted.\n   */\n  areAllConsentsAccepted(): boolean;\n  /**\n   * Check if all consents are denied\n   * @returns {boolean} - True if all consents denied.\n   */\n  areAllConsentsDenied(): boolean;\n  /**\n   * Gets the detailed information of a service\n   * @param {string} serviceId - Service id.\n   * @param {boolean} includeDetails - Determine wether service details should be included on the result or not.\n   * @returns {Promise&lt;{service: ServiceData; i18n: ServiceI18n;} | undefined&gt;} - The service detailed information.\n   */\n  getServiceInfo(serviceId: string, includeDetails?: boolean): Promise&lt;{\n      service: import(\"@usercentrics/cmp-browser-api\").ServiceData;\n      i18n: import(\"@usercentrics/cmp-browser-api\").ServiceI18n;\n  } | undefined&gt;;\n  /**\n   * Get Stored Information via URL\n   * @param {string} url - URL for Stored Info.\n   * @returns {Promise&lt;{disclosures?: StoredInfoItem[] | undefined; domains?: StoredInfoItem[] | undefined;}&gt;} - The service's stored information.\n   */\n  getStoredInfoByUrl(url: string): Promise&lt;{\n      disclosures?: StoredInfoItem[] | undefined;\n      domains?: StoredInfoItem[] | undefined;\n  }&gt;;\n  /**\n   * Save consents locally and remotely\n   * @param {string} consentHash - Consent hash string.\n   * @returns {Promise&lt;void&gt;}\n   */\n  applyConsents(consentHash?: string): Promise&lt;void&gt;;\n  /**\n   * Get themes\n   * @param {Themes} themes - Themes for privacy button, cmp and embeddings views.\n   * @param {ScreenType} screenType - Screen type (desktop, tablet, mobile, xs).\n   * @returns {privacyButton, firstLayer, secondLayer, embeddings} - The views' themes according to screen type.\n   */\n  getThemes(themes: Themes, screenType: _ScreenType1): {\n      privacyButton: Required&lt;Required&lt;import(\"@usercentrics/cmp-browser-api\").PrivacyButtonTheme&gt;&gt; | {\n          direction: import(\"@/models/ThemeModel/interfaces\").ScreenDirection | undefined;\n          position: \"left\" | \"right\";\n          size: number;\n          backgroundColor: string;\n          pages: string[];\n          iconUrl: string;\n          iconColor: string;\n      };\n      firstLayer: Required&lt;import(\"@usercentrics/cmp-browser-api\").CmpTheme&gt;;\n      secondLayer: Required&lt;import(\"@usercentrics/cmp-browser-api\").CmpTheme&gt;;\n      embeddings: {\n          direction: import(\"@/models/ThemeModel/interfaces\").ScreenDirection | undefined;\n          border: {\n              radius: string;\n          };\n          borderRadiusLayer: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n          borderRadiusButton: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n          buttons: import(\"@usercentrics/cmp-browser-api\").CmpButtonsType[][];\n          colors: {\n              acceptBg?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              acceptTxt?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              background?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              border?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              denyBg?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              denyTxt?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              /**\n               * Update theme model\n               * @param {ThemeData} themeData - Theme model data.\n               * @returns {void}\n               */\n              link?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              moreBg?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              moreTxt?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              neutral?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              overlay?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              primary?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData; /**\n                * Get service consent history\n                * @param {string} serviceId - Service id.\n                * @returns {Promise&lt;void | DeviceStorage | null&gt;} - The consent history for the service.\n                */\n              privacyBg?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              privacyIcon?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              saveBg?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              saveTxt?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              tabActive?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              tabInactive?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              toggleActive?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              toggleInactive?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              toggleDisabled?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              toggleActiveIcon?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              toggleInactiveIcon?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              toggleDisabledIcon?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              tertiary?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              text?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              ccpaButtonColor?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              ccpaButtonTextColor?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n          };\n          scrollbar: {\n              thumbColor?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n          };\n          fonts: {\n              family: string;\n          };\n          hideDenyBtn: boolean;\n          hideLanguageSwitch: boolean;\n          logo: {\n              url: string;\n              alt: string;\n              position: \"center\" | \"left\" | \"right\";\n          };\n          footer: {\n              isCentered: boolean;\n          };\n          maxBannerWidth: string;\n          name: string;\n          overlayOpacity: string;\n          position: \"center\" | \"left\" | \"right\" | \"bottom\";\n          removeCcpaToggle: boolean;\n          secondLayerTrigger: string;\n          spacing: import(\"@usercentrics/cmp-browser-api\").Spacing;\n          typography: {\n              color?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              font?: import(\"@usercentrics/cmp-browser-api\").OptionalSettingsData;\n              size?: number | undefined;\n          };\n          useBackgroundShadow: boolean;\n          useOverlay: boolean;\n          closeOption: import(\"@usercentrics/cmp-browser-api\").CLOSE_OPTION | null;\n          tcf: {\n              showDescriptions?: boolean | undefined;\n              hideNonIab?: boolean | undefined;\n              hideToggles?: boolean | undefined;\n              showSharedOutsideEu?: boolean | undefined;\n          };\n          showCategoriesToggles: boolean;\n          showMoreInformationLink: boolean;\n          hideDataProcessingServices: boolean;\n          hideServicesToggles: boolean;\n          defaultTab: \"FIRST\" | \"SECOND\";\n      };\n  };\n  /**\n   * Update theme model\n   * @param {ThemeData} themeData - Theme model data.\n   * @returns {void}\n   */\n  updateTheme(themeData: _ThemeData1): void;\n  /**\n   * Get service consent history\n   * @param {string} serviceId - Service id.\n   * @returns {Promise&lt;void | DeviceStorage | null&gt;} - The consent history for the service.\n   */\n  getConsentHistory(serviceId?: string): Promise&lt;void | import(\"@usercentrics/cmp-browser-api\").ConsentHistory[] | null&gt;;\n}\n</code></pre>"},{"location":"web/implementation/sdk/enums/","title":"Enums","text":""},{"location":"web/implementation/sdk/enums/#cmp_event_type","title":"CMP_EVENT_TYPE","text":"<pre><code>enum CMP_EVENT_TYPE {\n  CMP_SHOWN = \"CMP_SHOWN\",\n  ACCEPT_ALL = \"ACCEPT_ALL\",\n  DENY_ALL = \"DENY_ALL\",\n  SAVE = \"SAVE\",\n  COOKIE_POLICY_LINK = \"COOKIE_POLICY_LINK\",\n  IMPRINT_LINK = \"IMPRINT_LINK\",\n  MORE_INFORMATION_LINK = \"MORE_INFORMATION_LINK\",\n  PRIVACY_POLICY_LINK = \"PRIVACY_POLICY_LINK\",\n  CCPA_TOGGLES_ON = \"CCPA_TOGGLES_ON\",\n  CCPA_TOGGLES_OFF = \"CCPA_TOGGLES_OFF\"\n}\n</code></pre>"},{"location":"web/implementation/sdk/interfaces/","title":"Interfaces","text":""},{"location":"web/implementation/sdk/interfaces/#initoptions","title":"InitOptions","text":"<pre><code>interface InitOptions {\n  disableTracking?: boolean;\n  euMode?: boolean;\n  language?: string;\n  location?: UserLocation;\n  sandbox?: true;\n}\n</code></pre>"},{"location":"web/implementation/sdk/interfaces/#userlocation","title":"UserLocation","text":"<pre><code>interface UserLocation {\n  country: string;\n  region?: string;\n  city?: string;\n}\n</code></pre>"},{"location":"web/implementation/sdk/interfaces/#serviceconsent","title":"ServiceConsent","text":"<pre><code>interface ServiceConsent {\n  id: string;\n  consent: boolean;\n}\n</code></pre>"},{"location":"web/implementation/sdk/interfaces/#languagesdata","title":"LanguagesData","text":"<pre><code>interface LanguagesData {\n    languages: Languages;\n}\n</code></pre>"},{"location":"web/implementation/sdk/interfaces/#language","title":"Language","text":"<pre><code>interface Language {\n    name: string;\n    en?: string;\n    rtl?: true;\n}\n</code></pre>"},{"location":"web/implementation/sdk/methods/","title":"Methods","text":"<p>Methods go here</p>"},{"location":"web/implementation/sdk/types/","title":"Types","text":""},{"location":"web/implementation/sdk/types/#cmpeventsource","title":"CmpEventSource","text":"<pre><code>type CmpEventSource = UiView | 'embeddings' | '__ucCmp';\n</code></pre>"},{"location":"web/implementation/sdk/types/#servicesconsents","title":"ServicesConsents","text":"<pre><code>type ServicesConsents = ServiceConsent[];\n</code></pre>"},{"location":"web/implementation/sdk/types/#categoriesconsents","title":"CategoriesConsents","text":"<pre><code>type CategoriesConsents = CategoryConsent[];\n</code></pre>"},{"location":"web/implementation/sdk/types/#categoryconsent","title":"CategoryConsent","text":"<pre><code>type CategoryConsent = ServiceConsent;\n</code></pre>"},{"location":"web/implementation/sdk/types/#languages","title":"Languages","text":"<pre><code>type Languages = Record&lt;string, Language&gt;;\n</code></pre>"},{"location":"web/implementation/sdk/types/#uiview","title":"UiView","text":"<pre><code>type UiView = 'none' | 'button' | 'first' | 'second';\n</code></pre>"},{"location":"web/implementation/ui/interfaces/","title":"Interfaces","text":""},{"location":"web/implementation/ui/interfaces/#tcfdecisions","title":"TCFDecisions","text":"<pre><code>/** A user's consent decision on all TCF options */\ninterface TCFDecisions {\n  /** A user's consent decision on TCF purposes */\n  purposes?: TCFUserDecisionOnPurpose[];\n  /** A user's consent decision on TCF special features */\n  specialFeatures?: TCFUserDecisionOnSpecialFeature[];\n  /** A user's consent decision on TCF vendors */\n  vendors?: TCFUserDecisionOnVendor[];\n}\n</code></pre>"},{"location":"web/implementation/ui/interfaces/#basetcfuserdecision","title":"BaseTCFUserDecision","text":"<pre><code>interface BaseTCFUserDecision {\n  /** Indicates if the user gave consent (true) or denied consent (false) */\n  consent?: boolean;\n  /** The id of the purpose/vendor the consent decision belongs to */\n  id: number;\n}\n</code></pre>"},{"location":"web/implementation/ui/interfaces/#tcfuserdecisiononpurpose","title":"TCFUserDecisionOnPurpose","text":"<pre><code>/** A user's consent decision for a single purpose */\ninterface TCFUserDecisionOnPurpose extends BaseTCFUserDecision {\n  /** Indicates if the user gave legitimate interest consent (true) or denied consent (false) */\n  legitimateInterestConsent?: boolean;\n}\n</code></pre>"},{"location":"web/implementation/ui/interfaces/#tcfuserdecisiononspecialfeature","title":"TCFUserDecisionOnSpecialFeature","text":"<pre><code>/** A user's consent decision for a single special feature */\ninterface TCFUserDecisionOnSpecialFeature extends BaseTCFUserDecision {\n  /** pasisng consent is compulsory */\n  consent: boolean;\n}\n</code></pre>"},{"location":"web/implementation/ui/types/","title":"Types","text":""},{"location":"web/implementation/ui/types/#tcfuserdecisiononvendor","title":"TCFUserDecisionOnVendor","text":"<pre><code>type TCFUserDecisionOnVendor = TCFUserDecisionOnPurpose;\n</code></pre>"},{"location":"web/migration/migration-from-v2/","title":"Migration from v2","text":""},{"location":"web/migration/migration-from-v2/#migrate-to-v3","title":"Migrate to V3","text":""},{"location":"web/migration/migration-from-v2/#introduction","title":"Introduction","text":"<p>V3 introduces breaking changes that will require manual updates if you have an existing codebase with a custom V2 implementation. </p> <p>This guide covers what you should be changing in order to be able to use the V3 version.</p> <p>For each step, this guide is designed to:</p> <ul> <li>help you understand the differences between V2 and V3</li> <li>help you resolve any breaking changes</li> <li>provide you, whenever possible, with code examples and starting points in order to migrate to V3.</li> </ul> <p>Info</p> <p>For a broader understanding of V3, please read the following document.</p>"},{"location":"web/migration/migration-from-v2/#getting-started","title":"Getting started","text":""},{"location":"web/migration/migration-from-v2/#script-tag","title":"Script Tag","text":"<p>Let's start the migration by updating the Usercentrics <code>&lt;script&gt;</code> tag on your website.</p> <p>The main difference will be the <code>src</code> URL. In order to start using V3, please update the <code>src</code> to: <code>\"https://web.cmp.usercentrics.eu/ui/loader.js</code>.</p> <p>Another difference is the lack of <code>bundle.js</code> and <code>bundle-legacy.js</code> scripts which are automatically handled by our new <code>loader.js</code> script.</p> <p>bundle and bundle-legacy users</p> <p>Only <code>loader.js</code> will be available on V3</p> V2V3 <pre><code>&lt;script\n  id=\"usercentrics-cmp\"\n  data-settings-id=\"XXXXXXXX\"\n  src=\"https://app.usercentrics.eu/browser-ui/latest/loader.js\" \n  async&gt;\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;script\n  id=\"usercentrics-cmp\"\n  data-settings-id=\"XXXXXXXX\"\n  src=\"https://web.cmp.usercentrics.eu/ui/loader.js\" \n  async\n&gt;\n&lt;/script&gt;\n</code></pre>"},{"location":"web/migration/migration-from-v2/#browser-ui-api","title":"Browser UI API","text":"<p>We recommend taking a look at our new Browser UI API after you resolve the breaking changes</p>"},{"location":"web/migration/migration-from-v2/#renamed-methods","title":"Renamed methods","text":"<p>With the introduction of V3, the following Browser UI API methods were renamed:</p> Old name New name enableScriptsForServicesWithConsent <code>refreshScripts</code>"},{"location":"web/migration/migration-from-v2/#renamed-methods-with-functional-changes","title":"Renamed methods with functional changes","text":"<p>The following methods, besides being renamed also got functional changes</p> Old name New name acceptServices <code>updateServicesConsents</code> rejectServices \u2060 updateChoicesForTcf <code>updateTcfConsents</code>"},{"location":"web/migration/migration-from-v2/#updateservicesconsents","title":"updateServicesConsents","text":"<p>In order to simplify the services consent updates, the <code>acceptServices</code> and <code>rejectServices</code> have been unified into one method <code>updateServicesConsents</code> which now accepts the following parameters:</p> Input Input Type Return Type servicesConsents ServicesConsents <code>Promise&lt;void&gt;</code> <pre><code>const serviceConsents = [\n    {id: 'HkocEodjb7', consent: true}, // Google Analytics\n    {id: 'S1_9Vsuj-Q', consent: false}, // Google Ads\n]\n\nawait __ucCmp.updateServicesConsents(serviceConsents);\nawait __ucCmp.saveConsents();\n</code></pre>"},{"location":"web/migration/migration-from-v2/#updatetcfconsents","title":"updateTcfConsents","text":"Input Input Type Return Type decisions TCFDecisions <code>Promise&lt;void&gt;</code> <pre><code>const vendorConsents = [\n    {id: 6, consent: true}, // AdSpirit GmbH\n    {id: 11, legitimateInterestConsent: false}, // Quantcast\n];\n\nconst decision = {\n    vendors: vendorConsents\n};\n\nawait updateTcfVendorConsents({ decision });\n</code></pre>"},{"location":"web/migration/migration-from-v2/#methods-functional-changes","title":"Methods functional changes","text":"<p>All new V3 methods are now async. Apart from that, <code>denyAllConsents</code>, <code>acceptAllConsents</code>, <code>updateServicesConsents</code> and <code>updateTcfConsents</code> will only update the consent status. In order to save consents, you need to call <code>saveConsents('EXPLICIT' | 'IMPLICIT')</code> after updating consents.</p>"},{"location":"web/migration/migration-from-v2/#removed-methods","title":"Removed methods","text":"<p>With the introduction of V3, the following Browser UI API methods were removed:</p> <p>Removed methods</p>"},{"location":"web/migration/migration-from-v2/#acceptservice","title":"acceptService","text":""},{"location":"web/migration/migration-from-v2/#areallconsentsaccepted","title":"areAllConsentsAccepted","text":""},{"location":"web/migration/migration-from-v2/#clearstorage","title":"clearStorage","text":""},{"location":"web/migration/migration-from-v2/#denyandcloseccpa","title":"denyAndCloseCcpa","text":""},{"location":"web/migration/migration-from-v2/#rejectservice","title":"rejectService","text":""},{"location":"web/migration/migration-from-v2/#getservicesbaseinfo","title":"getServicesBaseInfo","text":""},{"location":"web/migration/migration-from-v2/#getservicesfullinfo","title":"getServicesFullInfo","text":""},{"location":"web/migration/migration-from-v2/#restartcmp","title":"restartCMP","text":""},{"location":"web/migration/migration-from-v2/#restartembeddings","title":"restartEmbeddings","text":""},{"location":"web/migration/migration-from-v2/#getsettings","title":"getSettings","text":""},{"location":"web/migration/migration-from-v2/#getsettingscore","title":"getSettingsCore","text":""},{"location":"web/migration/migration-from-v2/#getsettingsui","title":"getSettingsUI","text":""},{"location":"web/migration/migration-from-v2/#getsettingslabels","title":"getSettingsLabels","text":""},{"location":"web/migration/migration-from-v2/#gettcfvendors","title":"getTCFVendors","text":""},{"location":"web/migration/migration-from-v2/#events","title":"Events","text":"<p>TODO: Add migration guide if needed for the V3 events.</p>"},{"location":"web/migration/migration-from-v2/#content-security-policy","title":"Content Security Policy","text":"<p>For best security you should a <code>Content-Security-Policy</code> meta tag. It's important to replace the nonce.</p> <pre><code>    &lt;meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' https://*.usercentrics.eu 'nonce-SomeRandomString'; connect-src 'self' https://*.usercentrics.eu; img-src 'self' data: https://*.usercentrics.eu;\"&gt;\n    &lt;script nonce=\"SomeRandomString\" src=\"https://web.cmp.usercentrics.eu/ui/loader.js\" id=\"usercentrics-cmp\" data-settings-id=\"YOUR_SETTINGS_ID\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"web/migration/migration-from-v2/#missing-features-not-implemented-yet","title":"Missing features (not implemented yet)","text":"<p>Whereas most of the features of v2 have been implemented, some are still on the todo list:</p> <ul> <li>Smart Data Protector compatibility</li> <li>Suppressing CMP via <code>window</code> variable</li> <li>Consent Injection via <code>window</code> variable</li> <li>Custom domain names</li> </ul>"},{"location":"web/migration/migration-from-v2/#customcss","title":"CustomCSS","text":"<p>Since the structure of the CMP changed, the custom css is not backwards compatible and needs updating. TODO: add css entry points</p>"},{"location":"web/migration/migration-from-v2/#embeddings","title":"Embeddings","text":"<p>Starting with V3, in order to simplify their usage - embeddings will be a reflection of the CMP itself, meaning that all the information present in the CMP will also be present in these.</p> <p>Setup options</p> <p>For the <code>div</code> possible class names remain the same: <code>\"uc-embed\"</code> and <code>\"uc-embed-tcf\"</code> for GDPR and TCF, respectively.</p> <p>For more insights, please refer to the Embeddings documentation</p>"},{"location":"web/migration/migration-from-v2/#structure","title":"Structure","text":"<p>Since embeddings are a reflection of the CMP in V3, the structure of these have been simplified. The previous way of configuring embeddings is no longer required because of this.</p>"},{"location":"web/migration/migration-from-v2/#deprecated-attributes","title":"Deprecated attributes","text":""},{"location":"web/migration/migration-from-v2/#uc-data","title":"uc-data","text":"<p>As mentioned above, all the information present in the CMP will be displayed in the embeddings with no option to filter out specific information.</p>"},{"location":"web/migration/migration-from-v2/#uc-styling","title":"uc-styling","text":"<p>All embeddings will have the same styling as the CMP, so no further styling is required.</p>"},{"location":"web/migration/migration-from-v2/#uc-consent-name","title":"uc-consent-name","text":"<p>This attribute has been deprecated in favor of using the <code>uc-embed-type</code> value <code>service-specific</code> with the <code>uc-embed-service-id</code>.</p> <p>Example on how to migrate from V2 to V3</p> V2V3 <pre><code>&lt;div \n  class=\"uc-embed\"\n  uc-consent-name=\"Youtube Video\"\n  uc-data=\"all\"&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>&lt;div \n  class=\"uc-embed\"\n  uc-embed-type=\"service-specific\"\n  uc-embed-service-id=\"BJz7qNsdj-7\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"web/migration/migration-from-v2/#uc-embedding-vendors","title":"uc-embedding-vendors","text":"<p>Since we now reflect the same labels and styling as the CMP, this option is no longer available.</p>"},{"location":"web/migration/migration-from-v2/#uc-embedding-non-iab-vendors","title":"uc-embedding-non-iab-vendors","text":"<p>Since we now reflect the same labels and styling as the CMP, this option is no longer available.</p>"},{"location":"web/migration/migration-from-v2/#renamed-attributes","title":"Renamed attributes","text":""},{"location":"web/migration/migration-from-v2/#uc-embedding-type","title":"uc-embedding-type","text":"<p>Was renamed to <code>uc-embed-type</code>.</p> <p>The values for <code>purpose</code> and <code>vendor</code> were renamed to <code>purposes</code> and <code>vendors</code>, respectively.</p>"},{"location":"web/migration/migration-from-v2/#uc-show-toggle","title":"uc-show-toggle","text":"<p>Was renamed to <code>uc-embed-show-toggle</code>.</p> <p>Following the same phylosophy as <code>uc-styling</code> is no longer possible to change the toggle colors, they will keep the same color as selected for the CMP.</p> <p>In that case, <code>.uc-embed-toggle-button.toggle-on</code>, <code>.uc-embed-toggle-button.toggle-off</code>, <code>.uc-embed-toggle-button.toggle-disabled</code> are no longer supported. </p>"},{"location":"web/migration/migration-from-v2/#uc-embedding-show-hidden-categories","title":"uc-embedding-show-hidden-categories","text":"<p>Was renamed to <code>uc-embed-show-all-categories</code>. All other functionality and properties remain the same.</p>"},{"location":"web/migration/migration-from-v2/#uc-embedding-title","title":"uc-embedding-title","text":"<p>Was renamed to <code>uc-embed-title</code>.</p>"}]}